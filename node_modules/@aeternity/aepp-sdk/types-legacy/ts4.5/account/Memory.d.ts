import AccountBase from './Base';
import { Encoded } from '../utils/encoder';
import { AciValue } from '../utils/typed-data';
import { AensName } from '../tx/builder/constants';
export declare function getBufferToSign(transaction: Encoded.Transaction, networkId: string, innerTx: boolean): Uint8Array;
/**
 * In-memory account class
 */
export default class AccountMemory extends AccountBase {
    readonly address: Encoded.AccountAddress;
    /**
     * @param secretKey - Secret key
     */
    constructor(secretKey: string | Uint8Array);
    /**
     * Generates a new AccountMemory using a random secret key
     */
    static generate(): AccountMemory;
    sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;
    signTransaction(transaction: Encoded.Transaction, { innerTx, networkId, ...options }?: {
        innerTx?: boolean;
        networkId?: string;
    }): Promise<Encoded.Transaction>;
    signMessage(message: string, options?: any): Promise<Uint8Array>;
    signTypedData(data: Encoded.ContractBytearray, aci: AciValue, { name, version, networkId, contractAddress, ...options }?: Parameters<AccountBase['signTypedData']>[2]): Promise<Encoded.Signature>;
    signDelegationToContract(contractAddress: Encoded.ContractAddress, { networkId }?: {
        networkId?: string;
    }): Promise<Encoded.Signature>;
    signNameDelegationToContract(contractAddress: Encoded.ContractAddress, name: AensName, { networkId }?: {
        networkId?: string;
    }): Promise<Encoded.Signature>;
    signOracleQueryDelegationToContract(contractAddress: Encoded.ContractAddress, oracleQueryId: Encoded.OracleQueryId, { networkId }?: {
        networkId?: string;
    }): Promise<Encoded.Signature>;
}

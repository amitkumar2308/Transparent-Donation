import { Encoded, Encoding } from '../../utils/encoder';
import { Field } from './field-types';
import { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';
import { Tag } from './constants';
/**
 * JavaScript-based Transaction builder
 */
export declare function getSchema(tag: Tag, version?: number): Array<[
    string,
    Field
]>;
type TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees | Encoding.CallStateTree;
/**
 * Build transaction hash
 * @category transaction builder
 * @param params - Object with tx params
 * @param options - options
 * @param options.prefix - Prefix of transaction
 * @returns object Base64Check transaction hash with 'tx_' prefix
 */
export declare function buildTx<E extends TxEncoding = Encoding.Transaction>(params: TxParams, { prefix }?: {
    prefix?: E;
}): Encoded.Generic<E>;
export type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<TxParamsAsync & {
    tag: TxType;
}, 'tag' | OmitFields>;
/**
 * @category transaction builder
 */
export declare function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction>;
/**
 * Unpack transaction encoded as string
 * @category transaction builder
 * @param encodedTx - Transaction to unpack
 * @param txType - Expected transaction type
 * @returns Object with transaction param's
 */
export declare function unpackTx<TxType extends Tag>(encodedTx: Encoded.Generic<TxEncoding>, txType?: TxType): TxUnpacked & {
    tag: TxType;
};
/**
 * Build a transaction hash
 * @category transaction builder
 * @param rawTx - base64 or rlp encoded transaction
 * @returns Transaction hash
 */
export declare function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash;
/**
 * Build a contract public key by contractCreateTx or gaAttach
 * @category contract
 * @param contractTx - Transaction
 * @returns Contract public key
 */
export declare function buildContractIdByContractTx(contractTx: Encoded.Transaction): Encoded.ContractAddress;
export {};

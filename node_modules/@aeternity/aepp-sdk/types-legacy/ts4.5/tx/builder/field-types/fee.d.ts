/// <reference types="node" />
import BigNumber from 'bignumber.js';
import { Encoded } from '../../../utils/encoder';
import type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';
/**
 * Calculate fee based on tx type and params
 */
export declare function buildFee(builtTx: Encoded.Transaction, unpackTx: typeof unpackTxType, buildTx: typeof buildTxType): BigNumber;
declare const _default: {
    serializeAettos(_value: string | undefined, { rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee, }: {
        rebuildTx: (params: any) => Encoded.Transaction;
        unpackTx: typeof unpackTxType;
        buildTx: typeof buildTxType;
        _computingMinFee?: BigNumber | undefined;
        _pickBiggerFee?: boolean | undefined;
    }): string;
    serialize(value: import("../constants").Int | undefined, params: {}, { denomination }: {
        denomination?: import("../../..").AE_AMOUNT_FORMATS | undefined;
    }): Buffer;
    deserialize(value: Buffer): string;
};
export default _default;

import CompilerBase, { Aci } from './Base';
import { Encoded } from '../../utils/encoder';
/**
 * A wrapper around aesophia_cli, available only in Node.js.
 * Requires Erlang installed, assumes that `escript` is available in PATH.
 */
export default class CompilerCli extends CompilerBase {
    #private;
    /**
     * @param compilerPath - A path to aesophia_cli binary, by default uses the integrated one
     * @param options - Options
     * @param options.ignoreVersion - Don't ensure that the compiler is supported
     */
    constructor(compilerPath?: string, { ignoreVersion }?: {
        ignoreVersion?: boolean;
    });
    compile(path: string): Promise<{
        bytecode: Encoded.ContractBytearray;
        aci: Aci;
    }>;
    compileBySourceCode(sourceCode: string, fileSystem?: Record<string, string>): Promise<{
        bytecode: Encoded.ContractBytearray;
        aci: Aci;
    }>;
    generateAci(path: string): Promise<Aci>;
    generateAciBySourceCode(sourceCode: string, fileSystem?: Record<string, string>): Promise<Aci>;
    validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;
    validateBySourceCode(bytecode: Encoded.ContractBytearray, sourceCode: string, fileSystem?: Record<string, string>): Promise<boolean>;
    version(): Promise<string>;
}

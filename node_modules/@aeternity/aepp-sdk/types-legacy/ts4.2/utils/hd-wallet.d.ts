import nacl from 'tweetnacl';
import { CryptographyError } from './errors';
/**
 * @category exception
 */
export declare class DerivationError extends CryptographyError {
    constructor(message: string);
}
interface KeyTreeNode {
    secretKey: Uint8Array;
    chainCode: Uint8Array;
}
interface HDWallet {
    secretKey: string;
    chainCode: string;
}
interface Account {
    secretKey: string;
    publicKey: string;
}
type Dec<N extends number> = [
    -1,
    0,
    1,
    2,
    3,
    4
][N];
type Bip32PathT<MaxLen extends number, H extends 'H' | 'h' | '\''> = MaxLen extends -1 ? `${number}${H}` : Bip32PathT<Dec<MaxLen>, H> | `${Bip32PathT<Dec<MaxLen>, H>}/${number}${H}`;
type Bip32Path<MaxLen extends number> = '' | Bip32PathT<MaxLen, 'H'> | Bip32PathT<MaxLen, 'h'> | Bip32PathT<MaxLen, '\''>;
/**
 * @category hd-wallet
 */
export declare function deriveChild({ secretKey, chainCode }: KeyTreeNode, index: number): KeyTreeNode;
/**
 * @category hd-wallet
 */
export declare function derivePathFromKey(path: Bip32Path<5>, key: KeyTreeNode): KeyTreeNode;
/**
 * @category hd-wallet
 */
export declare function getMasterKeyFromSeed(seed: Uint8Array): KeyTreeNode;
/**
 * @category hd-wallet
 */
export declare function derivePathFromSeed(path: 'm' | `m/${Bip32Path<5>}`, seed: Uint8Array): KeyTreeNode;
/**
 * @category hd-wallet
 */
export declare function getKeyPair(secretKey: Uint8Array): nacl.SignKeyPair;
/**
 * @category hd-wallet
 */
export declare function generateSaveHDWalletFromSeed(seed: Uint8Array, password: string): HDWallet;
/**
 * @category hd-wallet
 */
export declare function getSaveHDWalletAccounts(saveHDWallet: HDWallet, password: string, accountCount: number): Account[];
/**
 * @category hd-wallet
 */
export declare const getHdWalletAccountFromSeed: (seed: Uint8Array, accountIdx: number) => Account & {
    idx: number;
};
export {};

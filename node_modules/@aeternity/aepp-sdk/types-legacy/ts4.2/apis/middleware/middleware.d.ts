import * as coreClient from "@azure/core-client";
import { Enum1, MiddlewareOptionalParams, GetAccountActivitiesOptionalParams, GetAccountActivitiesResponse, GetSortedAex141ContractsOptionalParams, GetSortedAex141ContractsResponse, GetAex141OwnedTokensOptionalParams, GetAex141OwnedTokensResponse, GetAex141TokenOwnerOptionalParams, GetAex141TokenOwnerResponse, GetAex141ContractOwnersOptionalParams, GetAex141ContractOwnersResponse, GetAex141ContractTemplatesOptionalParams, GetAex141ContractTemplatesResponse, GetAex141TemplateTokensOptionalParams, GetAex141TemplateTokensResponse, GetAex141ByContractOptionalParams, GetAex141ByContractResponse, GetSortedAex9TokensOptionalParams, GetSortedAex9TokensResponse, GetAex9AccountBalancesOptionalParams, GetAex9AccountBalancesResponse, GetAex9TokensCountOptionalParams, GetAex9TokensCountResponse, GetAex9PairTransfersOptionalParams, GetAex9PairTransfersResponse, GetAex9SenderTransfersOptionalParams, GetAex9SenderTransfersResponse, GetAex9RecipientTransfersOptionalParams, GetAex9RecipientTransfersResponse, GetAex9ContractBalancesOptionalParams, GetAex9ContractBalancesResponse, GetAex9ContractAccountBalanceOptionalParams, GetAex9ContractAccountBalanceResponse, GetAex9ContractAccountBalanceHistoryOptionalParams, GetAex9ContractAccountBalanceHistoryResponse, GetAex9LogsCountOptionalParams, GetAex9LogsCountResponse, GetAex9ByContractOptionalParams, GetAex9ByContractResponse, GetBlocksOptionalParams, GetBlocksResponse, GetBlockOptionalParams, GetBlockResponse, GetBlockByMbiOptionalParams, GetBlockByMbiResponse, GetChannelsOptionalParams, GetChannelsResponse, GetChannelOptionalParams, GetChannelResponse, GetContractsCallsOptionalParams, GetContractsCallsResponse, GetContractsLogsOptionalParams, GetContractsLogsResponse, GetDeltastatsOptionalParams, GetDeltastatsResponse, GetKeyBlocksOptionalParams, GetKeyBlocksResponse, GetKeyBlockOptionalParams, GetKeyBlockResponse, GetKeyBlockMicroBlocksOptionalParams, GetKeyBlockMicroBlocksResponse, GetMicroBlockOptionalParams, GetMicroBlockResponse, GetMicroBlockTransactionsOptionalParams, GetMicroBlockTransactionsResponse, GetNamesOptionalParams, GetNamesResponse, GetNamesAuctionsOptionalParams, GetNamesAuctionsResponse, SearchNamesOptionalParams, SearchNamesResponse, GetNameOptionalParams, GetNameResponse, GetNameAuctionOptionalParams, GetNameAuctionResponse, GetNameClaimsOptionalParams, GetNameClaimsResponse, GetNamePointeesOptionalParams, GetNamePointeesResponse, GetNamePointersOptionalParams, GetNamePointersResponse, GetNameTransfersOptionalParams, GetNameTransfersResponse, GetNameUpdatesOptionalParams, GetNameUpdatesResponse, GetOracleOptionalParams, GetOracleResponse, GetOraclesOptionalParams, GetOraclesResponse, GetStatusOptionalParams, GetStatusResponse, GetTotalstatsOptionalParams, GetTotalstatsResponse, GetTransfersOptionalParams, GetTransfersResponse, GetTxsOptionalParams, GetTxsResponse, GetTxCountOptionalParams, GetTxCountResponse, GetTxCountByIdOptionalParams, GetTxCountByIdResponse, GetTxOptionalParams, GetTxResponse } from "./models";
export declare class Middleware extends coreClient.ServiceClient {
    $host: string;
    limit?: number;
    scope?: string;
    direction?: Enum1;
    /**
     * Initializes a new instance of the Middleware class.
     * @param $host server parameter
     * @param options The parameter options
     */
    constructor($host: string, options?: MiddlewareOptionalParams);
    /**
     * Get an account activities.
     * @param id The account address
     * @param options The options parameters.
     */
    getAccountActivities(id: string, options?: GetAccountActivitiesOptionalParams): Promise<GetAccountActivitiesResponse>;
    /**
     * Get AEX141 contracts sorted by name or symbol.
     * @param options The options parameters.
     */
    getSortedAex141Contracts(options?: GetSortedAex141ContractsOptionalParams): Promise<GetSortedAex141ContractsResponse>;
    /**
     * Get tokens owned by an account.
     * @param accountId The account id
     * @param options The options parameters.
     */
    getAex141OwnedTokens(accountId: string, options?: GetAex141OwnedTokensOptionalParams): Promise<GetAex141OwnedTokensResponse>;
    /**
     * Get owner of a NFT (AEX-141 token).
     * @param contractId The contract id
     * @param tokenId The nft token id
     * @param options The options parameters.
     */
    getAex141TokenOwner(contractId: string, tokenId: number, options?: GetAex141TokenOwnerOptionalParams): Promise<GetAex141TokenOwnerResponse>;
    /**
     * Get owners of tokens of a AEX-141 contract.
     * @param contractId The contract id
     * @param options The options parameters.
     */
    getAex141ContractOwners(contractId: string, options?: GetAex141ContractOwnersOptionalParams): Promise<GetAex141ContractOwnersResponse>;
    /**
     * Get templates AEX-141 contract tokens.
     * @param contractId The contract id
     * @param options The options parameters.
     */
    getAex141ContractTemplates(contractId: string, options?: GetAex141ContractTemplatesOptionalParams): Promise<GetAex141ContractTemplatesResponse>;
    /**
     * Get AEX-141 template tokens.
     * @param contractId Contract id
     * @param templateId Template id
     * @param options The options parameters.
     */
    getAex141TemplateTokens(contractId: string, templateId: number, options?: GetAex141TemplateTokensOptionalParams): Promise<GetAex141TemplateTokensResponse>;
    /**
     * Get AEX141 contract meta-info, extensions, limits and stats.
     * @param id The contract id
     * @param options The options parameters.
     */
    getAex141ByContract(id: string, options?: GetAex141ByContractOptionalParams): Promise<GetAex141ByContractResponse>;
    /**
     * Get AEX9 tokens sorted by name or symbol.
     * @param options The options parameters.
     */
    getSortedAex9Tokens(options?: GetSortedAex9TokensOptionalParams): Promise<GetSortedAex9TokensResponse>;
    /**
     * Get all AEX9 balances for an account on the last block.
     * @param accountId Account id
     * @param options The options parameters.
     */
    getAex9AccountBalances(accountId: string, options?: GetAex9AccountBalancesOptionalParams): Promise<GetAex9AccountBalancesResponse>;
    /**
     * Get AEX9 tokens count.
     * @param options The options parameters.
     */
    getAex9TokensCount(options?: GetAex9TokensCountOptionalParams): Promise<GetAex9TokensCountResponse>;
    /**
     * Get AEX9 transfers filtered by sender and recipient.
     * @param sender Sender account id
     * @param recipient Recipient account id
     * @param options The options parameters.
     */
    getAex9PairTransfers(sender: string, recipient: string, options?: GetAex9PairTransfersOptionalParams): Promise<GetAex9PairTransfersResponse>;
    /**
     * Get AEX9 transfers filtered by sender.
     * @param id Sender account id
     * @param options The options parameters.
     */
    getAex9SenderTransfers(id: string, options?: GetAex9SenderTransfersOptionalParams): Promise<GetAex9SenderTransfersResponse>;
    /**
     * Get AEX9 transfers filtered by recipient.
     * @param id Recipient account id
     * @param options The options parameters.
     */
    getAex9RecipientTransfers(id: string, options?: GetAex9RecipientTransfersOptionalParams): Promise<GetAex9RecipientTransfersResponse>;
    /**
     * Get AEX9 balances on a contract.
     * @param contractId Contract id
     * @param options The options parameters.
     */
    getAex9ContractBalances(contractId: string, options?: GetAex9ContractBalancesOptionalParams): Promise<GetAex9ContractBalancesResponse>;
    /**
     * Get AEX9 balance for an account on a contract.
     * @param contractId Contract id
     * @param accountId Account id
     * @param hash Block hash
     * @param options The options parameters.
     */
    getAex9ContractAccountBalance(contractId: string, accountId: string, hash: string, options?: GetAex9ContractAccountBalanceOptionalParams): Promise<GetAex9ContractAccountBalanceResponse>;
    /**
     * Get AEX9 account balance on a contract throughout all heights when changed.
     * @param contractId Contract id
     * @param accountId Account id
     * @param options The options parameters.
     */
    getAex9ContractAccountBalanceHistory(contractId: string, accountId: string, options?: GetAex9ContractAccountBalanceHistoryOptionalParams): Promise<GetAex9ContractAccountBalanceHistoryResponse>;
    /**
     * Get AEX9 token events count.
     * @param contractId Contract id
     * @param options The options parameters.
     */
    getAex9LogsCount(contractId: string, options?: GetAex9LogsCountOptionalParams): Promise<GetAex9LogsCountResponse>;
    /**
     * Get AEX9 creation and meta_info information by contract id.
     * @param id The contract id
     * @param options The options parameters.
     */
    getAex9ByContract(id: string, options?: GetAex9ByContractOptionalParams): Promise<GetAex9ByContractResponse>;
    /**
     * Get multiple blocks.
     * @param options The options parameters.
     */
    getBlocks(options?: GetBlocksOptionalParams): Promise<GetBlocksResponse>;
    /**
     * Get a single block.
     * @param hashOrKbi The block encoded hash or key block index
     * @param options The options parameters.
     */
    getBlock(hashOrKbi: string, options?: GetBlockOptionalParams): Promise<GetBlockResponse>;
    /**
     * Get a single block.
     * @param kbi The block key block index
     * @param mbi The block micro block index, starting from 0
     * @param options The options parameters.
     */
    getBlockByMbi(kbi: number, mbi: number, options?: GetBlockByMbiOptionalParams): Promise<GetBlockByMbiResponse>;
    /**
     * Get multiple channels.
     * @param options The options parameters.
     */
    getChannels(options?: GetChannelsOptionalParams): Promise<GetChannelsResponse>;
    /**
     * Get a single channel.
     * @param id The channel
     * @param options The options parameters.
     */
    getChannel(id: string, options?: GetChannelOptionalParams): Promise<GetChannelResponse>;
    /**
     * Get contract calls.
     * @param options The options parameters.
     */
    getContractsCalls(options?: GetContractsCallsOptionalParams): Promise<GetContractsCallsResponse>;
    /**
     * Get contract logs.
     * @param options The options parameters.
     */
    getContractsLogs(options?: GetContractsLogsOptionalParams): Promise<GetContractsLogsResponse>;
    /**
     * Get delta stats.
     * @param options The options parameters.
     */
    getDeltastats(options?: GetDeltastatsOptionalParams): Promise<GetDeltastatsResponse>;
    /**
     * Get multiple key blocks.
     * @param options The options parameters.
     */
    getKeyBlocks(options?: GetKeyBlocksOptionalParams): Promise<GetKeyBlocksResponse>;
    /**
     * Get a single key block.
     * @param hashOrKbi The key block encoded hash or key block index
     * @param options The options parameters.
     */
    getKeyBlock(hashOrKbi: string, options?: GetKeyBlockOptionalParams): Promise<GetKeyBlockResponse>;
    /**
     * Get the key block micro blocks.
     * @param hashOrKbi The key block encoded hash or key block index
     * @param options The options parameters.
     */
    getKeyBlockMicroBlocks(hashOrKbi: string, options?: GetKeyBlockMicroBlocksOptionalParams): Promise<GetKeyBlockMicroBlocksResponse>;
    /**
     * Get a micro block
     * @param hash The micro block encoded hash
     * @param options The options parameters.
     */
    getMicroBlock(hash: string, options?: GetMicroBlockOptionalParams): Promise<GetMicroBlockResponse>;
    /**
     * Get a micro block transactions
     * @param hash The micro block encoded hash
     * @param options The options parameters.
     */
    getMicroBlockTransactions(hash: string, options?: GetMicroBlockTransactionsOptionalParams): Promise<GetMicroBlockTransactionsResponse>;
    /**
     * Get multiple names.
     * @param options The options parameters.
     */
    getNames(options?: GetNamesOptionalParams): Promise<GetNamesResponse>;
    /**
     * Get multiple names.
     * @param options The options parameters.
     */
    getNamesAuctions(options?: GetNamesAuctionsOptionalParams): Promise<GetNamesAuctionsResponse>;
    /**
     * Get multiple names.
     * @param options The options parameters.
     */
    searchNames(options?: SearchNamesOptionalParams): Promise<SearchNamesResponse>;
    /**
     * Get a single name.
     * @param id The name
     * @param options The options parameters.
     */
    getName(id: string, options?: GetNameOptionalParams): Promise<GetNameResponse>;
    /**
     * Get name auction
     * @param id The name
     * @param options The options parameters.
     */
    getNameAuction(id: string, options?: GetNameAuctionOptionalParams): Promise<GetNameAuctionResponse>;
    /**
     * Get name claims
     * @param id The name or name hash
     * @param options The options parameters.
     */
    getNameClaims(id: string, options?: GetNameClaimsOptionalParams): Promise<GetNameClaimsResponse>;
    /**
     * Get name pointees
     * @param id The name
     * @param options The options parameters.
     */
    getNamePointees(id: string, options?: GetNamePointeesOptionalParams): Promise<GetNamePointeesResponse>;
    /**
     * Get name pointers
     * @param id The name
     * @param options The options parameters.
     */
    getNamePointers(id: string, options?: GetNamePointersOptionalParams): Promise<GetNamePointersResponse>;
    /**
     * Get name transfers
     * @param id The name or name hash
     * @param options The options parameters.
     */
    getNameTransfers(id: string, options?: GetNameTransfersOptionalParams): Promise<GetNameTransfersResponse>;
    /**
     * Get name updates
     * @param id The name or name hash
     * @param options The options parameters.
     */
    getNameUpdates(id: string, options?: GetNameUpdatesOptionalParams): Promise<GetNameUpdatesResponse>;
    /**
     * Get a single oracle.
     * @param id The oracle
     * @param options The options parameters.
     */
    getOracle(id: string, options?: GetOracleOptionalParams): Promise<GetOracleResponse>;
    /**
     * Get multiple oracles.
     * @param options The options parameters.
     */
    getOracles(options?: GetOraclesOptionalParams): Promise<GetOraclesResponse>;
    /**
     * Gets the current syncing status of both middleware and the node
     * @param options The options parameters.
     */
    getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse>;
    /**
     * Get total accumulated stats.
     * @param options The options parameters.
     */
    getTotalstats(options?: GetTotalstatsOptionalParams): Promise<GetTotalstatsResponse>;
    /**
     * Get multiple transfers.
     * @param options The options parameters.
     */
    getTransfers(options?: GetTransfersOptionalParams): Promise<GetTransfersResponse>;
    /**
     * Get multiple transactions.
     * @param options The options parameters.
     */
    getTxs(options?: GetTxsOptionalParams): Promise<GetTxsResponse>;
    /**
     * Get count of transactions at the latest height.
     * @param options The options parameters.
     */
    getTxCount(options?: GetTxCountOptionalParams): Promise<GetTxCountResponse>;
    /**
     * Get transactions count and its type for given aeternity ID.
     * @param id The ID of the address/name/oracle/etc
     * @param options The options parameters.
     */
    getTxCountById(id: string, options?: GetTxCountByIdOptionalParams): Promise<GetTxCountByIdResponse>;
    /**
     * Get a single transaction.
     * @param hashOrIndex The transaction encoded hash or index (txi)
     * @param options The options parameters.
     */
    getTx(hashOrIndex: string, options?: GetTxOptionalParams): Promise<GetTxResponse>;
}

/// <reference types="node" />
import { Tag } from '../constants';
import { Encoded, Encoding } from '../../../utils/encoder';
import type { unpackTx } from '..';
import type { TxUnpacked } from '../schema.generated';
type MPTreeBinary = [
    Buffer,
    Array<[
        Buffer,
        Buffer[]
    ]>
];
declare class MPTree<E extends Encoding, T extends Tag> {
    #private;
    get isComplete(): boolean;
    /**
     * Deserialize Merkle Patricia Tree
     * @param binary - Binary
     * @param tag - Tag to use to decode value
     * @param unpTx - Implementation of unpackTx use to decode values
     * @returns Merkle Patricia Tree
     */
    constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx);
    isEqual(tree: MPTree<E, T>): boolean;
    /**
     * Serialize Merkle Patricia Tree
     * @returns Binary
     */
    serialize(): MPTreeBinary;
    /**
     * Retrieve value from Merkle Patricia Tree
     * @param key - The key of the element to retrieve
     * @returns Value associated to the specified key
     */
    get(key: Encoded.Generic<E>): TxUnpacked & {
        tag: T;
    } | undefined;
    toObject(): Record<Encoded.Generic<E>, TxUnpacked & {
        tag: T;
    }>;
}
export default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {
    serialize: (value: MPTree<E, T>) => MPTreeBinary;
    deserialize: (value: MPTreeBinary, o: {
        unpackTx: typeof unpackTx;
    }) => MPTree<E, T>;
};
export {};

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const id: OperationURLParameter = {
  parameterPath: "id",
  mapper: {
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ownedOnly: OperationQueryParameter = {
  parameterPath: ["options", "ownedOnly"],
  mapper: {
    serializedName: "owned_only",
    type: {
      name: "Boolean"
    }
  }
};

export const type: OperationQueryParameter = {
  parameterPath: ["options", "type"],
  mapper: {
    serializedName: "type",
    type: {
      name: "String"
    }
  }
};

export const limit: OperationQueryParameter = {
  parameterPath: "limit",
  mapper: {
    defaultValue: 10,
    constraints: {
      InclusiveMaximum: 100,
      InclusiveMinimum: 1
    },
    serializedName: "limit",
    type: {
      name: "Number"
    }
  }
};

export const scope: OperationQueryParameter = {
  parameterPath: "scope",
  mapper: {
    constraints: {
      Pattern: new RegExp("(txi|gen):\\d+(-\\d+)?")
    },
    serializedName: "scope",
    type: {
      name: "String"
    }
  }
};

export const direction: OperationQueryParameter = {
  parameterPath: "direction",
  mapper: {
    serializedName: "direction",
    type: {
      name: "String"
    }
  }
};

export const by: OperationQueryParameter = {
  parameterPath: ["options", "by"],
  mapper: {
    serializedName: "by",
    type: {
      name: "String"
    }
  }
};

export const prefix: OperationQueryParameter = {
  parameterPath: ["options", "prefix"],
  mapper: {
    serializedName: "prefix",
    type: {
      name: "String"
    }
  }
};

export const accountId: OperationURLParameter = {
  parameterPath: "accountId",
  mapper: {
    serializedName: "accountId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contractId: OperationURLParameter = {
  parameterPath: "contractId",
  mapper: {
    serializedName: "contractId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tokenId: OperationURLParameter = {
  parameterPath: "tokenId",
  mapper: {
    serializedName: "tokenId",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const templateId: OperationURLParameter = {
  parameterPath: "templateId",
  mapper: {
    serializedName: "templateId",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const accountId1: OperationURLParameter = {
  parameterPath: "accountId",
  mapper: {
    serializedName: "account_id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sender: OperationURLParameter = {
  parameterPath: "sender",
  mapper: {
    serializedName: "sender",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const recipient: OperationURLParameter = {
  parameterPath: "recipient",
  mapper: {
    serializedName: "recipient",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const hash: OperationQueryParameter = {
  parameterPath: "hash",
  mapper: {
    serializedName: "hash",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const hashOrKbi: OperationURLParameter = {
  parameterPath: "hashOrKbi",
  mapper: {
    serializedName: "hash_or_kbi",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kbi: OperationURLParameter = {
  parameterPath: "kbi",
  mapper: {
    serializedName: "kbi",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const mbi: OperationURLParameter = {
  parameterPath: "mbi",
  mapper: {
    serializedName: "mbi",
    required: true,
    type: {
      name: "Number"
    }
  }
};

export const state: OperationQueryParameter = {
  parameterPath: ["options", "state"],
  mapper: {
    serializedName: "state",
    type: {
      name: "String"
    }
  }
};

export const contractId1: OperationQueryParameter = {
  parameterPath: ["options", "contractId"],
  mapper: {
    serializedName: "contract_id",
    type: {
      name: "String"
    }
  }
};

export const event: OperationQueryParameter = {
  parameterPath: ["options", "event"],
  mapper: {
    serializedName: "event",
    type: {
      name: "String"
    }
  }
};

export const functionPrefix: OperationQueryParameter = {
  parameterPath: ["options", "functionPrefix"],
  mapper: {
    serializedName: "function_prefix",
    type: {
      name: "String"
    }
  }
};

export const data: OperationQueryParameter = {
  parameterPath: ["options", "data"],
  mapper: {
    serializedName: "data",
    type: {
      name: "String"
    }
  }
};

export const aexnArgs: OperationQueryParameter = {
  parameterPath: ["options", "aexnArgs"],
  mapper: {
    serializedName: "aexn-args",
    type: {
      name: "Boolean"
    }
  }
};

export const hash1: OperationURLParameter = {
  parameterPath: "hash",
  mapper: {
    serializedName: "hash",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ownedBy: OperationQueryParameter = {
  parameterPath: ["options", "ownedBy"],
  mapper: {
    serializedName: "owned_by",
    type: {
      name: "String"
    }
  }
};

export const state1: OperationQueryParameter = {
  parameterPath: ["options", "state"],
  mapper: {
    serializedName: "state",
    type: {
      name: "String"
    }
  }
};

export const type1: OperationQueryParameter = {
  parameterPath: ["options", "type"],
  mapper: {
    serializedName: "type",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Multi"
};

export const typeGroup: OperationQueryParameter = {
  parameterPath: ["options", "typeGroup"],
  mapper: {
    serializedName: "type_group",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Multi"
};

export const account: OperationQueryParameter = {
  parameterPath: ["options", "account"],
  mapper: {
    serializedName: "account",
    type: {
      name: "String"
    }
  }
};

export const contract: OperationQueryParameter = {
  parameterPath: ["options", "contract"],
  mapper: {
    serializedName: "contract",
    type: {
      name: "String"
    }
  }
};

export const channel: OperationQueryParameter = {
  parameterPath: ["options", "channel"],
  mapper: {
    serializedName: "channel",
    type: {
      name: "String"
    }
  }
};

export const oracle: OperationQueryParameter = {
  parameterPath: ["options", "oracle"],
  mapper: {
    serializedName: "oracle",
    type: {
      name: "String"
    }
  }
};

export const senderId: OperationQueryParameter = {
  parameterPath: ["options", "senderId"],
  mapper: {
    serializedName: "sender_id",
    type: {
      name: "String"
    }
  }
};

export const recipientId: OperationQueryParameter = {
  parameterPath: ["options", "recipientId"],
  mapper: {
    serializedName: "recipient_id",
    type: {
      name: "String"
    }
  }
};

export const entrypoint: OperationQueryParameter = {
  parameterPath: ["options", "entrypoint"],
  mapper: {
    serializedName: "entrypoint",
    type: {
      name: "String"
    }
  }
};

export const txType: OperationQueryParameter = {
  parameterPath: ["options", "txType"],
  mapper: {
    serializedName: "tx_type",
    type: {
      name: "String"
    }
  }
};

export const id1: OperationQueryParameter = {
  parameterPath: ["options", "id"],
  mapper: {
    serializedName: "id",
    type: {
      name: "String"
    }
  }
};

export const hashOrIndex: OperationURLParameter = {
  parameterPath: "hashOrIndex",
  mapper: {
    serializedName: "hash_or_index",
    required: true,
    type: {
      name: "String"
    }
  }
};

{"version":3,"file":"Node.mjs","names":["BigNumber","genRequestQueuesPolicy","genCombineGetRequestsPolicy","genErrorFormatterPolicy","genVersionCheckPolicy","genRetryOnFailurePolicy","Node","NodeApi","mapObject","UnsupportedVersionError","ConsensusProtocolVersion","bigIntPropertyNames","numberPropertyNames","_mapData","WeakSet","_encodeArg","_decodeRes","NodeTransformed","constructor","arguments","_classPrivateMethodInitSpec","sendOperationRequest","operationArguments","operationSpec","args","_ref","key","value","_classPrivateMethodGet","_encodeArg2","call","_decodeRes2","_mapData2","data","transform","Array","isArray","map","d","_ref6","some","k","bigInt","number","toFixed","toString","BigInt","_networkIdPromise","WeakMap","url","ignoreVersion","retryCount","retryOverallDelay","options","length","undefined","allowInsecureConnection","additionalPolicies","body","reason","_classPrivateFieldInitSpec","writable","statusPromise","getStatus","versionPromise","then","_ref2","nodeVersion","error","_classPrivateFieldSet","_ref3","networkId","pipeline","addPolicy","intAsString","getNetworkId","_classPrivateFieldGet2","_classPrivateFieldGet","_ref4","Error","getNodeInfo","nodeNetworkId","protocols","topBlockHeight","consensusProtocolVersion","filter","_ref5","effectiveAtHeight","reduce","acc","p","version","versions","Object","values","el","geVersion","Math","min","ltVersion","max","$host"],"sources":["../src/Node.ts"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n"],"mappings":"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"}
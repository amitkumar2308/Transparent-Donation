import { IllegalArgumentError } from "../../../utils/errors.mjs";
import { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from "../constants.mjs";
import shortUInt from "./short-u-int.mjs";
import { buildFee } from "./fee.mjs";
function calculateGasLimitMax(gasMax, rebuildTx, unpackTx, buildTx) {
  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);
}
export default {
  ...shortUInt,
  serialize(_value, _ref, _ref2) {
    let {
      tag,
      rebuildTx,
      unpackTx,
      buildTx,
      _computingGasLimit
    } = _ref;
    let {
      gasMax = 6e6
    } = _ref2;
    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);
    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(gasMax, gasLimit => rebuildTx({
      _computingGasLimit: gasLimit,
      _pickBiggerFee: true
    }), unpackTx, buildTx);
    const value = _value !== null && _value !== void 0 ? _value : gasLimitMax;
    if (value > gasLimitMax) {
      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);
    }
    return shortUInt.serialize(value);
  }
};
//# sourceMappingURL=gas-limit.mjs.map
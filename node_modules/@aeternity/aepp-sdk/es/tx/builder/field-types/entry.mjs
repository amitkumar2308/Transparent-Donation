import _buffer from "buffer";
const {
  Buffer: _Buffer
} = _buffer;
import { decode, encode, Encoding } from "../../../utils/encoder.mjs";
import { Tag } from "../constants.mjs";
import { ArgumentError } from "../../../utils/errors.mjs";
export default function genEntryField(tag) {
  return {
    serialize(txParams, _ref) {
      let {
        buildTx
      } = _ref;
      if (ArrayBuffer.isView(txParams)) return _Buffer.from(txParams);
      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {
        return decode(txParams);
      }
      return decode(buildTx({
        ...txParams,
        ...(tag != null && {
          tag
        })
      }));
    },
    deserialize(buf, _ref2) {
      let {
        unpackTx
      } = _ref2;
      const tx = unpackTx(encode(buf, Encoding.Transaction));
      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);
      return tx;
    }
  };
}
//# sourceMappingURL=entry.mjs.map
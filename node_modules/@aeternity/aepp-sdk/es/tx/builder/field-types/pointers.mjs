import { toBytes } from "../../../utils/bytes.mjs";
import { IllegalArgumentError } from "../../../utils/errors.mjs";
import address, { idTagToEncoding } from "./address.mjs";
const addressAny = address(...idTagToEncoding);

// TODO: remove after fixing node types

export default {
  /**
   * Helper function to build pointers for name update TX
   * @param pointers - Array of pointers
   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`
   * @returns Serialized pointers array
   */
  serialize(pointers) {
    if (pointers.length > 32) {
      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);
    }
    return pointers.map(pointer => [toBytes(pointer.key), addressAny.serialize(pointer.id)]);
  },
  /**
   * Helper function to read pointers from name update TX
   * @param pointers - Array of pointers
   * @returns Deserialize pointer array
   */
  deserialize(pointers) {
    return pointers.map(_ref => {
      let [key, id] = _ref;
      return {
        key: key.toString(),
        id: addressAny.deserialize(id)
      };
    });
  }
};
//# sourceMappingURL=pointers.mjs.map
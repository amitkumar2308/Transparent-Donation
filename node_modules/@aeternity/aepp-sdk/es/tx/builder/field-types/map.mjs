import { Tag } from "../constants.mjs";
import { encode, Encoding, decode } from "../../../utils/encoder.mjs";
export default function genMapField(encoding, tag) {
  return {
    serialize(object, _ref) {
      let {
        buildTx
      } = _ref;
      return decode(buildTx({
        tag: Tag.Mtree,
        values: Object.entries(object).map(_ref2 => {
          let [key, value] = _ref2;
          return {
            tag: Tag.MtreeValue,
            key: decode(key),
            value: decode(buildTx({
              ...value,
              tag
            }))
          };
        })
      }));
    },
    deserialize(buffer, _ref3) {
      let {
        unpackTx
      } = _ref3;
      const {
        values
      } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);
      return Object.fromEntries(values
      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066
      .filter(_ref4 => {
        let {
          key
        } = _ref4;
        return encoding !== Encoding.ContractAddress || key.length === 32;
      }).map(_ref5 => {
        let {
          key,
          value
        } = _ref5;
        return [encode(key, encoding), unpackTx(encode(value, Encoding.Transaction), tag)];
      }));
    },
    recursiveType: true
  };
}
//# sourceMappingURL=map.mjs.map
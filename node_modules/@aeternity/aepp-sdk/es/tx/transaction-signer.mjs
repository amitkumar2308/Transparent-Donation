import { buildTx, getSchema, unpackTx } from "./builder/index.mjs";
import { Tag } from "./builder/constants.mjs";
import { TransactionError, UnexpectedTsError } from "../utils/errors.mjs";
/**
 * Returns account address that signed a transaction
 * @param transaction - transaction to get a signer of
 */
export default function getTransactionSignerAddress(transaction) {
  var _getSchema$find;
  const params = unpackTx(transaction);
  switch (params.tag) {
    case Tag.SignedTx:
      return getTransactionSignerAddress(buildTx(params.encodedTx));
    case Tag.GaMetaTx:
      return params.gaId;
    default:
  }
  const nonce = (_getSchema$find = getSchema(params.tag, params.version).find(_ref => {
    let [name] = _ref;
    return name === 'nonce';
  })) === null || _getSchema$find === void 0 ? void 0 : _getSchema$find[1];
  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);
  if (!('senderKey' in nonce)) throw new UnexpectedTsError();
  const address = params[nonce.senderKey];
  return address.replace(/^ok_/, 'ak_');
}
//# sourceMappingURL=transaction-signer.mjs.map
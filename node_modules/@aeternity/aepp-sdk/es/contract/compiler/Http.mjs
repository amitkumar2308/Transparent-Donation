import { RestError } from '@azure/core-rest-pipeline';
import { Compiler as CompilerApi } from "../../apis/compiler/index.mjs";
import { genErrorFormatterPolicy, genVersionCheckPolicy } from "../../utils/autorest.mjs";
import CompilerBase from "./Base.mjs";
import { CompilerError, NotImplementedError } from "../../utils/errors.mjs";
/**
 * Contract Compiler over HTTP
 *
 * This class include api call's related to contract compiler functionality.
 * @category contract
 * @example CompilerHttp('COMPILER_URL')
 */
export default class CompilerHttp extends CompilerBase {
  /**
   * @param compilerUrl - Url for compiler API
   * @param options - Options
   * @param options.ignoreVersion - Don't check compiler version
   */
  constructor(compilerUrl) {
    let {
      ignoreVersion
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    this.api = new CompilerApi(compilerUrl, {
      allowInsecureConnection: true,
      additionalPolicies: [genErrorFormatterPolicy(body => {
        let message = '';
        if ('reason' in body) {
          message += ` ${body.reason}${body.parameter != null ? ` in ${body.parameter}` : ''
          // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78
          }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;
        }
        if (Array.isArray(body)) {
          message += `\n${body.map(e => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`).join('\n')}`;
        }
        return message;
      })]
    });
    if (ignoreVersion !== true) {
      const versionPromise = this.api.apiVersion().then(_ref => {
        let {
          apiVersion
        } = _ref;
        return apiVersion;
      }, error => error);
      this.api.pipeline.addPolicy(genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '8.0.0'));
    }
  }
  async compileBySourceCode(sourceCode, fileSystem) {
    try {
      const res = await this.api.compileContract({
        code: sourceCode,
        options: {
          fileSystem
        }
      });
      // TODO: should be fixed when the compiledAci interface gets updated
      return res;
    } catch (error) {
      if (error instanceof RestError && error.statusCode === 400) {
        throw new CompilerError(error.message);
      }
      throw error;
    }
  }

  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
  async compile(path) {
    throw new NotImplementedError('File system access, use CompilerHttpNode instead');
  }
  async generateAciBySourceCode(sourceCode, fileSystem) {
    try {
      return await this.api.generateACI({
        code: sourceCode,
        options: {
          fileSystem
        }
      });
    } catch (error) {
      if (error instanceof RestError && error.statusCode === 400) {
        throw new CompilerError(error.message);
      }
      throw error;
    }
  }

  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
  async generateAci(path) {
    throw new NotImplementedError('File system access, use CompilerHttpNode instead');
  }
  async validateBySourceCode(bytecode, sourceCode, fileSystem) {
    try {
      await this.api.validateByteCode({
        bytecode,
        source: sourceCode,
        options: {
          fileSystem
        }
      });
      return true;
    } catch {
      return false;
    }
  }

  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
  async validate(bytecode, path) {
    throw new NotImplementedError('File system access, use CompilerHttpNode instead');
  }
  async version() {
    return (await this.api.version()).version;
  }
}
//# sourceMappingURL=Http.mjs.map
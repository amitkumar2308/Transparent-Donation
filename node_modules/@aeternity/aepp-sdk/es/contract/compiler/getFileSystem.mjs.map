{"version":3,"file":"getFileSystem.mjs","names":["_fsPromises","readFile","_path","dirname","resolve","basename","InternalError","defaultIncludes","includeRegExp","includesRegExp","RegExp","source","_flagsInstanceProperty","getFileSystemRec","root","relative","_sourceCode$match","sourceCode","filesystem","Promise","all","match","map","include","m","length","filter","includes","includePath","Object","assign","getFileSystem","path"],"sources":["../../../src/contract/compiler/getFileSystem.ts"],"sourcesContent":["import { readFile } from 'fs/promises';\nimport { dirname, resolve, basename } from 'path';\nimport { InternalError } from '../../utils/errors';\n\nconst defaultIncludes = [\n  'List.aes', 'Option.aes', 'String.aes',\n  'Func.aes', 'Pair.aes', 'Triple.aes',\n  'BLS12_381.aes', 'Frac.aes', 'Set.aes',\n  'Bitwise.aes',\n];\nconst includeRegExp = /^include\\s*\"([\\w/.-]+)\"/mi;\nconst includesRegExp = new RegExp(includeRegExp.source, `${includeRegExp.flags}g`);\n\nasync function getFileSystemRec(\n  root: string,\n  relative: string,\n): Promise<Record<string, string>> {\n  const sourceCode = await readFile(resolve(root, relative), 'utf8');\n  const filesystem: Record<string, string> = {};\n  await Promise.all((sourceCode.match(includesRegExp) ?? [])\n    .map((include) => {\n      const m = include.match(includeRegExp);\n      if (m?.length !== 2) throw new InternalError('Unexpected match length');\n      return m[1];\n    })\n    .filter((include) => !defaultIncludes.includes(include))\n    .map(async (include) => {\n      const includePath = resolve(root, include);\n      filesystem[include] = await readFile(includePath, 'utf8');\n      Object.assign(filesystem, await getFileSystemRec(root, include));\n    }));\n  return filesystem;\n}\n\n/**\n * Reads all files included in the provided contract\n * Available only in Node.js\n * @param path - a path to the main contract source code\n */\nexport default async function getFileSystem(path: string): Promise<Record<string, string>> {\n  return getFileSystemRec(dirname(path), basename(path));\n}\n"],"mappings":";AAAA,OAAAA,WAAA,MAAyB,aAAa;AAAC;EAAAC;AAAA,IAAAD,WAAA;AACvC,OAAAE,KAAA,MAA2C,MAAM;AAAC;EAAAC,OAAA;EAAAC,OAAA;EAAAC;AAAA,IAAAH,KAAA;AAAA,SACzCI,aAAa;AAEtB,MAAMC,eAAe,GAAG,CACtB,UAAU,EAAE,YAAY,EAAE,YAAY,EACtC,UAAU,EAAE,UAAU,EAAE,YAAY,EACpC,eAAe,EAAE,UAAU,EAAE,SAAS,EACtC,aAAa,CACd;AACD,MAAMC,aAAa,GAAG,2BAA2B;AACjD,MAAMC,cAAc,GAAG,IAAIC,MAAM,CAACF,aAAa,CAACG,MAAM,EAAG,GAAAC,sBAAA,CAAEJ,aAAa,CAAO,GAAE,CAAC;AAElF,eAAeK,gBAAgBA,CAC7BC,IAAY,EACZC,QAAgB,EACiB;EAAA,IAAAC,iBAAA;EACjC,MAAMC,UAAU,GAAG,MAAMhB,QAAQ,CAACG,OAAO,CAACU,IAAI,EAAEC,QAAQ,CAAC,EAAE,MAAM,CAAC;EAClE,MAAMG,UAAkC,GAAG,CAAC,CAAC;EAC7C,MAAMC,OAAO,CAACC,GAAG,CAAC,EAAAJ,iBAAA,GAACC,UAAU,CAACI,KAAK,CAACZ,cAAc,CAAC,cAAAO,iBAAA,cAAAA,iBAAA,GAAI,EAAE,EACtDM,GAAG,CAAEC,OAAO,IAAK;IAChB,MAAMC,CAAC,GAAGD,OAAO,CAACF,KAAK,CAACb,aAAa,CAAC;IACtC,IAAI,CAAAgB,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,MAAM,MAAK,CAAC,EAAE,MAAM,IAAInB,aAAa,CAAC,yBAAyB,CAAC;IACvE,OAAOkB,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CACDE,MAAM,CAAEH,OAAO,IAAK,CAAChB,eAAe,CAACoB,QAAQ,CAACJ,OAAO,CAAC,CAAC,CACvDD,GAAG,CAAC,MAAOC,OAAO,IAAK;IACtB,MAAMK,WAAW,GAAGxB,OAAO,CAACU,IAAI,EAAES,OAAO,CAAC;IAC1CL,UAAU,CAACK,OAAO,CAAC,GAAG,MAAMtB,QAAQ,CAAC2B,WAAW,EAAE,MAAM,CAAC;IACzDC,MAAM,CAACC,MAAM,CAACZ,UAAU,EAAE,MAAML,gBAAgB,CAACC,IAAI,EAAES,OAAO,CAAC,CAAC;EAClE,CAAC,CAAC,CAAC;EACL,OAAOL,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAea,aAAaA,CAACC,IAAY,EAAmC;EACzF,OAAOnB,gBAAgB,CAACV,OAAO,CAAC6B,IAAI,CAAC,EAAE3B,QAAQ,CAAC2B,IAAI,CAAC,CAAC;AACxD"}
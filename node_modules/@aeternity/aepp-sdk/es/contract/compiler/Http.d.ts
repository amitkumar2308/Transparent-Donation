import { Compiler as CompilerApi } from '../../apis/compiler';
import CompilerBase, { Aci } from './Base';
import { Encoded } from '../../utils/encoder';
/**
 * Contract Compiler over HTTP
 *
 * This class include api call's related to contract compiler functionality.
 * @category contract
 * @example CompilerHttp('COMPILER_URL')
 */
export default class CompilerHttp extends CompilerBase {
    readonly api: CompilerApi;
    /**
     * @param compilerUrl - Url for compiler API
     * @param options - Options
     * @param options.ignoreVersion - Don't check compiler version
     */
    constructor(compilerUrl: string, { ignoreVersion }?: {
        ignoreVersion?: boolean;
    });
    compileBySourceCode(sourceCode: string, fileSystem?: Record<string, string>): Promise<{
        bytecode: Encoded.ContractBytearray;
        aci: Aci;
    }>;
    compile(path: string): Promise<{
        bytecode: Encoded.ContractBytearray;
        aci: Aci;
    }>;
    generateAciBySourceCode(sourceCode: string, fileSystem?: Record<string, string>): Promise<Aci>;
    generateAci(path: string): Promise<Aci>;
    validateBySourceCode(bytecode: Encoded.ContractBytearray, sourceCode: string, fileSystem?: Record<string, string>): Promise<boolean>;
    validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;
    version(): Promise<string>;
}

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters.mjs";
import * as Mappers from "./models/mappers.mjs";
export class Middleware extends coreClient.ServiceClient {
  /**
   * Initializes a new instance of the Middleware class.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor($host, options) {
    var _ref, _options$endpoint;
    if ($host === undefined) {
      throw new Error("'$host' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults = {
      requestContentType: "application/json; charset=utf-8"
    };
    const packageDetails = `azsdk-js-middleware/1.0.0-beta.1`;
    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint: (_ref = (_options$endpoint = options.endpoint) !== null && _options$endpoint !== void 0 ? _options$endpoint : options.baseUri) !== null && _ref !== void 0 ? _ref : "{$host}"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.$host = $host;
  }

  /**
   * Get an account activities.
   * @param id The account address
   * @param options The options parameters.
   */
  getAccountActivities(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAccountActivitiesOperationSpec);
  }

  /**
   * Get AEX141 contracts sorted by name or symbol.
   * @param options The options parameters.
   */
  getSortedAex141Contracts(options) {
    return this.sendOperationRequest({
      options
    }, getSortedAex141ContractsOperationSpec);
  }

  /**
   * Get tokens owned by an account.
   * @param accountId The account id
   * @param options The options parameters.
   */
  getAex141OwnedTokens(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAex141OwnedTokensOperationSpec);
  }

  /**
   * Get owner of a NFT (AEX-141 token).
   * @param contractId The contract id
   * @param tokenId The nft token id
   * @param options The options parameters.
   */
  getAex141TokenOwner(contractId, tokenId, options) {
    return this.sendOperationRequest({
      contractId,
      tokenId,
      options
    }, getAex141TokenOwnerOperationSpec);
  }

  /**
   * Get owners of tokens of a AEX-141 contract.
   * @param contractId The contract id
   * @param options The options parameters.
   */
  getAex141ContractOwners(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex141ContractOwnersOperationSpec);
  }

  /**
   * Get templates AEX-141 contract tokens.
   * @param contractId The contract id
   * @param options The options parameters.
   */
  getAex141ContractTemplates(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex141ContractTemplatesOperationSpec);
  }

  /**
   * Get AEX-141 template tokens.
   * @param contractId Contract id
   * @param templateId Template id
   * @param options The options parameters.
   */
  getAex141TemplateTokens(contractId, templateId, options) {
    return this.sendOperationRequest({
      contractId,
      templateId,
      options
    }, getAex141TemplateTokensOperationSpec);
  }

  /**
   * Get AEX141 contract meta-info, extensions, limits and stats.
   * @param id The contract id
   * @param options The options parameters.
   */
  getAex141ByContract(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAex141ByContractOperationSpec);
  }

  /**
   * Get AEX9 tokens sorted by name or symbol.
   * @param options The options parameters.
   */
  getSortedAex9Tokens(options) {
    return this.sendOperationRequest({
      options
    }, getSortedAex9TokensOperationSpec);
  }

  /**
   * Get all AEX9 balances for an account on the last block.
   * @param accountId Account id
   * @param options The options parameters.
   */
  getAex9AccountBalances(accountId, options) {
    return this.sendOperationRequest({
      accountId,
      options
    }, getAex9AccountBalancesOperationSpec);
  }

  /**
   * Get AEX9 tokens count.
   * @param options The options parameters.
   */
  getAex9TokensCount(options) {
    return this.sendOperationRequest({
      options
    }, getAex9TokensCountOperationSpec);
  }

  /**
   * Get AEX9 transfers filtered by sender and recipient.
   * @param sender Sender account id
   * @param recipient Recipient account id
   * @param options The options parameters.
   */
  getAex9PairTransfers(sender, recipient, options) {
    return this.sendOperationRequest({
      sender,
      recipient,
      options
    }, getAex9PairTransfersOperationSpec);
  }

  /**
   * Get AEX9 transfers filtered by sender.
   * @param id Sender account id
   * @param options The options parameters.
   */
  getAex9SenderTransfers(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAex9SenderTransfersOperationSpec);
  }

  /**
   * Get AEX9 transfers filtered by recipient.
   * @param id Recipient account id
   * @param options The options parameters.
   */
  getAex9RecipientTransfers(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAex9RecipientTransfersOperationSpec);
  }

  /**
   * Get AEX9 balances on a contract.
   * @param contractId Contract id
   * @param options The options parameters.
   */
  getAex9ContractBalances(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex9ContractBalancesOperationSpec);
  }

  /**
   * Get AEX9 balance for an account on a contract.
   * @param contractId Contract id
   * @param accountId Account id
   * @param hash Block hash
   * @param options The options parameters.
   */
  getAex9ContractAccountBalance(contractId, accountId, hash, options) {
    return this.sendOperationRequest({
      contractId,
      accountId,
      hash,
      options
    }, getAex9ContractAccountBalanceOperationSpec);
  }

  /**
   * Get AEX9 account balance on a contract throughout all heights when changed.
   * @param contractId Contract id
   * @param accountId Account id
   * @param options The options parameters.
   */
  getAex9ContractAccountBalanceHistory(contractId, accountId, options) {
    return this.sendOperationRequest({
      contractId,
      accountId,
      options
    }, getAex9ContractAccountBalanceHistoryOperationSpec);
  }

  /**
   * Get AEX9 token events count.
   * @param contractId Contract id
   * @param options The options parameters.
   */
  getAex9LogsCount(contractId, options) {
    return this.sendOperationRequest({
      contractId,
      options
    }, getAex9LogsCountOperationSpec);
  }

  /**
   * Get AEX9 creation and meta_info information by contract id.
   * @param id The contract id
   * @param options The options parameters.
   */
  getAex9ByContract(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getAex9ByContractOperationSpec);
  }

  /**
   * Get multiple blocks.
   * @param options The options parameters.
   */
  getBlocks(options) {
    return this.sendOperationRequest({
      options
    }, getBlocksOperationSpec);
  }

  /**
   * Get a single block.
   * @param hashOrKbi The block encoded hash or key block index
   * @param options The options parameters.
   */
  getBlock(hashOrKbi, options) {
    return this.sendOperationRequest({
      hashOrKbi,
      options
    }, getBlockOperationSpec);
  }

  /**
   * Get a single block.
   * @param kbi The block key block index
   * @param mbi The block micro block index, starting from 0
   * @param options The options parameters.
   */
  getBlockByMbi(kbi, mbi, options) {
    return this.sendOperationRequest({
      kbi,
      mbi,
      options
    }, getBlockByMbiOperationSpec);
  }

  /**
   * Get multiple channels.
   * @param options The options parameters.
   */
  getChannels(options) {
    return this.sendOperationRequest({
      options
    }, getChannelsOperationSpec);
  }

  /**
   * Get a single channel.
   * @param id The channel
   * @param options The options parameters.
   */
  getChannel(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getChannelOperationSpec);
  }

  /**
   * Get contract calls.
   * @param options The options parameters.
   */
  getContractsCalls(options) {
    return this.sendOperationRequest({
      options
    }, getContractsCallsOperationSpec);
  }

  /**
   * Get contract logs.
   * @param options The options parameters.
   */
  getContractsLogs(options) {
    return this.sendOperationRequest({
      options
    }, getContractsLogsOperationSpec);
  }

  /**
   * Get delta stats.
   * @param options The options parameters.
   */
  getDeltastats(options) {
    return this.sendOperationRequest({
      options
    }, getDeltastatsOperationSpec);
  }

  /**
   * Get multiple key blocks.
   * @param options The options parameters.
   */
  getKeyBlocks(options) {
    return this.sendOperationRequest({
      options
    }, getKeyBlocksOperationSpec);
  }

  /**
   * Get a single key block.
   * @param hashOrKbi The key block encoded hash or key block index
   * @param options The options parameters.
   */
  getKeyBlock(hashOrKbi, options) {
    return this.sendOperationRequest({
      hashOrKbi,
      options
    }, getKeyBlockOperationSpec);
  }

  /**
   * Get the key block micro blocks.
   * @param hashOrKbi The key block encoded hash or key block index
   * @param options The options parameters.
   */
  getKeyBlockMicroBlocks(hashOrKbi, options) {
    return this.sendOperationRequest({
      hashOrKbi,
      options
    }, getKeyBlockMicroBlocksOperationSpec);
  }

  /**
   * Get a micro block
   * @param hash The micro block encoded hash
   * @param options The options parameters.
   */
  getMicroBlock(hash, options) {
    return this.sendOperationRequest({
      hash,
      options
    }, getMicroBlockOperationSpec);
  }

  /**
   * Get a micro block transactions
   * @param hash The micro block encoded hash
   * @param options The options parameters.
   */
  getMicroBlockTransactions(hash, options) {
    return this.sendOperationRequest({
      hash,
      options
    }, getMicroBlockTransactionsOperationSpec);
  }

  /**
   * Get multiple names.
   * @param options The options parameters.
   */
  getNames(options) {
    return this.sendOperationRequest({
      options
    }, getNamesOperationSpec);
  }

  /**
   * Get multiple names.
   * @param options The options parameters.
   */
  getNamesAuctions(options) {
    return this.sendOperationRequest({
      options
    }, getNamesAuctionsOperationSpec);
  }

  /**
   * Get multiple names.
   * @param options The options parameters.
   */
  searchNames(options) {
    return this.sendOperationRequest({
      options
    }, searchNamesOperationSpec);
  }

  /**
   * Get a single name.
   * @param id The name
   * @param options The options parameters.
   */
  getName(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameOperationSpec);
  }

  /**
   * Get name auction
   * @param id The name
   * @param options The options parameters.
   */
  getNameAuction(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameAuctionOperationSpec);
  }

  /**
   * Get name claims
   * @param id The name or name hash
   * @param options The options parameters.
   */
  getNameClaims(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameClaimsOperationSpec);
  }

  /**
   * Get name pointees
   * @param id The name
   * @param options The options parameters.
   */
  getNamePointees(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNamePointeesOperationSpec);
  }

  /**
   * Get name pointers
   * @param id The name
   * @param options The options parameters.
   */
  getNamePointers(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNamePointersOperationSpec);
  }

  /**
   * Get name transfers
   * @param id The name or name hash
   * @param options The options parameters.
   */
  getNameTransfers(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameTransfersOperationSpec);
  }

  /**
   * Get name updates
   * @param id The name or name hash
   * @param options The options parameters.
   */
  getNameUpdates(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getNameUpdatesOperationSpec);
  }

  /**
   * Get a single oracle.
   * @param id The oracle
   * @param options The options parameters.
   */
  getOracle(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getOracleOperationSpec);
  }

  /**
   * Get multiple oracles.
   * @param options The options parameters.
   */
  getOracles(options) {
    return this.sendOperationRequest({
      options
    }, getOraclesOperationSpec);
  }

  /**
   * Gets the current syncing status of both middleware and the node
   * @param options The options parameters.
   */
  getStatus(options) {
    return this.sendOperationRequest({
      options
    }, getStatusOperationSpec);
  }

  /**
   * Get total accumulated stats.
   * @param options The options parameters.
   */
  getTotalstats(options) {
    return this.sendOperationRequest({
      options
    }, getTotalstatsOperationSpec);
  }

  /**
   * Get multiple transfers.
   * @param options The options parameters.
   */
  getTransfers(options) {
    return this.sendOperationRequest({
      options
    }, getTransfersOperationSpec);
  }

  /**
   * Get multiple transactions.
   * @param options The options parameters.
   */
  getTxs(options) {
    return this.sendOperationRequest({
      options
    }, getTxsOperationSpec);
  }

  /**
   * Get count of transactions at the latest height.
   * @param options The options parameters.
   */
  getTxCount(options) {
    return this.sendOperationRequest({
      options
    }, getTxCountOperationSpec);
  }

  /**
   * Get transactions count and its type for given aeternity ID.
   * @param id The ID of the address/name/oracle/etc
   * @param options The options parameters.
   */
  getTxCountById(id, options) {
    return this.sendOperationRequest({
      id,
      options
    }, getTxCountByIdOperationSpec);
  }

  /**
   * Get a single transaction.
   * @param hashOrIndex The transaction encoded hash or index (txi)
   * @param options The options parameters.
   */
  getTx(hashOrIndex, options) {
    return this.sendOperationRequest({
      hashOrIndex,
      options
    }, getTxOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */false);
const getAccountActivitiesOperationSpec = {
  path: "/v2/accounts/{id}/activities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsKlr2M2V2AccountsIdActivitiesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.ownedOnly, Parameters.type, Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getSortedAex141ContractsOperationSpec = {
  path: "/v2/aex141",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsFlc7UjV2Aex141GetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction, Parameters.by, Parameters.prefix],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141OwnedTokensOperationSpec = {
  path: "/v2/aex141/owned-nfts/{accountId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsSs61ZgV2Aex141OwnedNftsAccountidGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141TokenOwnerOperationSpec = {
  path: "/v2/aex141/{contractId}/owner/{tokenId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "String"
        }
      }
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.contractId, Parameters.tokenId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ContractOwnersOperationSpec = {
  path: "/v2/aex141/{contractId}/owners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Ilysy5V2Aex141ContractidOwnersGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ContractTemplatesOperationSpec = {
  path: "/v2/aex141/{contractId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths17O9Fn6V2Aex141ContractidTemplatesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141TemplateTokensOperationSpec = {
  path: "/v2/aex141/{contractId}/templates/{templateId}/tokens",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsNuoourV2Aex141ContractidTemplatesTemplateidTokensGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.contractId, Parameters.templateId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex141ByContractOperationSpec = {
  path: "/v2/aex141/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Aex141Response
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getSortedAex9TokensOperationSpec = {
  path: "/v2/aex9",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Wbogg8V2Aex9GetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction, Parameters.by, Parameters.prefix],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9AccountBalancesOperationSpec = {
  path: "/v2/aex9/account-balances/{account_id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1BsirxgV2Aex9AccountBalancesAccountIdGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.accountId1],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9TokensCountOperationSpec = {
  path: "/v2/aex9/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Number"
        }
      }
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9PairTransfersOperationSpec = {
  path: "/v2/aex9/transfers/from-to/{sender}/{recipient}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1V0FiznV2Aex9TransfersFromToSenderRecipientGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.sender, Parameters.recipient],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9SenderTransfersOperationSpec = {
  path: "/v2/aex9/transfers/from/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1X48QgjV2Aex9TransfersFromIdGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9RecipientTransfersOperationSpec = {
  path: "/v2/aex9/transfers/to/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1DkkopqV2Aex9TransfersToIdGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ContractBalancesOperationSpec = {
  path: "/v2/aex9/{contractId}/balances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsNi359V2Aex9ContractidBalancesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction, Parameters.by],
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ContractAccountBalanceOperationSpec = {
  path: "/v2/aex9/{contractId}/balances/{accountId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1R02SlwV2Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.hash],
  urlParameters: [Parameters.$host, Parameters.accountId, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ContractAccountBalanceHistoryOperationSpec = {
  path: "/v2/aex9/{contractId}/balances/{accountId}/history",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1T9RwnyV2Aex9ContractidBalancesAccountidHistoryGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.accountId, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9LogsCountOperationSpec = {
  path: "/v2/aex9/{contractId}/logs-count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Number"
        }
      }
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.contractId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAex9ByContractOperationSpec = {
  path: "/v2/aex9/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Aex9Response
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getBlocksOperationSpec = {
  path: "/v2/blocks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths15Ih6XV2BlocksGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBlockOperationSpec = {
  path: "/v2/blocks/{hash_or_kbi}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Block
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hashOrKbi],
  headerParameters: [Parameters.accept],
  serializer
};
const getBlockByMbiOperationSpec = {
  path: "/v2/blocks/{kbi}/{mbi}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Block
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.kbi, Parameters.mbi],
  headerParameters: [Parameters.accept],
  serializer
};
const getChannelsOperationSpec = {
  path: "/v2/channels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Txl2A9V2ChannelsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction, Parameters.state],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getChannelOperationSpec = {
  path: "/v2/channels/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Channel
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getContractsCallsOperationSpec = {
  path: "/v2/contracts/calls",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths187U0XzV2ContractsCallsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getContractsLogsOperationSpec = {
  path: "/v2/contracts/logs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsB246H1V2ContractsLogsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction, Parameters.contractId1, Parameters.event, Parameters.functionPrefix, Parameters.data, Parameters.aexnArgs],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeltastatsOperationSpec = {
  path: "/v2/deltastats",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths7Pbec0V2DeltastatsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getKeyBlocksOperationSpec = {
  path: "/v2/key-blocks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths1Ulxr59V2KeyBlocksGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getKeyBlockOperationSpec = {
  path: "/v2/key-blocks/{hash_or_kbi}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyBlock
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hashOrKbi],
  headerParameters: [Parameters.accept],
  serializer
};
const getKeyBlockMicroBlocksOperationSpec = {
  path: "/v2/key-blocks/{hash_or_kbi}/micro-blocks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsO99PhzV2KeyBlocksHashOrKbiMicroBlocksGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.hashOrKbi],
  headerParameters: [Parameters.accept],
  serializer
};
const getMicroBlockOperationSpec = {
  path: "/v2/micro-blocks/{hash}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MicroBlock
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hash1],
  headerParameters: [Parameters.accept],
  serializer
};
const getMicroBlockTransactionsOperationSpec = {
  path: "/v2/micro-blocks/{hash}/txs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsGuqvhdV2MicroBlocksHashTxsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hash1],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamesOperationSpec = {
  path: "/v2/names",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsK9TkttV2NamesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.direction, Parameters.by, Parameters.ownedBy, Parameters.state1],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamesAuctionsOperationSpec = {
  path: "/v2/names/auctions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Auction
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const searchNamesOperationSpec = {
  path: "/v2/names/search",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths3Msq0DV2NamesSearchGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameOperationSpec = {
  path: "/v2/names/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Name
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameAuctionOperationSpec = {
  path: "/v2/names/{id}/auction",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Auction
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameClaimsOperationSpec = {
  path: "/v2/names/{id}/claims",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NameClaim
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamePointeesOperationSpec = {
  path: "/v2/names/{id}/pointees",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsDjelzuV2NamesIdPointeesGetResponses200ContentApplicationJsonSchema
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getNamePointersOperationSpec = {
  path: "/v2/names/{id}/pointers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      }
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameTransfersOperationSpec = {
  path: "/v2/names/{id}/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NameTransfer
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getNameUpdatesOperationSpec = {
  path: "/v2/names/{id}/updates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NameUpdate
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getOracleOperationSpec = {
  path: "/v2/oracle/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Oracle
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getOraclesOperationSpec = {
  path: "/v2/oracles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsB0YvynV2OraclesGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusOperationSpec = {
  path: "/v2/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Status
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTotalstatsOperationSpec = {
  path: "/v2/totalstats",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths15PsutbV2TotalstatsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTransfersOperationSpec = {
  path: "/v2/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsIgs9Z1V2TransfersGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTxsOperationSpec = {
  path: "/v2/txs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PathsFclv4TV2TxsGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.limit, Parameters.scope, Parameters.direction, Parameters.type1, Parameters.typeGroup, Parameters.account, Parameters.contract, Parameters.channel, Parameters.oracle, Parameters.senderId, Parameters.recipientId, Parameters.entrypoint],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTxCountOperationSpec = {
  path: "/v2/txs/count",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Number"
        }
      }
    }
  },
  queryParameters: [Parameters.scope, Parameters.txType, Parameters.id1],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getTxCountByIdOperationSpec = {
  path: "/v2/txs/count/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Paths16Tt677V2TxsCountIdGetResponses200ContentApplicationJsonSchema
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getTxOperationSpec = {
  path: "/v2/txs/{hash_or_index}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Tx
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse,
      isError: true
    }
  },
  urlParameters: [Parameters.$host, Parameters.hashOrIndex],
  headerParameters: [Parameters.accept],
  serializer
};
//# sourceMappingURL=middleware.mjs.map
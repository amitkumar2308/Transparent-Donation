{"version":3,"file":"keystore.mjs","names":["nacl","v4","uuid","_aeternityArgon","hash","argon2id","getAddressFromPriv","InvalidPasswordError","DERIVED_KEY_FUNCTIONS","pass","salt","params","memlimit_kib","memoryCost","opslimit","timeCost","hashLength","type","CRYPTO_FUNCTIONS","encrypt","secretbox","decrypt","res","open","arguments","CRYPTO_DEFAULTS","secret_type","symmetric_alg","kdf","kdf_params","parallelism","plaintext","key","nonce","algo","length","undefined","ciphertext","deriveKey","password","kdfParams","recover","_ref","crypto","_Buffer","from","cipher_params","toString","dump","name","privateKey","randomBytes","options","opt","derivedKey","payload","version","public_key","id"],"sources":["../../src/utils/keystore.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport { v4 as uuid } from '@aeternity/uuid';\nimport { hash, argon2id } from '@aeternity/argon2';\nimport { getAddressFromPriv } from './crypto';\nimport { InvalidPasswordError } from './errors';\n\nconst DERIVED_KEY_FUNCTIONS = {\n  async argon2id(\n    pass: string | Uint8Array,\n    salt: string | Uint8Array,\n    params: Partial<Keystore['crypto']['kdf_params']>,\n  ): Promise<Uint8Array> {\n    const { memlimit_kib: memoryCost, opslimit: timeCost } = params;\n\n    return hash(pass, {\n      hashLength: 32,\n      salt,\n      timeCost,\n      memoryCost,\n      type: argon2id,\n    });\n  },\n};\n\nconst CRYPTO_FUNCTIONS = {\n  'xsalsa20-poly1305': {\n    encrypt: nacl.secretbox,\n    decrypt(...args: Parameters<typeof nacl.secretbox.open>): Uint8Array {\n      const res = nacl.secretbox.open(...args);\n      if (res == null) throw new InvalidPasswordError();\n      return res;\n    },\n  },\n};\n\nexport interface Keystore {\n  name: string;\n  version: 1;\n  public_key: string;\n  id: string;\n  crypto: {\n    secret_type: 'ed25519';\n    symmetric_alg: keyof typeof CRYPTO_FUNCTIONS;\n    ciphertext: string;\n    cipher_params: {\n      nonce: string;\n    };\n    kdf: keyof typeof DERIVED_KEY_FUNCTIONS;\n    kdf_params: {\n      memlimit_kib: number;\n      opslimit: number;\n      parallelism: number;\n      salt: string;\n    };\n  };\n}\n\nconst CRYPTO_DEFAULTS = {\n  secret_type: 'ed25519',\n  symmetric_alg: 'xsalsa20-poly1305',\n  kdf: 'argon2id',\n  kdf_params: {\n    memlimit_kib: 65536,\n    opslimit: 3,\n    parallelism: 1,\n  },\n} as const;\n\n/**\n * Symmetric private key encryption using secret (derived) key.\n * @category keystore\n * @param plaintext - Data to be encrypted.\n * @param key - Secret key.\n * @param nonce - Randomly generated nonce.\n * @param algo - Encryption algorithm.\n * @returns Encrypted data.\n */\nfunction encrypt(\n  plaintext: Uint8Array,\n  key: Uint8Array,\n  nonce: Uint8Array,\n  algo: keyof typeof CRYPTO_FUNCTIONS = CRYPTO_DEFAULTS.symmetric_alg,\n): Uint8Array {\n  return CRYPTO_FUNCTIONS[algo].encrypt(plaintext, nonce, key);\n}\n\n/**\n * Symmetric private key decryption using secret (derived) key.\n * @category keystore\n * @param ciphertext - Data to be decrypted.\n * @param key - Secret key.\n * @param nonce - Nonce from key-object.\n * @param algo - Encryption algorithm.\n * @returns Decrypted data.\n */\nfunction decrypt(\n  ciphertext: Uint8Array,\n  key: Uint8Array,\n  nonce: Uint8Array,\n  algo: keyof typeof CRYPTO_FUNCTIONS = CRYPTO_DEFAULTS.symmetric_alg,\n): Uint8Array {\n  return CRYPTO_FUNCTIONS[algo].decrypt(ciphertext, nonce, key);\n}\n\n/**\n * Derive secret key from password with key derivation function.\n * @category keystore\n * @param password - User-supplied password.\n * @param nonce - Randomly generated nonce.\n * @param kdf - Key derivation function.\n * @param kdfParams - KDF parameters.\n * @returns Secret key derived from password.\n */\nasync function deriveKey(\n  password: string | Uint8Array,\n  nonce: string | Uint8Array,\n  kdf: Keystore['crypto']['kdf'],\n  kdfParams: Omit<Keystore['crypto']['kdf_params'], 'salt'>,\n): Promise<Uint8Array> {\n  return DERIVED_KEY_FUNCTIONS[kdf](password, nonce, kdfParams);\n}\n\n/**\n * Recover plaintext private key from secret-storage key object.\n * @category keystore\n * @param password - Keystore object password.\n * @param keystore - Keystore object.\n * @returns Plaintext private key.\n */\nexport async function recover(\n  password: string | Uint8Array,\n  { crypto }: Keystore,\n): Promise<string> {\n  const salt = Buffer.from(crypto.kdf_params.salt, 'hex');\n  return Buffer.from(decrypt(\n    Buffer.from(crypto.ciphertext, 'hex'),\n    await deriveKey(password, salt, crypto.kdf, crypto.kdf_params),\n    Buffer.from(crypto.cipher_params.nonce, 'hex'),\n    crypto.symmetric_alg,\n  )).toString('hex');\n}\n\n/**\n * Export private key to keystore secret-storage format.\n * @category keystore\n * @param name - Key name.\n * @param password - User-supplied password.\n * @param privateKey - Private key as hex-string or a Buffer.\n * @param nonce - Randomly generated 24byte nonce.\n * @param salt - Randomly generated 16byte salt.\n * @param options - Encryption parameters.\n * @param options.kdf - Key derivation function.\n * @param options.kdf_params - KDF parameters.\n */\nexport async function dump(\n  name: string,\n  password: string | Uint8Array,\n  privateKey: string | Uint8Array,\n  nonce: Uint8Array = nacl.randomBytes(24),\n  salt: Uint8Array = nacl.randomBytes(16),\n  options?: Partial<Keystore['crypto']>,\n): Promise<Keystore> {\n  const opt = { ...CRYPTO_DEFAULTS, ...options };\n  const derivedKey = await deriveKey(password, salt, opt.kdf, opt.kdf_params);\n  const payload = typeof privateKey === 'string' ? Buffer.from(privateKey, 'hex') : privateKey;\n  return {\n    name,\n    version: 1,\n    public_key: getAddressFromPriv(payload),\n    id: uuid(),\n    crypto: {\n      secret_type: opt.secret_type,\n      symmetric_alg: opt.symmetric_alg,\n      ciphertext: Buffer.from(\n        encrypt(payload, derivedKey, nonce, opt.symmetric_alg),\n      ).toString('hex'),\n      cipher_params: { nonce: Buffer.from(nonce).toString('hex') },\n      kdf: opt.kdf,\n      kdf_params: {\n        ...opt.kdf_params,\n        salt: Buffer.from(salt).toString('hex'),\n      },\n    },\n  };\n}\n"],"mappings":"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"}
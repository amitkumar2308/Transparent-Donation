{"version":3,"file":"aens.mjs","names":["genSalt","commitmentHash","isAuctionName","CLIENT_TTL","NAME_TTL","Tag","ArgumentError","sendTransaction","getName","buildTxAsync","aensRevoke","name","options","nameRevokeTx","tag","NameRevokeTx","nameId","accountId","onAccount","address","aensUpdate","pointers","_ref","extendPointers","allPointers","Object","fromEntries","map","_ref2","key","id","nameUpdateTx","clientTtl","nameTtl","NameUpdateTx","entries","_ref3","aensTransfer","account","nameTransferTx","NameTransferTx","recipientId","aensQuery","opt","nameEntry","freeze","owner","update","transfer","revoke","extendTtl","arguments","length","undefined","aensClaim","salt","claimTx","NameClaimTx","nameSalt","result","nameInter","blockHeight","assign","aensPreclaim","commitmentId","preclaimTx","NamePreclaimTx","claim","opts","version","otherOptions","aensBid","nameFee"],"sources":["../src/aens.ts"],"sourcesContent":["/**\n * Aens methods - routines to interact with the Ã¦ternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport {\n  CLIENT_TTL, NAME_TTL, Tag, AensName,\n} from './tx/builder/constants';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl=84600 a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await buildTxAsync({\n    clientTtl: CLIENT_TTL,\n    nameTtl: NAME_TTL,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl = NAME_TTL, options = {}) {\n      if (nameTtl > NAME_TTL || nameTtl <= 0) {\n        throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n      }\n\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n"],"mappings":"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"}
import _buffer from "buffer";
const {
  Buffer: _Buffer
} = _buffer;
import AccountBase from "./Base.mjs";
import { METHODS } from "../aepp-wallet-communication/schema.mjs";
import { ArgumentError, NotImplementedError, UnsupportedProtocolError } from "../utils/errors.mjs";
/**
 * Account provided by wallet
 * @param params - Params
 * @param params.rpcClient - RpcClient instance
 * @param params.address - RPC account address
 * @returns AccountRpc instance
 */
export default class AccountRpc extends AccountBase {
  constructor(rpcClient, address) {
    super();
    this._rpcClient = rpcClient;
    this.address = address;
  }

  // eslint-disable-next-line class-methods-use-this
  async sign() {
    throw new NotImplementedError('RAW signing using wallet');
  }
  async signTransaction(tx) {
    let {
      innerTx,
      networkId
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);
    const res = await this._rpcClient.request(METHODS.sign, {
      onAccount: this.address,
      tx,
      returnSigned: true,
      networkId,
      innerTx
    });
    if (res.signedTransaction == null) {
      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');
    }
    return res.signedTransaction;
  }
  async signMessage(message) {
    const {
      signature
    } = await this._rpcClient.request(METHODS.signMessage, {
      onAccount: this.address,
      message
    });
    return _Buffer.from(signature, 'hex');
  }
  async signTypedData(data, aci) {
    let {
      name,
      version,
      contractAddress,
      networkId
    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const {
      signature
    } = await this._rpcClient.request(METHODS.signTypedData, {
      onAccount: this.address,
      domain: {
        name,
        version,
        networkId,
        contractAddress
      },
      aci,
      data
    });
    return signature;
  }
  async signDelegationToContract(contractAddress) {
    const {
      signature
    } = await this._rpcClient.request(METHODS.signDelegationToContract, {
      onAccount: this.address,
      contractAddress
    });
    return signature;
  }
  async signNameDelegationToContract(contractAddress, name) {
    const {
      signature
    } = await this._rpcClient.request(METHODS.signDelegationToContract, {
      onAccount: this.address,
      contractAddress,
      name
    });
    return signature;
  }
  async signOracleQueryDelegationToContract(contractAddress, oracleQueryId) {
    const {
      signature
    } = await this._rpcClient.request(METHODS.signDelegationToContract, {
      onAccount: this.address,
      contractAddress,
      oracleQueryId
    });
    return signature;
  }
}
//# sourceMappingURL=Rpc.mjs.map
import { NotImplementedError } from "../utils/errors.mjs";
/**
 * Account is one of the three basic building blocks of an
 * {@link AeSdk} and provides access to a signing key pair.
 */
export default class AccountBase {
  /**
   * Sign encoded transaction
   * @param tx - Transaction to sign
   * @param options - Options
   * @param options.innerTx - Sign as inner transaction for PayingFor
   * @param options.authData - Object with gaMeta params
   * @returns Signed transaction
   */

  /**
   * Sign message
   * @param message - Message to sign
   * @param options - Options
   * @returns Signature
   */

  /**
   * Sign typed data
   * @param type - Type of data to sign
   * @param data - Encoded data to sign
   * @param options - Options
   * @returns Signature
   */
  // TODO: make abstract in the next major release
  // eslint-disable-next-line class-methods-use-this
  async signTypedData( /* eslint-disable @typescript-eslint/no-unused-vars */
  data, aci, options
  /* eslint-enable @typescript-eslint/no-unused-vars */) {
    throw new NotImplementedError('signTypedData method');
  }

  /**
   * Sign delegation of AENS, oracle operations to a contract
   * @param contractAddress - Address of a contract to delegate permissions to
   * @param options - Options
   * @returns Signature
   */
  // TODO: make abstract in the next major release
  // eslint-disable-next-line class-methods-use-this
  async signDelegationToContract( /* eslint-disable @typescript-eslint/no-unused-vars */
  contractAddress, options
  /* eslint-enable @typescript-eslint/no-unused-vars */) {
    throw new NotImplementedError('signDelegationToContract method');
  }

  /**
   * Sign delegation of an AENS name to a contract
   * @param contractAddress - Address of a contract to delegate permissions to
   * @param name - AENS name to manage by a contract
   * @param options - Options
   * @returns Signature
   */
  // TODO: make abstract in the next major release
  // eslint-disable-next-line class-methods-use-this
  async signNameDelegationToContract( /* eslint-disable @typescript-eslint/no-unused-vars */
  contractAddress, name, options
  /* eslint-enable @typescript-eslint/no-unused-vars */) {
    throw new NotImplementedError('signNameDelegationToContract method');
  }

  /**
   * Sign delegation of oracle query to a contract
   *
   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded
   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.
   *
   * Warning! Implementations needs to ensure that oracle query and contract exists unless
   * https://github.com/aeternity/aesophia/issues/474 is fixed.
   *
   * @param contractAddress - Address of a contract to delegate permissions to
   * @param oracleQueryId - Oracle query ID to reply by a contract
   * @param options - Options
   * @returns Signature
   */
  // TODO: make abstract in the next major release
  // eslint-disable-next-line class-methods-use-this
  async signOracleQueryDelegationToContract( /* eslint-disable @typescript-eslint/no-unused-vars */
  contractAddress, oracleQueryId, options
  /* eslint-enable @typescript-eslint/no-unused-vars */) {
    throw new NotImplementedError('signOracleQueryDelegationToContract method');
  }

  /**
   * Sign data blob
   * @param data - Data blob to sign
   * @param options - Options
   * @returns Signature
   */

  /**
   * Account address
   */
}
//# sourceMappingURL=Base.mjs.map
import type Transport from '@ledgerhq/hw-transport';
import AccountLedger from './Ledger';
import { Encoded } from '../utils/encoder';
import Node from '../Node';
/**
 * A factory class that generates instances of AccountLedger based on provided transport.
 */
export default class AccountLedgerFactory {
    readonly transport: Transport;
    private readonly versionCheckPromise;
    /**
     * @param transport - Connection to Ledger to use
     */
    constructor(transport: Transport);
    /**
     * @returns the version of app installed on Ledger wallet
     */
    getAppConfiguration(): Promise<{
        version: string;
    }>;
    /**
     * Get `ak_`-prefixed address for a given account index.
     * @param accountIndex - Index of account
     * @param verify - Ask user to confirm address by showing it on the device screen
     */
    getAddress(accountIndex: number, verify?: boolean): Promise<Encoded.AccountAddress>;
    /**
     * Get an instance of AccountLedger for a given account index.
     * @param accountIndex - Index of account
     */
    initialize(accountIndex: number): Promise<AccountLedger>;
    /**
     * Discovers accounts on Ledger that already have been used (has any on-chain transactions).
     * It returns an empty array if none of accounts been used.
     * If a used account is preceded by an unused account then it would be ignored.
     * @param node - Instance of Node to get account information from
     */
    discover(node: Node): Promise<AccountLedger[]>;
}

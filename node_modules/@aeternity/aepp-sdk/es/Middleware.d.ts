import { Middleware as MiddlewareApi, MiddlewareOptionalParams } from './apis/middleware';
import { Encoded } from './utils/encoder';
import { ConsensusProtocolVersion } from './tx/builder/constants';
declare const bigIntPropertyNames: readonly [];
declare const numberPropertyNames: readonly [];
type BigIntPropertyNames = typeof bigIntPropertyNames[number];
type NumberPropertyNames = typeof numberPropertyNames[number];
type PreserveOptional<NewType, OrigType> = OrigType extends undefined ? NewType | undefined : NewType;
export type TransformMiddlewareType<Type> = Type extends (...args: infer Args) => infer Ret ? (...args: TransformMiddlewareType<Args>) => TransformMiddlewareType<Ret> : Type extends [infer Item, ...infer Rest] ? [TransformMiddlewareType<Item>, ...TransformMiddlewareType<Rest>] : Type extends Array<infer Item> ? Array<TransformMiddlewareType<Item>> : Type extends Promise<infer T> ? Promise<TransformMiddlewareType<T>> : Type extends {
    [P in any]: any;
} ? {
    [Property in keyof Type]: Property extends BigIntPropertyNames ? PreserveOptional<bigint, Type[Property]> : Property extends NumberPropertyNames ? PreserveOptional<number, Type[Property]> : Property extends 'txHash' ? PreserveOptional<Encoded.TxHash, Type[Property]> : Property extends 'bytecode' ? PreserveOptional<Encoded.ContractBytearray, Type[Property]> : TransformMiddlewareType<Type[Property]>;
} : Type;
type MiddlewareTransformedApi = new (...args: ConstructorParameters<typeof MiddlewareApi>) => {
    [Name in keyof InstanceType<typeof MiddlewareApi>]: Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest' ? MiddlewareApi[Name] : TransformMiddlewareType<MiddlewareApi[Name]>;
};
export interface MiddlewareInfo {
    url: string;
    nodeNetworkId: string;
    version: string;
    consensusProtocolVersion: ConsensusProtocolVersion;
}
declare const Middleware_base: MiddlewareTransformedApi;
export default class Middleware extends Middleware_base {
    /**
     * @param url - Url for middleware API
     * @param options - Options
     * @param options.ignoreVersion - Don't ensure that the middleware is supported
     * @param options.retryCount - Amount of extra requests to do in case of failure
     * @param options.retryOverallDelay - Time in ms to wait between all retries
     */
    constructor(url: string, { ignoreVersion, retryCount, retryOverallDelay, ...options }?: MiddlewareOptionalParams & {
        ignoreVersion?: boolean;
        retryCount?: number;
        retryOverallDelay?: number;
    });
}
export {};

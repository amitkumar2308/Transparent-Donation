{"version":3,"file":"internal.mjs","names":["_websocket","w3cwebsocket","W3CWebSocket","JsonBig","pascalToSnake","ChannelCallError","ChannelPingTimedOutError","UnexpectedTsError","UnknownChannelStateError","ChannelIncomingMessageError","ChannelError","encodeContractAddress","buildTx","ensureError","PING_TIMEOUT_MS","PONG_TIMEOUT_MS","emit","channel","_len","arguments","length","args","Array","_key","eventName","rest","_eventEmitter","enterState","nextState","_nextState$handler","_fsm","handler","enter","dequeueAction","changeStatus","newStatus","_status","changeState","newState","_state","send","message","_options","debug","console","log","stringify","jsonrpc","notify","method","params","undefined","_isActionQueueLocked","queue","_actionQueue","index","findIndex","action","guard","filter","_","i","enqueueAction","promise","Promise","resolve","reject","push","res","state","handleMessage","_message$params","st","data","updates","op","name","_message$params2","round","owner","dequeueMessage","_isMessageQueueLocked","_messageQueue","shift","error","disconnect","close","clearTimeout","_pingTimeoutId","ping","setTimeout","onMessage","parse","id","callback","_rpcCallbacks","get","delete","channel_id","_channelId","call","_nextRpcMessageId","set","_message$error$data$","details","result","initialize","connectionHandler","openHandler","_ref","url","channelOptions","wsUrl","URL","Object","entries","_ref2","key","includes","forEach","_ref3","value","searchParams","toString","assign","onerror","onopen","reconnectTx","signedTx","onclose","onmessage","_ref4"],"sources":["../../src/channel/internal.ts"],"sourcesContent":["import { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport BigNumber from 'bignumber.js';\nimport type Channel from './Base';\nimport JsonBig from '../utils/json-big';\nimport { pascalToSnake } from '../utils/string';\nimport { Encoded } from '../utils/encoder';\nimport {\n  BaseError,\n  ChannelCallError,\n  ChannelPingTimedOutError,\n  UnexpectedTsError,\n  UnknownChannelStateError,\n  ChannelIncomingMessageError,\n  ChannelError,\n} from '../utils/errors';\nimport { encodeContractAddress } from '../utils/crypto';\nimport { buildTx } from '../tx/builder';\nimport { ensureError } from '../utils/other';\n\nexport interface ChannelEvents {\n  statusChanged: (status: ChannelStatus) => void;\n  stateChanged: (tx: Encoded.Transaction | '') => void;\n  depositLocked: () => void;\n  ownDepositLocked: () => void;\n  withdrawLocked: () => void;\n  ownWithdrawLocked: () => void;\n  peerDisconnected: () => void;\n  channelReestablished: () => void;\n  error: (error: Error) => void;\n  onChainTx: (tx: Encoded.Transaction, details: { info: string; type: string }) => void;\n  message: (message: string | Object) => void;\n  newContract: (contractAddress: Encoded.ContractAddress) => void;\n}\n\nexport interface ChannelAction {\n  guard: (channel: Channel, state?: ChannelFsm) => boolean;\n  action: (channel: Channel, state?: ChannelFsm) => ChannelFsm;\n}\n\ninterface SignOptions {\n  updates?: any[];\n  [k: string]: any;\n}\nexport type SignTxWithTag = (tag: string, tx: Encoded.Transaction, options?: SignOptions) => (\n  Promise<Encoded.Transaction>\n);\n// TODO: SignTx shouldn't return number or null\nexport type SignTx = (tx: Encoded.Transaction, options?: SignOptions) => (\n  Promise<Encoded.Transaction | number | null>\n);\n\nexport interface ChannelOptions {\n  existingFsmId?: Encoded.Bytearray;\n  url: string;\n\n  /**\n   * @see {@link https://github.com/aeternity/protocol/blob/6734de2e4c7cce7e5e626caa8305fb535785131d/node/api/channels_api_usage.md#channel-establishing-parameters}\n   */\n  initiatorId: Encoded.AccountAddress;\n  responderId: Encoded.AccountAddress;\n  lockPeriod: number;\n  pushAmount: number;\n  initiatorAmount: BigNumber;\n  responderAmount: BigNumber;\n  channelReserve?: BigNumber | number;\n  ttl?: number;\n  host: string;\n  port: number;\n  role: 'initiator' | 'responder';\n  minimumDepthStrategy?: 'txfee' | 'plain';\n  minimumDepth?: number;\n  fee?: BigNumber | number;\n  gasPrice?: BigNumber | number;\n\n  signedTx?: string;\n  existingChannelId?: string;\n  offChainTx?: string;\n  reconnectTx?: string;\n  timeoutIdle?: number;\n  timeoutFundingCreate?: number;\n  timeoutFundingSign?: number;\n  timeoutFundingLock?: number;\n  timeoutSign?: number;\n  timeoutAccept?: number;\n  timeoutInitialized?: number;\n  timeoutAwaitingOpen?: number;\n  statePassword?: string;\n  debug: boolean;\n  sign: SignTxWithTag;\n  offchainTx?: string;\n}\n\nexport interface ChannelHandler extends Function {\n  enter?: Function;\n}\n\nexport interface ChannelState {\n  signedTx: Encoded.Transaction;\n  resolve: (r?: any) => void;\n  reject: (e: BaseError) => void;\n  sign: SignTx;\n  handler?: ChannelHandler;\n  onOnChainTx?: (tx: Encoded.Transaction) => void;\n  onOwnWithdrawLocked?: () => void;\n  onWithdrawLocked?: () => void;\n  onOwnDepositLocked?: () => void;\n  onDepositLocked?: () => void;\n  closeTx?: string;\n}\n\nexport interface ChannelFsm {\n  handler: ChannelHandler;\n  state?: ChannelState | {\n    resolve: Function;\n    reject: Function;\n  };\n}\n\nexport interface ChannelMessage {\n  id?: number;\n  method: string;\n  params: any;\n  payload?: any;\n  data?: any;\n  error?: ChannelMessageError;\n}\n\ninterface ChannelMessageError {\n  code: number;\n  message: string;\n  data: [{\n    message: string;\n    code: number;\n  }];\n  request: ChannelMessage;\n}\n\n// Send ping message every 10 seconds\nconst PING_TIMEOUT_MS = 10000;\n// Close connection if pong message is not received within 15 seconds\nconst PONG_TIMEOUT_MS = 15000;\n\nexport function emit<E extends keyof ChannelEvents>(\n  channel: Channel,\n  ...args: [E, ...Parameters<ChannelEvents[E]>]\n): void {\n  const [eventName, ...rest] = args;\n  channel._eventEmitter.emit(eventName, ...rest);\n}\n\nfunction enterState(channel: Channel, nextState: ChannelFsm): void {\n  if (nextState == null) {\n    throw new UnknownChannelStateError();\n  }\n  channel._fsm = nextState;\n  if (nextState?.handler?.enter != null) {\n    nextState.handler.enter(channel);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  void dequeueAction(channel);\n}\n\n// TODO: rewrite to enum\nexport type ChannelStatus = 'connecting' | 'connected' | 'accepted' | 'halfSigned' | 'signed'\n| 'open' | 'closing' | 'closed' | 'died' | 'disconnected';\n\nexport function changeStatus(channel: Channel, newStatus: ChannelStatus): void {\n  if (newStatus === channel._status) return;\n  channel._status = newStatus;\n  emit(channel, 'statusChanged', newStatus);\n}\n\nexport function changeState(channel: Channel, newState: Encoded.Transaction | ''): void {\n  channel._state = newState;\n  emit(channel, 'stateChanged', newState);\n}\n\nfunction send(channel: Channel, message: ChannelMessage): void {\n  if (channel._options.debug) console.log('Send message: ', message);\n  channel._websocket.send(JsonBig.stringify({ jsonrpc: '2.0', ...message }));\n}\n\nexport function notify(channel: Channel, method: string, params: object = {}): void {\n  send(channel, { method, params });\n}\n\nasync function dequeueAction(channel: Channel): Promise<void> {\n  if (channel._isActionQueueLocked) return;\n  const queue = channel._actionQueue;\n  if (queue.length === 0) return;\n  const index = queue.findIndex((action) => action.guard(channel, channel._fsm));\n  if (index === -1) return;\n  channel._actionQueue = queue.filter((_, i) => index !== i);\n  channel._isActionQueueLocked = true;\n  const nextState: ChannelFsm = await queue[index].action(channel, channel._fsm);\n  channel._isActionQueueLocked = false;\n  enterState(channel, nextState);\n}\n\nexport async function enqueueAction(\n  channel: Channel,\n  guard: ChannelAction['guard'],\n  action: () => { handler: ChannelHandler; state?: Partial<ChannelState> },\n): Promise<any> {\n  const promise = new Promise((resolve, reject) => {\n    channel._actionQueue.push({\n      guard,\n      action() {\n        const res = action();\n        return { ...res, state: { ...res.state, resolve, reject } };\n      },\n    });\n  });\n  void dequeueAction(channel);\n  return promise;\n}\n\nasync function handleMessage(channel: Channel, message: ChannelMessage): Promise<void> {\n  const { handler, state: st } = channel._fsm;\n  const nextState = await Promise.resolve(handler(channel, message, st));\n  enterState(channel, nextState);\n  // TODO: emit message and handler name (?) to move this code to Contract constructor\n  if (\n    message?.params?.data?.updates?.[0]?.op === 'OffChainNewContract'\n    // if name is channelOpen, the contract was created by other participant\n    && nextState?.handler.name === 'channelOpen'\n  ) {\n    const round = channel.round();\n    if (round == null) throw new UnexpectedTsError('Round is null');\n    const owner = message?.params?.data?.updates?.[0]?.owner;\n    emit(channel, 'newContract', encodeContractAddress(owner, round + 1));\n  }\n}\n\nasync function dequeueMessage(channel: Channel): Promise<void> {\n  if (channel._isMessageQueueLocked) return;\n  channel._isMessageQueueLocked = true;\n  while (channel._messageQueue.length > 0) {\n    const message = channel._messageQueue.shift();\n    if (message == null) throw new UnexpectedTsError();\n    try {\n      await handleMessage(channel, message);\n    } catch (error) {\n      ensureError(error);\n      emit(channel, 'error', new ChannelIncomingMessageError(error, message));\n    }\n  }\n  channel._isMessageQueueLocked = false;\n}\n\nexport function disconnect(channel: Channel): void {\n  channel._websocket.close();\n  clearTimeout(channel._pingTimeoutId);\n}\n\nfunction ping(channel: Channel): void {\n  clearTimeout(channel._pingTimeoutId);\n  channel._pingTimeoutId = setTimeout(() => {\n    notify(channel, 'channels.system', { action: 'ping' });\n    channel._pingTimeoutId = setTimeout(() => {\n      disconnect(channel);\n      emit(channel, 'error', new ChannelPingTimedOutError());\n    }, PONG_TIMEOUT_MS);\n  }, PING_TIMEOUT_MS);\n}\n\nfunction onMessage(channel: Channel, data: string): void {\n  const message = JsonBig.parse(data);\n  if (channel._options.debug) console.log('Receive message: ', message);\n  if (message.id != null) {\n    const callback = channel._rpcCallbacks.get(message.id);\n    if (callback == null) {\n      emit(channel, 'error', new ChannelError(`Can't find callback by id: ${message.id}`));\n      return;\n    }\n    try {\n      callback(message);\n    } finally {\n      channel._rpcCallbacks.delete(message.id);\n    }\n    return;\n  }\n  if (message.method === 'channels.message') {\n    emit(channel, 'message', message.params.data.message);\n    return;\n  }\n  if (message.method === 'channels.system.pong') {\n    if (message.params.channel_id === channel._channelId || channel._channelId == null) {\n      ping(channel);\n    }\n    return;\n  }\n  channel._messageQueue.push(message);\n  void dequeueMessage(channel);\n}\n\nexport async function call(channel: Channel, method: string, params: any): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const id = channel._nextRpcMessageId;\n    channel._nextRpcMessageId += 1;\n    channel._rpcCallbacks.set(id, (\n      message: { result: PromiseLike<any>; error?: ChannelMessageError },\n    ) => {\n      if (message.error != null) {\n        const details = message.error.data[0].message ?? '';\n        reject(new ChannelCallError(message.error.message + details));\n      } else resolve(message.result);\n    });\n    send(channel, { method, id, params });\n  });\n}\n\nexport async function initialize(\n  channel: Channel,\n  connectionHandler: Function,\n  openHandler: Function,\n  { url, ...channelOptions }: ChannelOptions,\n): Promise<void> {\n  channel._options = { url, ...channelOptions };\n  channel._fsm = { handler: connectionHandler };\n\n  const wsUrl = new URL(url);\n  Object.entries(channelOptions)\n    .filter(([key]) => !['sign', 'debug'].includes(key))\n    .forEach(([key, value]) => wsUrl.searchParams.set(pascalToSnake(key), value.toString()));\n  wsUrl.searchParams.set('protocol', 'json-rpc');\n  changeStatus(channel, 'connecting');\n  channel._websocket = new W3CWebSocket(wsUrl.toString());\n  await new Promise<void>((resolve, reject) => {\n    Object.assign(channel._websocket, {\n      onerror: reject,\n      onopen: async () => {\n        resolve();\n        changeStatus(channel, 'connected');\n        if (channelOptions.reconnectTx != null) {\n          enterState(channel, { handler: openHandler });\n          const { signedTx } = await channel.state();\n          if (signedTx == null) {\n            throw new ChannelError('`signedTx` missed in state while reconnection');\n          }\n          changeState(channel, buildTx(signedTx));\n        }\n        ping(channel);\n      },\n      onclose: () => {\n        changeStatus(channel, 'disconnected');\n        clearTimeout(channel._pingTimeoutId);\n      },\n      onmessage: ({ data }: { data: string }) => onMessage(channel, data),\n    });\n  });\n}\n"],"mappings":"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"}
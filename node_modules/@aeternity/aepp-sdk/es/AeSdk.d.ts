import AeSdkBase from './AeSdkBase';
import { OnAccount } from './AeSdkMethods';
import AccountBase from './account/Base';
import { Encoded } from './utils/encoder';
export default class AeSdk extends AeSdkBase {
    accounts: {
        [key: Encoded.AccountAddress]: AccountBase;
    };
    selectedAddress?: Encoded.AccountAddress;
    constructor({ accounts, ...options }?: {
        accounts?: AccountBase[];
    } & ConstructorParameters<typeof AeSdkBase>[0]);
    _resolveAccount(account?: OnAccount): AccountBase;
    /**
     * Get accounts addresses
     * @example addresses()
     */
    addresses(): Encoded.AccountAddress[];
    /**
     * Add specific account
     * @param account - Account instance
     * @param options - Options
     * @param options.select - Select account
     * @example addAccount(account)
     */
    addAccount(account: AccountBase, { select }?: {
        select?: boolean;
    }): void;
    /**
     * Remove specific account
     * @param address - Address of account to remove
     * @example removeAccount(address)
     */
    removeAccount(address: Encoded.AccountAddress): void;
    /**
     * Select specific account
     * @param address - Address of account to select
     * @example selectAccount('ak_xxxxxxxx')
     */
    selectAccount(address: Encoded.AccountAddress): void;
}

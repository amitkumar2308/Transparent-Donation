function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
// eslint-disable-next-line max-classes-per-file
import BigNumber from 'bignumber.js';
import { genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy, genVersionCheckPolicy, genRetryOnFailurePolicy } from "./utils/autorest.mjs";
import { Middleware as MiddlewareApi } from "./apis/middleware/index.mjs";
import { mapObject } from "./utils/other.mjs";
const bigIntPropertyNames = [];
const numberPropertyNames = [];
var _mapData = /*#__PURE__*/new WeakSet();
var _encodeArg = /*#__PURE__*/new WeakSet();
var _decodeRes = /*#__PURE__*/new WeakSet();
class MiddlewareTransformed extends MiddlewareApi {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec(this, _decodeRes);
    _classPrivateMethodInitSpec(this, _encodeArg);
    _classPrivateMethodInitSpec(this, _mapData);
  }
  async sendOperationRequest(operationArguments, operationSpec) {
    const args = mapObject(operationArguments, _ref => {
      let [key, value] = _ref;
      return [key, _classPrivateMethodGet(this, _encodeArg, _encodeArg2).call(this, value)];
    });
    return _classPrivateMethodGet(this, _decodeRes, _decodeRes2).call(this, await super.sendOperationRequest(args, operationSpec));
  }
}
function _mapData2(data, transform) {
  if (Array.isArray(data)) return data.map(d => _classPrivateMethodGet(this, _mapData, _mapData2).call(this, d, transform));
  if (data != null && typeof data === 'object') {
    return mapObject(data, _ref3 => {
      let [key, value] = _ref3;
      if (value == null) return [key, value];
      if (bigIntPropertyNames.some(k => k === key)) return [key, transform.bigInt(value)];
      if (numberPropertyNames.some(k => k === key)) return [key, transform.number(value)];
      return [key, _classPrivateMethodGet(this, _mapData, _mapData2).call(this, value, transform)];
    });
  }
  return data;
}
function _encodeArg2(data) {
  return _classPrivateMethodGet(this, _mapData, _mapData2).call(this, data, {
    bigInt: value => {
      if (value instanceof BigNumber) return value.toFixed();
      return value.toString();
    },
    number: value => value.toString()
  });
}
function _decodeRes2(data) {
  return _classPrivateMethodGet(this, _mapData, _mapData2).call(this, data, {
    bigInt: value => BigInt(value),
    number: value => +value
  });
}
export default class Middleware extends MiddlewareTransformed {
  /**
   * @param url - Url for middleware API
   * @param options - Options
   * @param options.ignoreVersion - Don't ensure that the middleware is supported
   * @param options.retryCount - Amount of extra requests to do in case of failure
   * @param options.retryOverallDelay - Time in ms to wait between all retries
   */
  constructor(url) {
    let {
      ignoreVersion = false,
      retryCount = 3,
      retryOverallDelay = 800,
      ...options
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    // eslint-disable-next-line constructor-super
    super(url, {
      allowInsecureConnection: true,
      additionalPolicies: [genRequestQueuesPolicy(), genCombineGetRequestsPolicy(), genRetryOnFailurePolicy(retryCount, retryOverallDelay), genErrorFormatterPolicy(body => ` ${body.error}`)],
      ...options
    });
    if (!ignoreVersion) {
      const statusPromise = this.getStatus();
      const versionPromise = statusPromise.then(_ref2 => {
        let {
          mdwVersion
        } = _ref2;
        return mdwVersion;
      }, error => error);
      this.pipeline.addPolicy(genVersionCheckPolicy('middleware', '/v2/status', versionPromise, '1.47.0', '2.0.0'));
    }
  }
}
//# sourceMappingURL=Middleware.mjs.map
{"ast":null,"code":"const Serializer = require('./Serializer');\nconst ApiEncoder = require('./ApiEncoder');\nconst CanonicalMapper = require('./Mapper/CanonicalMapper');\nconst ExternalDataFactory = require('./ExternalDataFactory');\nclass ContractByteArrayEncoder {\n  constructor() {\n    /** @type {Serializer} */\n    this._serializer = new Serializer();\n\n    /** @type {ApiEncoder} */\n    this._apiEncoder = new ApiEncoder();\n\n    /** @type {ExternalDataFactory} */\n    this._externalDataFactory = new ExternalDataFactory();\n\n    /** @type {CanonicalMapper} */\n    this._canonicalMapper = new CanonicalMapper();\n  }\n\n  /**\n   * Encode FATE data to contract bytearray.\n   *\n   * @example\n   * const encoded = encoder.encode(FateTypeString(), \"whoolymoly\")\n   * console.log(`Encoded data: ${encoded}`)\n   * // Outputs:\n   * // Encoded data: cb_KXdob29seW1vbHlGazSE\n   *\n   * @param {object} type - Data as Javascript data structures. See README.md\n   * @param {Array} data - Data as Javascript data structures. See README.md\n   * @returns {string} Encoded contract byte array\n  */\n  encode(type, value) {\n    const data = this._externalDataFactory.create(type, value);\n    const serialized = this._serializer.serialize(data);\n    const binData = new Uint8Array(serialized.flat(Infinity));\n    return this._apiEncoder.encode('contract_bytearray', binData);\n  }\n\n  /**\n   * Decodes arbitrary contract bytearray data.\n   *\n   * Note that:\n   * - Variants are not annotated with constructor names\n   * - Record keys are lost\n   * - Any custom type information is lost\n   * - STL type information is lost: i.e. Chain, AENS, Set, BLS12_381\n   *\n   * @example\n   * const decoded = encoder.decode('cb_KXdob29seW1vbHlGazSE')\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} data - Contract bytearray data in a canonical format.\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decode(data) {\n    const binData = this._apiEncoder.decodeWithType(data, 'contract_bytearray');\n    const deserialized = this._serializer.deserialize(binData);\n    return this._canonicalMapper.toCanonical(deserialized);\n  }\n\n  /**\n   * Decodes arbitrary contract bytearray data with type information.\n   *\n   * @example\n   * const decoded = encoder.decodeWithType('cb_KXdob29seW1vbHlGazSE', FateTypeString())\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} data - Contract bytearray data in a canonical format.\n   * @param {object} type - Data as Javascript data structures. See README.md\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decodeWithType(data, type) {\n    const binData = this._apiEncoder.decodeWithType(data, 'contract_bytearray');\n    const deserialized = this._serializer.deserializeWithType(binData, type);\n    return this._canonicalMapper.toCanonical(deserialized);\n  }\n}\nmodule.exports = ContractByteArrayEncoder;","map":{"version":3,"names":["Serializer","require","ApiEncoder","CanonicalMapper","ExternalDataFactory","ContractByteArrayEncoder","constructor","_serializer","_apiEncoder","_externalDataFactory","_canonicalMapper","encode","type","value","data","create","serialized","serialize","binData","Uint8Array","flat","Infinity","decode","decodeWithType","deserialized","deserialize","toCanonical","deserializeWithType","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/ContractByteArrayEncoder.js"],"sourcesContent":["const Serializer = require('./Serializer')\nconst ApiEncoder = require('./ApiEncoder')\nconst CanonicalMapper = require('./Mapper/CanonicalMapper')\nconst ExternalDataFactory = require('./ExternalDataFactory')\n\nclass ContractByteArrayEncoder {\n    constructor() {\n        /** @type {Serializer} */\n        this._serializer = new Serializer()\n\n        /** @type {ApiEncoder} */\n        this._apiEncoder = new ApiEncoder()\n\n        /** @type {ExternalDataFactory} */\n        this._externalDataFactory = new ExternalDataFactory()\n\n        /** @type {CanonicalMapper} */\n        this._canonicalMapper = new CanonicalMapper()\n    }\n\n    /**\n     * Encode FATE data to contract bytearray.\n     *\n     * @example\n     * const encoded = encoder.encode(FateTypeString(), \"whoolymoly\")\n     * console.log(`Encoded data: ${encoded}`)\n     * // Outputs:\n     * // Encoded data: cb_KXdob29seW1vbHlGazSE\n     *\n     * @param {object} type - Data as Javascript data structures. See README.md\n     * @param {Array} data - Data as Javascript data structures. See README.md\n     * @returns {string} Encoded contract byte array\n    */\n    encode(type, value) {\n        const data = this._externalDataFactory.create(type, value)\n        const serialized = this._serializer.serialize(data)\n        const binData = new Uint8Array(serialized.flat(Infinity))\n\n        return this._apiEncoder.encode('contract_bytearray', binData)\n    }\n\n    /**\n     * Decodes arbitrary contract bytearray data.\n     *\n     * Note that:\n     * - Variants are not annotated with constructor names\n     * - Record keys are lost\n     * - Any custom type information is lost\n     * - STL type information is lost: i.e. Chain, AENS, Set, BLS12_381\n     *\n     * @example\n     * const decoded = encoder.decode('cb_KXdob29seW1vbHlGazSE')\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} data - Contract bytearray data in a canonical format.\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decode(data) {\n        const binData = this._apiEncoder.decodeWithType(data, 'contract_bytearray')\n        const deserialized = this._serializer.deserialize(binData)\n\n        return this._canonicalMapper.toCanonical(deserialized)\n    }\n\n    /**\n     * Decodes arbitrary contract bytearray data with type information.\n     *\n     * @example\n     * const decoded = encoder.decodeWithType('cb_KXdob29seW1vbHlGazSE', FateTypeString())\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} data - Contract bytearray data in a canonical format.\n     * @param {object} type - Data as Javascript data structures. See README.md\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decodeWithType(data, type) {\n        const binData = this._apiEncoder.decodeWithType(data, 'contract_bytearray')\n        const deserialized = this._serializer.deserializeWithType(binData, type)\n\n        return this._canonicalMapper.toCanonical(deserialized)\n    }\n}\n\nmodule.exports = ContractByteArrayEncoder\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAME,eAAe,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC3D,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAE5D,MAAMI,wBAAwB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACC,WAAW,GAAG,IAAIP,UAAU,CAAC,CAAC;;IAEnC;IACA,IAAI,CAACQ,WAAW,GAAG,IAAIN,UAAU,CAAC,CAAC;;IAEnC;IACA,IAAI,CAACO,oBAAoB,GAAG,IAAIL,mBAAmB,CAAC,CAAC;;IAErD;IACA,IAAI,CAACM,gBAAgB,GAAG,IAAIP,eAAe,CAAC,CAAC;EACjD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,MAAMC,IAAI,GAAG,IAAI,CAACL,oBAAoB,CAACM,MAAM,CAACH,IAAI,EAAEC,KAAK,CAAC;IAC1D,MAAMG,UAAU,GAAG,IAAI,CAACT,WAAW,CAACU,SAAS,CAACH,IAAI,CAAC;IACnD,MAAMI,OAAO,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACI,IAAI,CAACC,QAAQ,CAAC,CAAC;IAEzD,OAAO,IAAI,CAACb,WAAW,CAACG,MAAM,CAAC,oBAAoB,EAAEO,OAAO,CAAC;EACjE;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,MAAMA,CAACR,IAAI,EAAE;IACT,MAAMI,OAAO,GAAG,IAAI,CAACV,WAAW,CAACe,cAAc,CAACT,IAAI,EAAE,oBAAoB,CAAC;IAC3E,MAAMU,YAAY,GAAG,IAAI,CAACjB,WAAW,CAACkB,WAAW,CAACP,OAAO,CAAC;IAE1D,OAAO,IAAI,CAACR,gBAAgB,CAACgB,WAAW,CAACF,YAAY,CAAC;EAC1D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACID,cAAcA,CAACT,IAAI,EAAEF,IAAI,EAAE;IACvB,MAAMM,OAAO,GAAG,IAAI,CAACV,WAAW,CAACe,cAAc,CAACT,IAAI,EAAE,oBAAoB,CAAC;IAC3E,MAAMU,YAAY,GAAG,IAAI,CAACjB,WAAW,CAACoB,mBAAmB,CAACT,OAAO,EAAEN,IAAI,CAAC;IAExE,OAAO,IAAI,CAACF,gBAAgB,CAACgB,WAAW,CAACF,YAAY,CAAC;EAC1D;AACJ;AAEAI,MAAM,CAACC,OAAO,GAAGxB,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const RLPInt = require('../utils/RLPInt');\nconst FateTag = require('../FateTag');\nconst FateList = require('../types/FateList');\nconst BaseSerializer = require('./BaseSerializer');\nclass ListSerializer extends BaseSerializer {\n  serialize(list) {\n    const serializedElements = list.items.map(e => {\n      return this.globalSerializer.serialize(e);\n    }).flat(Infinity);\n    const len = list.items.length;\n    if (len < 16) {\n      const prefix = len << 4 | FateTag.SHORT_LIST;\n      return [prefix, ...serializedElements];\n    }\n    return [FateTag.LONG_LIST, ...RLPInt.encode(len - 16), ...serializedElements];\n  }\n  deserializeStream(data, typeInfo) {\n    const buffer = new Uint8Array(data);\n    const prefix = buffer[0];\n    let len = 0n;\n    let rest = buffer.slice(1);\n    if (prefix === FateTag.LONG_LIST) {\n      [len, rest] = RLPInt.decode(buffer.slice(1));\n      len += 16n;\n    }\n    if ((prefix & 0x0F) === FateTag.SHORT_LIST) {\n      len = BigInt((prefix & 0xF0) >> 4);\n    }\n    let itemsType;\n    if (typeof typeInfo !== 'undefined') {\n      itemsType = typeInfo.valuesType;\n    }\n    let el;\n    const elements = [];\n    for (let i = 0n; i < len; i++) {\n      [el, rest] = this.globalSerializer.deserializeStream(rest, itemsType);\n      elements.push(el);\n    }\n    if (len === 0n) {\n      return [new FateList(), rest];\n    }\n    if (typeof typeInfo === 'undefined') {\n      itemsType = elements[0].type;\n    }\n    return [new FateList(itemsType, elements), rest];\n  }\n}\nmodule.exports = ListSerializer;","map":{"version":3,"names":["RLPInt","require","FateTag","FateList","BaseSerializer","ListSerializer","serialize","list","serializedElements","items","map","e","globalSerializer","flat","Infinity","len","length","prefix","SHORT_LIST","LONG_LIST","encode","deserializeStream","data","typeInfo","buffer","Uint8Array","rest","slice","decode","BigInt","itemsType","valuesType","el","elements","i","push","type","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/ListSerializer.js"],"sourcesContent":["const RLPInt = require('../utils/RLPInt')\nconst FateTag = require('../FateTag')\nconst FateList = require('../types/FateList')\nconst BaseSerializer = require('./BaseSerializer')\n\nclass ListSerializer extends BaseSerializer {\n    serialize(list) {\n        const serializedElements = list.items.map(e => {\n            return this.globalSerializer.serialize(e)\n        }).flat(Infinity)\n\n        const len = list.items.length\n\n        if (len < 16) {\n            const prefix = (len << 4) | FateTag.SHORT_LIST\n\n            return [\n                prefix,\n                ...serializedElements\n            ]\n        }\n\n        return [\n            FateTag.LONG_LIST,\n            ...RLPInt.encode(len - 16),\n            ...serializedElements\n        ]\n    }\n\n    deserializeStream(data, typeInfo) {\n        const buffer = new Uint8Array(data)\n        const prefix = buffer[0]\n        let len = 0n\n        let rest = buffer.slice(1)\n\n        if (prefix === FateTag.LONG_LIST) {\n            [len, rest] = RLPInt.decode(buffer.slice(1))\n            len += 16n\n        }\n\n        if ((prefix & 0x0F) === FateTag.SHORT_LIST) {\n            len = BigInt((prefix & 0xF0) >> 4)\n        }\n\n        let itemsType\n\n        if (typeof typeInfo !== 'undefined') {\n            itemsType = typeInfo.valuesType\n        }\n\n        let el\n        const elements = []\n\n        for (let i = 0n; i < len; i++) {\n            [el, rest] = this.globalSerializer.deserializeStream(rest, itemsType)\n            elements.push(el)\n        }\n\n        if (len === 0n) {\n            return [new FateList(), rest]\n        }\n\n        if (typeof typeInfo === 'undefined') {\n            itemsType = elements[0].type\n        }\n\n        return [\n            new FateList(itemsType, elements),\n            rest\n        ]\n    }\n}\n\nmodule.exports = ListSerializer\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACzC,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAY,CAAC;AACrC,MAAME,QAAQ,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAMG,cAAc,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAElD,MAAMI,cAAc,SAASD,cAAc,CAAC;EACxCE,SAASA,CAACC,IAAI,EAAE;IACZ,MAAMC,kBAAkB,GAAGD,IAAI,CAACE,KAAK,CAACC,GAAG,CAACC,CAAC,IAAI;MAC3C,OAAO,IAAI,CAACC,gBAAgB,CAACN,SAAS,CAACK,CAAC,CAAC;IAC7C,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAAC;IAEjB,MAAMC,GAAG,GAAGR,IAAI,CAACE,KAAK,CAACO,MAAM;IAE7B,IAAID,GAAG,GAAG,EAAE,EAAE;MACV,MAAME,MAAM,GAAIF,GAAG,IAAI,CAAC,GAAIb,OAAO,CAACgB,UAAU;MAE9C,OAAO,CACHD,MAAM,EACN,GAAGT,kBAAkB,CACxB;IACL;IAEA,OAAO,CACHN,OAAO,CAACiB,SAAS,EACjB,GAAGnB,MAAM,CAACoB,MAAM,CAACL,GAAG,GAAG,EAAE,CAAC,EAC1B,GAAGP,kBAAkB,CACxB;EACL;EAEAa,iBAAiBA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC9B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAACH,IAAI,CAAC;IACnC,MAAML,MAAM,GAAGO,MAAM,CAAC,CAAC,CAAC;IACxB,IAAIT,GAAG,GAAG,EAAE;IACZ,IAAIW,IAAI,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;IAE1B,IAAIV,MAAM,KAAKf,OAAO,CAACiB,SAAS,EAAE;MAC9B,CAACJ,GAAG,EAAEW,IAAI,CAAC,GAAG1B,MAAM,CAAC4B,MAAM,CAACJ,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;MAC5CZ,GAAG,IAAI,GAAG;IACd;IAEA,IAAI,CAACE,MAAM,GAAG,IAAI,MAAMf,OAAO,CAACgB,UAAU,EAAE;MACxCH,GAAG,GAAGc,MAAM,CAAC,CAACZ,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC;IACtC;IAEA,IAAIa,SAAS;IAEb,IAAI,OAAOP,QAAQ,KAAK,WAAW,EAAE;MACjCO,SAAS,GAAGP,QAAQ,CAACQ,UAAU;IACnC;IAEA,IAAIC,EAAE;IACN,MAAMC,QAAQ,GAAG,EAAE;IAEnB,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAGnB,GAAG,EAAEmB,CAAC,EAAE,EAAE;MAC3B,CAACF,EAAE,EAAEN,IAAI,CAAC,GAAG,IAAI,CAACd,gBAAgB,CAACS,iBAAiB,CAACK,IAAI,EAAEI,SAAS,CAAC;MACrEG,QAAQ,CAACE,IAAI,CAACH,EAAE,CAAC;IACrB;IAEA,IAAIjB,GAAG,KAAK,EAAE,EAAE;MACZ,OAAO,CAAC,IAAIZ,QAAQ,CAAC,CAAC,EAAEuB,IAAI,CAAC;IACjC;IAEA,IAAI,OAAOH,QAAQ,KAAK,WAAW,EAAE;MACjCO,SAAS,GAAGG,QAAQ,CAAC,CAAC,CAAC,CAACG,IAAI;IAChC;IAEA,OAAO,CACH,IAAIjC,QAAQ,CAAC2B,SAAS,EAAEG,QAAQ,CAAC,EACjCP,IAAI,CACP;EACL;AACJ;AAEAW,MAAM,CAACC,OAAO,GAAGjC,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const RLP = require('rlp');\nconst ApiEncoder = require('./ApiEncoder');\nconst Serializer = require('./Serializer');\nconst BytecodeSerializer = require('./Serializers/BytecodeSerializer');\nconst {\n  byteArray2Int,\n  byteArray2Hex\n} = require('./utils/int2ByteArray');\nclass ContractEncoder {\n  constructor() {\n    this._apiEncoder = new ApiEncoder();\n    this._bytecodeSerializer = new BytecodeSerializer(new Serializer());\n  }\n\n  /**\n   * Decodes serialized contract metadata and bytecode\n   *\n   * @param {string} data - Contract bytearray data in a canonical format.\n   * @returns {Object} Decoded contract metadata as POJO.\n  */\n  decode(data) {\n    const binData = this._apiEncoder.decodeWithType(data, 'contract_bytearray');\n    const decoded = RLP.decode(binData, true);\n    const stringDecoder = new TextDecoder();\n    return {\n      tag: byteArray2Int(decoded.data[0]),\n      vsn: byteArray2Int(decoded.data[1]),\n      sourceHash: byteArray2Hex(decoded.data[2]),\n      aevmTypeInfo: decoded.data[3],\n      compilerVersion: stringDecoder.decode(decoded.data[5]),\n      payable: Boolean(decoded.data[6][0]),\n      bytecode: this._bytecodeSerializer.deserialize(new Uint8Array(decoded.data[4]))\n    };\n  }\n}\nmodule.exports = ContractEncoder;","map":{"version":3,"names":["RLP","require","ApiEncoder","Serializer","BytecodeSerializer","byteArray2Int","byteArray2Hex","ContractEncoder","constructor","_apiEncoder","_bytecodeSerializer","decode","data","binData","decodeWithType","decoded","stringDecoder","TextDecoder","tag","vsn","sourceHash","aevmTypeInfo","compilerVersion","payable","Boolean","bytecode","deserialize","Uint8Array","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/ContractEncoder.js"],"sourcesContent":["const RLP = require('rlp')\nconst ApiEncoder = require('./ApiEncoder')\nconst Serializer = require('./Serializer')\nconst BytecodeSerializer = require('./Serializers/BytecodeSerializer')\nconst {byteArray2Int, byteArray2Hex} = require('./utils/int2ByteArray')\n\nclass ContractEncoder {\n    constructor() {\n        this._apiEncoder = new ApiEncoder()\n        this._bytecodeSerializer = new BytecodeSerializer(new Serializer())\n    }\n\n    /**\n     * Decodes serialized contract metadata and bytecode\n     *\n     * @param {string} data - Contract bytearray data in a canonical format.\n     * @returns {Object} Decoded contract metadata as POJO.\n    */\n    decode(data) {\n        const binData = this._apiEncoder.decodeWithType(data, 'contract_bytearray')\n        const decoded = RLP.decode(binData, true)\n        const stringDecoder = new TextDecoder()\n\n        return {\n            tag: byteArray2Int(decoded.data[0]),\n            vsn: byteArray2Int(decoded.data[1]),\n            sourceHash: byteArray2Hex(decoded.data[2]),\n            aevmTypeInfo: decoded.data[3],\n            compilerVersion: stringDecoder.decode(decoded.data[5]),\n            payable: Boolean(decoded.data[6][0]),\n            bytecode: this._bytecodeSerializer.deserialize(new Uint8Array(decoded.data[4]))\n        }\n    }\n}\n\nmodule.exports = ContractEncoder\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAME,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,kCAAkC,CAAC;AACtE,MAAM;EAACI,aAAa;EAAEC;AAAa,CAAC,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAEvE,MAAMM,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,WAAW,GAAG,IAAIP,UAAU,CAAC,CAAC;IACnC,IAAI,CAACQ,mBAAmB,GAAG,IAAIN,kBAAkB,CAAC,IAAID,UAAU,CAAC,CAAC,CAAC;EACvE;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIQ,MAAMA,CAACC,IAAI,EAAE;IACT,MAAMC,OAAO,GAAG,IAAI,CAACJ,WAAW,CAACK,cAAc,CAACF,IAAI,EAAE,oBAAoB,CAAC;IAC3E,MAAMG,OAAO,GAAGf,GAAG,CAACW,MAAM,CAACE,OAAO,EAAE,IAAI,CAAC;IACzC,MAAMG,aAAa,GAAG,IAAIC,WAAW,CAAC,CAAC;IAEvC,OAAO;MACHC,GAAG,EAAEb,aAAa,CAACU,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;MACnCO,GAAG,EAAEd,aAAa,CAACU,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;MACnCQ,UAAU,EAAEd,aAAa,CAACS,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;MAC1CS,YAAY,EAAEN,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC;MAC7BU,eAAe,EAAEN,aAAa,CAACL,MAAM,CAACI,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;MACtDW,OAAO,EAAEC,OAAO,CAACT,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpCa,QAAQ,EAAE,IAAI,CAACf,mBAAmB,CAACgB,WAAW,CAAC,IAAIC,UAAU,CAACZ,OAAO,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;EACL;AACJ;AAEAgB,MAAM,CAACC,OAAO,GAAGtB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\nimport { Tag } from \"./constants.mjs\";\nimport { uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee, address, pointers, entry, enumeration, mptree, shortUIntConst, string, encoded, raw, array, boolean, ctVersion, abiVersion, ttl, nonce, map, wrapped } from \"./field-types/index.mjs\";\nimport { Encoding } from \"../../utils/encoder.mjs\";\nimport { idTagToEncoding } from \"./field-types/address.mjs\";\nexport let ORACLE_TTL_TYPES = /*#__PURE__*/function (ORACLE_TTL_TYPES) {\n  ORACLE_TTL_TYPES[ORACLE_TTL_TYPES[\"delta\"] = 0] = \"delta\";\n  ORACLE_TTL_TYPES[ORACLE_TTL_TYPES[\"block\"] = 1] = \"block\";\n  return ORACLE_TTL_TYPES;\n}({});\n\n// # ORACLE\nexport const ORACLE_TTL = {\n  type: ORACLE_TTL_TYPES.delta,\n  value: 500\n};\nexport const QUERY_TTL = {\n  type: ORACLE_TTL_TYPES.delta,\n  value: 10\n};\nexport const RESPONSE_TTL = {\n  type: ORACLE_TTL_TYPES.delta,\n  value: 10\n};\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n\n};\nexport let CallReturnType = /*#__PURE__*/function (CallReturnType) {\n  CallReturnType[CallReturnType[\"Ok\"] = 0] = \"Ok\";\n  CallReturnType[CallReturnType[\"Error\"] = 1] = \"Error\";\n  CallReturnType[CallReturnType[\"Revert\"] = 2] = \"Revert\";\n  return CallReturnType;\n}({});\n\n// TODO: figure out how to omit overriding types of recursive fields\n\nconst entryAny = entry();\nconst entrySignedTx = entry(Tag.SignedTx);\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue));\nconst entryTreesPoi = entry(Tag.TreesPoi);\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract);\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account);\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall);\nconst mapChannels = map(Encoding.Channel, Tag.Channel);\nconst mapNames = map(Encoding.Name, Tag.Name);\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray)\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true)\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl: shortUInt,\n  pointers,\n  clientTtl: shortUInt,\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray)\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray)\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw)\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n  abiVersion\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee: coinAmount,\n  queryTtlType: enumeration(ORACLE_TTL_TYPES),\n  queryTtlValue: shortUInt,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator')\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State)\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray)\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId')\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray)\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress)\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle))\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree),\n  calls: wrapped(Tag.CallsMtree),\n  channels: wrapped(Tag.ChannelsMtree),\n  ns: wrapped(Tag.NameserviceMtree),\n  oracles: wrapped(Tag.OraclesMtree),\n  accounts: wrapped(Tag.AccountsMtree)\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray)\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash)\n}];","map":{"version":3,"names":["Tag","uInt","shortUInt","coinAmount","name","nameId","nameFee","deposit","gasLimit","gasPrice","fee","address","pointers","entry","enumeration","mptree","shortUIntConst","string","encoded","raw","array","boolean","ctVersion","abiVersion","ttl","nonce","map","wrapped","Encoding","idTagToEncoding","ORACLE_TTL_TYPES","ORACLE_TTL","type","delta","value","QUERY_TTL","RESPONSE_TTL","DRY_RUN_ACCOUNT","pub","amount","CallReturnType","entryAny","entrySignedTx","SignedTx","entryMtreeValueArray","MtreeValue","entryTreesPoi","TreesPoi","mapContracts","ContractAddress","Contract","mapAccounts","AccountAddress","Account","mapCalls","Bytearray","ContractCall","mapChannels","Channel","mapNames","Name","mapOracles","OracleAddress","Oracle","txSchema","tag","version","balance","flags","gaContract","gaAuthFun","ContractBytearray","signatures","encodedTx","SpendTx","senderId","recipientId","payload","accountId","nameTtl","status","clientTtl","NamePreclaimTx","commitmentId","Commitment","NameClaimTx","nameSalt","NameUpdateTx","NameTransferTx","NameRevokeTx","owner","code","log","active","referers","ContractCreateTx","ownerId","callData","ContractCallTx","callerId","contractId","callerNonce","height","gasUsed","returnValue","returnType","queryFormat","responseFormat","queryFee","oracleTtlValue","OracleRegisterTx","oracleTtlType","OracleExtendTx","oracleId","OracleQueryTx","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","OracleResponseTx","queryId","OracleQueryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","State","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","Transaction","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","ChannelForceProgressTx","update","offChainTrees","StateTrees","ChannelOffChainTx","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","ChannelOffChainUpdateTransfer","from","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","ChannelClientReconnectTx","role","pubkey","accounts","calls","channels","contracts","ns","oracles","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","Mtree","values","key","GaAttachTx","authFun","GaMetaTx","gaId","authData","tx","PayingForTx","payerId","GaMetaTxAuthData","txHash","TxHash"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\tx\\builder\\schema.ts"],"sourcesContent":["/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee,\n  address, pointers, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # ORACLE\nexport const ORACLE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 500 };\nexport const QUERY_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\nexport const RESPONSE_TTL = { type: ORACLE_TTL_TYPES.delta, value: 10 };\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl: shortUInt,\n  pointers,\n  clientTtl: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: enumeration(ORACLE_TTL_TYPES),\n  oracleTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee: coinAmount,\n  queryTtlType: enumeration(ORACLE_TTL_TYPES),\n  queryTtlValue: shortUInt,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: enumeration(ORACLE_TTL_TYPES),\n  responseTtlValue: shortUInt,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
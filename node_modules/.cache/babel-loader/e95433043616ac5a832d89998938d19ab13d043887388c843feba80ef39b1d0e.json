{"ast":null,"code":"const FateTag = require('../FateTag');\nconst FateTuple = require('../types/FateTuple');\nconst BaseSerializer = require('./BaseSerializer');\nconst RLPInt = require('../utils/RLPInt');\nclass TupleSerializer extends BaseSerializer {\n  serialize(tuple) {\n    const len = tuple.size;\n    if (len === 0) {\n      return [FateTag.EMPTY_TUPLE];\n    }\n    const elements = tuple.items.map(e => this.globalSerializer.serialize(e)).flat(Infinity);\n    if (len < 16) {\n      const prefix = len << 4 | FateTag.SHORT_TUPLE;\n      return [prefix, ...elements];\n    }\n    return [FateTag.LONG_TUPLE, ...RLPInt.encode(len - 16), ...elements];\n  }\n  deserializeStream(data, typeInfo) {\n    const buffer = new Uint8Array(data);\n    const prefix = buffer[0];\n    let len = 0n;\n    let rest = buffer.slice(1);\n    if (prefix === FateTag.EMPTY_TUPLE) {\n      return [new FateTuple(), rest];\n    }\n    if ((prefix & 0x0F) === FateTag.SHORT_TUPLE) {\n      len = (prefix & 0xF0) >> 4;\n    }\n    if (prefix === FateTag.LONG_TUPLE) {\n      [len, rest] = RLPInt.decode(buffer.slice(1));\n      len += 16n;\n    }\n    let valueTypes = [];\n    if (typeof typeInfo !== 'undefined') {\n      valueTypes = typeInfo.valueTypes;\n    }\n    const elements = [];\n    let el = null;\n    for (let i = 0n; i < len; i++) {\n      [el, rest] = this.globalSerializer.deserializeStream(rest, valueTypes[i]);\n      elements.push(el);\n    }\n    let type = typeInfo;\n    if (typeof typeInfo === 'undefined') {\n      type = elements.map(e => e.type);\n    }\n    return [new FateTuple(type, elements), rest];\n  }\n}\nmodule.exports = TupleSerializer;","map":{"version":3,"names":["FateTag","require","FateTuple","BaseSerializer","RLPInt","TupleSerializer","serialize","tuple","len","size","EMPTY_TUPLE","elements","items","map","e","globalSerializer","flat","Infinity","prefix","SHORT_TUPLE","LONG_TUPLE","encode","deserializeStream","data","typeInfo","buffer","Uint8Array","rest","slice","decode","valueTypes","el","i","push","type","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/TupleSerializer.js"],"sourcesContent":["const FateTag = require('../FateTag')\nconst FateTuple = require('../types/FateTuple')\nconst BaseSerializer = require('./BaseSerializer')\nconst RLPInt = require('../utils/RLPInt')\n\nclass TupleSerializer extends BaseSerializer {\n    serialize(tuple) {\n        const len = tuple.size\n        if (len === 0) {\n            return [FateTag.EMPTY_TUPLE]\n        }\n\n        const elements = tuple.items\n            .map(e => this.globalSerializer.serialize(e))\n            .flat(Infinity)\n\n        if (len < 16) {\n            const prefix = (len << 4) | FateTag.SHORT_TUPLE\n\n            return [\n                prefix,\n                ...elements\n            ]\n        }\n\n        return [\n            FateTag.LONG_TUPLE,\n            ...RLPInt.encode(len - 16),\n            ...elements\n        ]\n    }\n\n    deserializeStream(data, typeInfo) {\n        const buffer = new Uint8Array(data)\n        const prefix = buffer[0]\n        let len = 0n\n        let rest = buffer.slice(1)\n\n        if (prefix === FateTag.EMPTY_TUPLE) {\n            return [new FateTuple(), rest]\n        }\n\n        if ((prefix & 0x0F) === FateTag.SHORT_TUPLE) {\n            len = (prefix & 0xF0) >> 4\n        }\n\n        if (prefix === FateTag.LONG_TUPLE) {\n            [len, rest] = RLPInt.decode(buffer.slice(1))\n            len += 16n\n        }\n\n        let valueTypes = []\n        if (typeof typeInfo !== 'undefined') {\n            valueTypes = typeInfo.valueTypes\n        }\n\n        const elements = []\n        let el = null\n        for (let i = 0n; i < len; i++) {\n            [el, rest] = this.globalSerializer.deserializeStream(rest, valueTypes[i])\n            elements.push(el)\n        }\n\n        let type = typeInfo\n        if (typeof typeInfo === 'undefined') {\n            type = elements.map(e => e.type)\n        }\n\n        return [\n            new FateTuple(type, elements),\n            rest\n        ]\n    }\n}\n\nmodule.exports = TupleSerializer\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
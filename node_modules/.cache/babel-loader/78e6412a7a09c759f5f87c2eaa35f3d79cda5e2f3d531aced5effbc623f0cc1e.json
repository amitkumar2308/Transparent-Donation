{"ast":null,"code":"const {\n  hash\n} = require('../utils/hash');\nconst {\n  byteArray2Int\n} = require('../utils/int2ByteArray');\nconst TypeResolveError = require('../Errors/TypeResolveError');\nconst BaseDataFactory = require('./BaseDataFactory');\nconst DATA_TYPES = ['string', 'signature', 'bytes'];\nclass EventDataFactory extends BaseDataFactory {\n  supports({\n    name,\n    _valueTypes\n  }) {\n    return 'event' === name;\n  }\n  create({\n    variantType,\n    topics\n  }, data) {\n    const [nameHash, ...args] = topics;\n    if (typeof nameHash !== 'bigint') {\n      throw new TypeResolveError(`Event name hash (first topic) should be of type \"BigInt\", got \"${typeof nameHash}\" instead.`);\n    }\n    const idx = variantType.variants.map(v => byteArray2Int(hash(Object.keys(v)[0]))).findIndex(v => v === nameHash);\n    if (idx === -1) {\n      throw new TypeResolveError('Event name hash does not match any event variant constructor');\n    }\n    const variant = variantType.variants[idx];\n    const variantName = Object.keys(variant)[0];\n    const [argTypes] = Object.values(variant);\n    const resolvedArgs = argTypes.map(t => {\n      if (this._isData(t)) {\n        return data;\n      }\n      return args.shift();\n    });\n    return this.valueFactory.create(variantType, {\n      [variantName]: resolvedArgs\n    });\n  }\n  _isData(type) {\n    if (!DATA_TYPES.includes(type.name)) {\n      return false;\n    }\n    if (type.name === 'bytes' && type.size <= 32) {\n      return false;\n    }\n    return true;\n  }\n}\nmodule.exports = EventDataFactory;","map":{"version":3,"names":["hash","require","byteArray2Int","TypeResolveError","BaseDataFactory","DATA_TYPES","EventDataFactory","supports","name","_valueTypes","create","variantType","topics","data","nameHash","args","idx","variants","map","v","Object","keys","findIndex","variant","variantName","argTypes","values","resolvedArgs","t","_isData","shift","valueFactory","type","includes","size","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/DataFactory/EventDataFactory.js"],"sourcesContent":["const {hash} = require('../utils/hash')\nconst {byteArray2Int} = require('../utils/int2ByteArray')\nconst TypeResolveError = require('../Errors/TypeResolveError')\nconst BaseDataFactory = require('./BaseDataFactory')\n\nconst DATA_TYPES = [\n    'string',\n    'signature',\n    'bytes',\n]\n\nclass EventDataFactory extends BaseDataFactory {\n    supports({ name, _valueTypes }) {\n        return 'event' === name\n    }\n\n    create({variantType, topics}, data) {\n        const [nameHash, ...args] = topics\n\n        if (typeof nameHash !== 'bigint') {\n            throw new TypeResolveError(`Event name hash (first topic) should be of type \"BigInt\", got \"${typeof nameHash}\" instead.`)\n        }\n\n        const idx = variantType.variants\n            .map(v => byteArray2Int(hash(Object.keys(v)[0])))\n            .findIndex(v => v === nameHash)\n\n        if (idx === -1) {\n            throw new TypeResolveError('Event name hash does not match any event variant constructor')\n        }\n\n        const variant = variantType.variants[idx]\n        const variantName = Object.keys(variant)[0]\n        const [argTypes] = Object.values(variant)\n        const resolvedArgs = argTypes.map(t => {\n            if (this._isData(t)) {\n                return data\n            }\n\n            return args.shift()\n        })\n\n        return this.valueFactory.create(variantType, {[variantName]: resolvedArgs})\n    }\n\n    _isData(type) {\n        if (!DATA_TYPES.includes(type.name)) {\n            return false\n        }\n\n        if (type.name === 'bytes' && type.size <= 32) {\n            return false\n        }\n\n        return true\n    }\n}\n\nmodule.exports = EventDataFactory\n"],"mappings":"AAAA,MAAM;EAACA;AAAI,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AACvC,MAAM;EAACC;AAAa,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACzD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAC9D,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAMI,UAAU,GAAG,CACf,QAAQ,EACR,WAAW,EACX,OAAO,CACV;AAED,MAAMC,gBAAgB,SAASF,eAAe,CAAC;EAC3CG,QAAQA,CAAC;IAAEC,IAAI;IAAEC;EAAY,CAAC,EAAE;IAC5B,OAAO,OAAO,KAAKD,IAAI;EAC3B;EAEAE,MAAMA,CAAC;IAACC,WAAW;IAAEC;EAAM,CAAC,EAAEC,IAAI,EAAE;IAChC,MAAM,CAACC,QAAQ,EAAE,GAAGC,IAAI,CAAC,GAAGH,MAAM;IAElC,IAAI,OAAOE,QAAQ,KAAK,QAAQ,EAAE;MAC9B,MAAM,IAAIX,gBAAgB,CAAE,kEAAiE,OAAOW,QAAS,YAAW,CAAC;IAC7H;IAEA,MAAME,GAAG,GAAGL,WAAW,CAACM,QAAQ,CAC3BC,GAAG,CAACC,CAAC,IAAIjB,aAAa,CAACF,IAAI,CAACoB,MAAM,CAACC,IAAI,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAChDG,SAAS,CAACH,CAAC,IAAIA,CAAC,KAAKL,QAAQ,CAAC;IAEnC,IAAIE,GAAG,KAAK,CAAC,CAAC,EAAE;MACZ,MAAM,IAAIb,gBAAgB,CAAC,8DAA8D,CAAC;IAC9F;IAEA,MAAMoB,OAAO,GAAGZ,WAAW,CAACM,QAAQ,CAACD,GAAG,CAAC;IACzC,MAAMQ,WAAW,GAAGJ,MAAM,CAACC,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAM,CAACE,QAAQ,CAAC,GAAGL,MAAM,CAACM,MAAM,CAACH,OAAO,CAAC;IACzC,MAAMI,YAAY,GAAGF,QAAQ,CAACP,GAAG,CAACU,CAAC,IAAI;MACnC,IAAI,IAAI,CAACC,OAAO,CAACD,CAAC,CAAC,EAAE;QACjB,OAAOf,IAAI;MACf;MAEA,OAAOE,IAAI,CAACe,KAAK,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,IAAI,CAACC,YAAY,CAACrB,MAAM,CAACC,WAAW,EAAE;MAAC,CAACa,WAAW,GAAGG;IAAY,CAAC,CAAC;EAC/E;EAEAE,OAAOA,CAACG,IAAI,EAAE;IACV,IAAI,CAAC3B,UAAU,CAAC4B,QAAQ,CAACD,IAAI,CAACxB,IAAI,CAAC,EAAE;MACjC,OAAO,KAAK;IAChB;IAEA,IAAIwB,IAAI,CAACxB,IAAI,KAAK,OAAO,IAAIwB,IAAI,CAACE,IAAI,IAAI,EAAE,EAAE;MAC1C,OAAO,KAAK;IAChB;IAEA,OAAO,IAAI;EACf;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAG9B,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const FateTuple = require('../types/FateTuple');\nconst FateTypeError = require('../Errors/FateTypeError');\nconst BaseDataFactory = require('./BaseDataFactory');\nclass TupleDataFactory extends BaseDataFactory {\n  supports({\n    name,\n    _valueTypes\n  }) {\n    return 'tuple' === name;\n  }\n  create(type, value) {\n    if (!Array.isArray(value)) {\n      throw new FateTypeError(type.name, `Fate tuple must be an Array, got ${value} instead`);\n    }\n    const resolvedValue = type.valueTypes.map((t, i) => {\n      return this.valueFactory.create(t, value[i]);\n    });\n\n    // Unbox singleton tuples and records\n    // https://github.com/aeternity/aesophia/pull/205\n    // https://github.com/aeternity/aesophia/commit/a403a9d227ac56266cf5bb8fbc916f17e6141d15\n    if (resolvedValue.length === 1) {\n      return resolvedValue[0];\n    }\n    return new FateTuple(type.valueTypes, resolvedValue);\n  }\n}\nmodule.exports = TupleDataFactory;","map":{"version":3,"names":["FateTuple","require","FateTypeError","BaseDataFactory","TupleDataFactory","supports","name","_valueTypes","create","type","value","Array","isArray","resolvedValue","valueTypes","map","t","i","valueFactory","length","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/DataFactory/TupleDataFactory.js"],"sourcesContent":["const FateTuple = require('../types/FateTuple')\nconst FateTypeError = require('../Errors/FateTypeError')\nconst BaseDataFactory = require('./BaseDataFactory')\n\nclass TupleDataFactory extends BaseDataFactory {\n    supports({ name, _valueTypes }) {\n        return 'tuple' === name\n    }\n\n    create(type, value) {\n        if (!Array.isArray(value)) {\n            throw new FateTypeError(\n                type.name,\n                `Fate tuple must be an Array, got ${value} instead`\n            )\n        }\n\n        const resolvedValue = type.valueTypes.map((t, i) => {\n            return this.valueFactory.create(t, value[i])\n        })\n\n        // Unbox singleton tuples and records\n        // https://github.com/aeternity/aesophia/pull/205\n        // https://github.com/aeternity/aesophia/commit/a403a9d227ac56266cf5bb8fbc916f17e6141d15\n        if (resolvedValue.length === 1) {\n            return resolvedValue[0]\n        }\n\n        return new FateTuple(type.valueTypes, resolvedValue)\n    }\n}\n\nmodule.exports = TupleDataFactory\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAMC,aAAa,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAME,eAAe,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAMG,gBAAgB,SAASD,eAAe,CAAC;EAC3CE,QAAQA,CAAC;IAAEC,IAAI;IAAEC;EAAY,CAAC,EAAE;IAC5B,OAAO,OAAO,KAAKD,IAAI;EAC3B;EAEAE,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIR,aAAa,CACnBO,IAAI,CAACH,IAAI,EACR,oCAAmCI,KAAM,UAC9C,CAAC;IACL;IAEA,MAAMG,aAAa,GAAGJ,IAAI,CAACK,UAAU,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAChD,OAAO,IAAI,CAACC,YAAY,CAACV,MAAM,CAACQ,CAAC,EAAEN,KAAK,CAACO,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;;IAEF;IACA;IACA;IACA,IAAIJ,aAAa,CAACM,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAON,aAAa,CAAC,CAAC,CAAC;IAC3B;IAEA,OAAO,IAAIb,SAAS,CAACS,IAAI,CAACK,UAAU,EAAED,aAAa,CAAC;EACxD;AACJ;AAEAO,MAAM,CAACC,OAAO,GAAGjB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
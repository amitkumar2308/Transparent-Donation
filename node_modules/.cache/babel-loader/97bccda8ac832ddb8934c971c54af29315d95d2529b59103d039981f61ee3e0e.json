{"ast":null,"code":"import { Contract as ContractMapper, SophiaCallResultInput as SophiaCallResultInputMapper, BytecodeCallResultInput as BytecodeCallResultInputMapper, FunctionCallInput as FunctionCallInputMapper, DecodeCalldataBytecode as DecodeCalldataBytecodeMapper, DecodeCalldataSource as DecodeCalldataSourceMapper, ByteCodeInput as ByteCodeInputMapper, ValidateByteCodeInput as ValidateByteCodeInputMapper } from \"../models/mappers.mjs\";\nexport const contentType = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const body = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\nexport const accept = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const $host = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const body1 = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\nexport const body2 = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\nexport const body3 = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\nexport const body4 = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\nexport const body5 = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\nexport const body6 = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\nexport const body7 = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};","map":{"version":3,"names":["Contract","ContractMapper","SophiaCallResultInput","SophiaCallResultInputMapper","BytecodeCallResultInput","BytecodeCallResultInputMapper","FunctionCallInput","FunctionCallInputMapper","DecodeCalldataBytecode","DecodeCalldataBytecodeMapper","DecodeCalldataSource","DecodeCalldataSourceMapper","ByteCodeInput","ByteCodeInputMapper","ValidateByteCodeInput","ValidateByteCodeInputMapper","contentType","parameterPath","mapper","defaultValue","isConstant","serializedName","type","name","body","accept","$host","required","skipEncoding","body1","body2","body3","body4","body5","body6","body7"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\apis\\compiler\\models\\parameters.ts"],"sourcesContent":["import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};\n"],"mappings":"SAEEA,QAAQ,IAAIC,cAAc,EAC1BC,qBAAqB,IAAIC,2BAA2B,EACpDC,uBAAuB,IAAIC,6BAA6B,EACxDC,iBAAiB,IAAIC,uBAAuB,EAC5CC,sBAAsB,IAAIC,4BAA4B,EACtDC,oBAAoB,IAAIC,0BAA0B,EAClDC,aAAa,IAAIC,mBAAmB,EACpCC,qBAAqB,IAAIC,2BAA2B;AAGtD,OAAO,MAAMC,WAA+B,GAAG;EAC7CC,aAAa,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;EACzCC,MAAM,EAAE;IACNC,YAAY,EAAE,kBAAkB;IAChCC,UAAU,EAAE,IAAI;IAChBC,cAAc,EAAE,cAAc;IAC9BC,IAAI,EAAE;MACJC,IAAI,EAAE;IACR;EACF;AACF,CAAC;AAED,OAAO,MAAMC,IAAwB,GAAG;EACtCP,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEjB;AACV,CAAC;AAED,OAAO,MAAMwB,MAA0B,GAAG;EACxCR,aAAa,EAAE,QAAQ;EACvBC,MAAM,EAAE;IACNC,YAAY,EAAE,kBAAkB;IAChCC,UAAU,EAAE,IAAI;IAChBC,cAAc,EAAE,QAAQ;IACxBC,IAAI,EAAE;MACJC,IAAI,EAAE;IACR;EACF;AACF,CAAC;AAED,OAAO,MAAMG,KAA4B,GAAG;EAC1CT,aAAa,EAAE,OAAO;EACtBC,MAAM,EAAE;IACNG,cAAc,EAAE,OAAO;IACvBM,QAAQ,EAAE,IAAI;IACdL,IAAI,EAAE;MACJC,IAAI,EAAE;IACR;EACF,CAAC;EACDK,YAAY,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,KAAyB,GAAG;EACvCZ,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEf;AACV,CAAC;AAED,OAAO,MAAM2B,KAAyB,GAAG;EACvCb,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEb;AACV,CAAC;AAED,OAAO,MAAM0B,KAAyB,GAAG;EACvCd,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEX;AACV,CAAC;AAED,OAAO,MAAMyB,KAAyB,GAAG;EACvCf,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAET;AACV,CAAC;AAED,OAAO,MAAMwB,KAAyB,GAAG;EACvChB,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEP;AACV,CAAC;AAED,OAAO,MAAMuB,KAAyB,GAAG;EACvCjB,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEL;AACV,CAAC;AAED,OAAO,MAAMsB,KAAyB,GAAG;EACvClB,aAAa,EAAE,MAAM;EACrBC,MAAM,EAAEH;AACV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
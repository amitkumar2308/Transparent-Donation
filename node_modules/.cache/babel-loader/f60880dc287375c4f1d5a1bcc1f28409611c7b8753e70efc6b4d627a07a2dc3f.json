{"ast":null,"code":"const {\n  int2ByteArray,\n  byteArray2IntBE\n} = require('./int2ByteArray');\nconst CURVES = {\n  r: {\n    R: 1n << 256n,\n    N: 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n\n  },\n  p: {\n    R: 1n << 384n,\n    /* eslint-disable-next-line max-len */\n    N: 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn\n  }\n};\nconst xgcd = (a, b) => {\n  if (b === 0n) {\n    return [1n, 0n, a];\n  }\n  const [x, y, d] = xgcd(b, a % b);\n  return [y, x - y * (a / b), d];\n};\nconst invmod = (a, n) => {\n  const [X, _Y, _D] = xgcd(a, n);\n\n  // To ensure positive result\n  return (X + n) % n;\n};\n\n// Scalar(a) = aR mod N\nconst int2MontBytes = (value, curveType) => {\n  const curve = CURVES[curveType];\n  const a = BigInt(value);\n  const m = a * curve.R % curve.N;\n  return int2ByteArray(m);\n};\n\n// a = ã · R^−1 mod N\nconst montBytes2Int = (value, curveType) => {\n  const curve = CURVES[curveType];\n  const a = byteArray2IntBE(value);\n  const Rinv = invmod(curve.R, curve.N);\n  return a * Rinv % curve.N;\n};\nmodule.exports = {\n  int2MontBytes,\n  montBytes2Int\n};","map":{"version":3,"names":["int2ByteArray","byteArray2IntBE","require","CURVES","r","R","N","p","xgcd","a","b","x","y","d","invmod","n","X","_Y","_D","int2MontBytes","value","curveType","curve","BigInt","m","montBytes2Int","Rinv","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/utils/bls12381.js"],"sourcesContent":["const {int2ByteArray, byteArray2IntBE} = require('./int2ByteArray')\n\nconst CURVES = {\n    r: {\n        R: 1n << 256n,\n        N: 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n,\n    },\n    p: {\n        R: 1n << 384n,\n        /* eslint-disable-next-line max-len */\n        N: 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn,\n    }\n}\n\nconst xgcd = (a, b) => {\n    if (b === 0n) {\n        return [1n, 0n, a]\n    }\n\n    const [x, y, d] = xgcd(b, a % b)\n\n    return [y, x - y * (a / b), d]\n}\n\nconst invmod = (a, n) => {\n    const [X, _Y, _D] = xgcd(a, n)\n\n    // To ensure positive result\n    return (X + n) % n\n}\n\n// Scalar(a) = aR mod N\nconst int2MontBytes = (value, curveType) => {\n    const curve = CURVES[curveType]\n    const a = BigInt(value)\n    const m = (a * curve.R) % curve.N\n\n    return int2ByteArray(m)\n}\n\n// a = ã · R^−1 mod N\nconst montBytes2Int = (value, curveType) => {\n    const curve = CURVES[curveType]\n    const a = byteArray2IntBE(value)\n    const Rinv = invmod(curve.R, curve.N)\n\n    return (a * Rinv) % curve.N\n}\n\nmodule.exports = {\n    int2MontBytes,\n    montBytes2Int,\n}\n"],"mappings":"AAAA,MAAM;EAACA,aAAa;EAAEC;AAAe,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAEnE,MAAMC,MAAM,GAAG;EACXC,CAAC,EAAE;IACCC,CAAC,EAAE,EAAE,IAAI,IAAI;IACbC,CAAC,EAAE;EACP,CAAC;EACDC,CAAC,EAAE;IACCF,CAAC,EAAE,EAAE,IAAI,IAAI;IACb;IACAC,CAAC,EAAE;EACP;AACJ,CAAC;AAED,MAAME,IAAI,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EACnB,IAAIA,CAAC,KAAK,EAAE,EAAE;IACV,OAAO,CAAC,EAAE,EAAE,EAAE,EAAED,CAAC,CAAC;EACtB;EAEA,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGL,IAAI,CAACE,CAAC,EAAED,CAAC,GAAGC,CAAC,CAAC;EAEhC,OAAO,CAACE,CAAC,EAAED,CAAC,GAAGC,CAAC,IAAIH,CAAC,GAAGC,CAAC,CAAC,EAAEG,CAAC,CAAC;AAClC,CAAC;AAED,MAAMC,MAAM,GAAGA,CAACL,CAAC,EAAEM,CAAC,KAAK;EACrB,MAAM,CAACC,CAAC,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGV,IAAI,CAACC,CAAC,EAAEM,CAAC,CAAC;;EAE9B;EACA,OAAO,CAACC,CAAC,GAAGD,CAAC,IAAIA,CAAC;AACtB,CAAC;;AAED;AACA,MAAMI,aAAa,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;EACxC,MAAMC,KAAK,GAAGnB,MAAM,CAACkB,SAAS,CAAC;EAC/B,MAAMZ,CAAC,GAAGc,MAAM,CAACH,KAAK,CAAC;EACvB,MAAMI,CAAC,GAAIf,CAAC,GAAGa,KAAK,CAACjB,CAAC,GAAIiB,KAAK,CAAChB,CAAC;EAEjC,OAAON,aAAa,CAACwB,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGA,CAACL,KAAK,EAAEC,SAAS,KAAK;EACxC,MAAMC,KAAK,GAAGnB,MAAM,CAACkB,SAAS,CAAC;EAC/B,MAAMZ,CAAC,GAAGR,eAAe,CAACmB,KAAK,CAAC;EAChC,MAAMM,IAAI,GAAGZ,MAAM,CAACQ,KAAK,CAACjB,CAAC,EAAEiB,KAAK,CAAChB,CAAC,CAAC;EAErC,OAAQG,CAAC,GAAGiB,IAAI,GAAIJ,KAAK,CAAChB,CAAC;AAC/B,CAAC;AAEDqB,MAAM,CAACC,OAAO,GAAG;EACbT,aAAa;EACbM;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
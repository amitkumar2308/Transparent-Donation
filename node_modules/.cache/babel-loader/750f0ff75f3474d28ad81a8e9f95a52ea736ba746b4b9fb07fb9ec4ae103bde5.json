{"ast":null,"code":"const BaseSerializer = require('./BaseSerializer');\nconst {\n  FateTypeTuple,\n  FateTypeMap\n} = require('../FateTypes');\nconst FateMap = require('../types/FateMap');\nconst FateTuple = require('../types/FateTuple');\nconst FateSet = require('../types/FateSet');\n\n// This serializer takes advantages of the singular tuple optimization directly\n// An alternative implementation would be building the full structure\n// and pass it upstream for optimization.\n// Unbox singleton tuples and records\n// https://github.com/aeternity/aesophia/pull/205\n// https://github.com/aeternity/aesophia/commit/a403a9d227ac56266cf5bb8fbc916f17e6141d15\n\nclass SetSerializer extends BaseSerializer {\n  serialize(set) {\n    return this.globalSerializer.serialize(new FateMap(set.itemsType, FateTypeTuple(), set.items.map(i => [i, new FateTuple()])));\n  }\n  deserializeStream(data, typeInfo) {\n    const mapType = FateTypeMap(typeInfo.valuesType, FateTypeTuple());\n    const [map, rest] = this.globalSerializer.deserializeStream(data, mapType);\n    return [new FateSet(typeInfo.valuesType, map.keys), rest];\n  }\n}\nmodule.exports = SetSerializer;","map":{"version":3,"names":["BaseSerializer","require","FateTypeTuple","FateTypeMap","FateMap","FateTuple","FateSet","SetSerializer","serialize","set","globalSerializer","itemsType","items","map","i","deserializeStream","data","typeInfo","mapType","valuesType","rest","keys","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/SetSerializer.js"],"sourcesContent":["const BaseSerializer = require('./BaseSerializer')\nconst {FateTypeTuple, FateTypeMap} = require('../FateTypes')\nconst FateMap = require('../types/FateMap')\nconst FateTuple = require('../types/FateTuple')\nconst FateSet = require('../types/FateSet')\n\n// This serializer takes advantages of the singular tuple optimization directly\n// An alternative implementation would be building the full structure\n// and pass it upstream for optimization.\n// Unbox singleton tuples and records\n// https://github.com/aeternity/aesophia/pull/205\n// https://github.com/aeternity/aesophia/commit/a403a9d227ac56266cf5bb8fbc916f17e6141d15\n\nclass SetSerializer extends BaseSerializer {\n    serialize(set) {\n        return this.globalSerializer.serialize(new FateMap(\n            set.itemsType,\n            FateTypeTuple(),\n            set.items.map(i => [i, new FateTuple()])\n        ))\n    }\n\n    deserializeStream(data, typeInfo) {\n        const mapType = FateTypeMap(typeInfo.valuesType, FateTypeTuple())\n        const [map, rest] = this.globalSerializer.deserializeStream(data, mapType)\n\n        return [\n            new FateSet(typeInfo.valuesType, map.keys),\n            rest\n        ]\n    }\n}\n\nmodule.exports = SetSerializer\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAM;EAACC,aAAa;EAAEC;AAAW,CAAC,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC5D,MAAMG,OAAO,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMI,SAAS,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAMK,OAAO,GAAGL,OAAO,CAAC,kBAAkB,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMM,aAAa,SAASP,cAAc,CAAC;EACvCQ,SAASA,CAACC,GAAG,EAAE;IACX,OAAO,IAAI,CAACC,gBAAgB,CAACF,SAAS,CAAC,IAAIJ,OAAO,CAC9CK,GAAG,CAACE,SAAS,EACbT,aAAa,CAAC,CAAC,EACfO,GAAG,CAACG,KAAK,CAACC,GAAG,CAACC,CAAC,IAAI,CAACA,CAAC,EAAE,IAAIT,SAAS,CAAC,CAAC,CAAC,CAC3C,CAAC,CAAC;EACN;EAEAU,iBAAiBA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC9B,MAAMC,OAAO,GAAGf,WAAW,CAACc,QAAQ,CAACE,UAAU,EAAEjB,aAAa,CAAC,CAAC,CAAC;IACjE,MAAM,CAACW,GAAG,EAAEO,IAAI,CAAC,GAAG,IAAI,CAACV,gBAAgB,CAACK,iBAAiB,CAACC,IAAI,EAAEE,OAAO,CAAC;IAE1E,OAAO,CACH,IAAIZ,OAAO,CAACW,QAAQ,CAACE,UAAU,EAAEN,GAAG,CAACQ,IAAI,CAAC,EAC1CD,IAAI,CACP;EACL;AACJ;AAEAE,MAAM,CAACC,OAAO,GAAGhB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}
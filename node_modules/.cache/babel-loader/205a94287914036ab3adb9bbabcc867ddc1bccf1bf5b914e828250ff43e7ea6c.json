{"ast":null,"code":"const BaseSerializer = require('./BaseSerializer');\nconst BytesSerializer = require('./BytesSerializer');\nconst FateBls12381Fr = require('../types/FateBls12381Fr');\nconst FateBls12381Fp = require('../types/FateBls12381Fp');\nconst bytesSerializer = new BytesSerializer();\nconst factory = (type, data) => {\n  switch (type.name) {\n    case 'bls12_381.fr':\n      return new FateBls12381Fr(data);\n    case 'bls12_381.fp':\n      return new FateBls12381Fp(data);\n    default:\n      throw new Error(`Unsupported type \"${type.name}\"`);\n  }\n};\nclass Bls12381FieldSerializer extends BaseSerializer {\n  serialize(bytes) {\n    return bytesSerializer.serialize(bytes);\n  }\n  deserializeStream(data, typeInfo) {\n    const [bytes, rest] = bytesSerializer.deserializeStream(data);\n    return [factory(typeInfo, bytes.valueOf()), rest];\n  }\n}\nmodule.exports = Bls12381FieldSerializer;","map":{"version":3,"names":["BaseSerializer","require","BytesSerializer","FateBls12381Fr","FateBls12381Fp","bytesSerializer","factory","type","data","name","Error","Bls12381FieldSerializer","serialize","bytes","deserializeStream","typeInfo","rest","valueOf","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/Bls12381FieldSerializer.js"],"sourcesContent":["const BaseSerializer = require('./BaseSerializer')\nconst BytesSerializer = require('./BytesSerializer')\nconst FateBls12381Fr = require('../types/FateBls12381Fr')\nconst FateBls12381Fp = require('../types/FateBls12381Fp')\n\nconst bytesSerializer = new BytesSerializer()\n\nconst factory = (type, data) => {\n    switch (type.name) {\n    case 'bls12_381.fr':\n        return new FateBls12381Fr(data)\n    case 'bls12_381.fp':\n        return new FateBls12381Fp(data)\n    default:\n        throw new Error(`Unsupported type \"${type.name}\"`)\n    }\n}\n\nclass Bls12381FieldSerializer extends BaseSerializer {\n    serialize(bytes) {\n        return bytesSerializer.serialize(bytes)\n    }\n\n    deserializeStream(data, typeInfo) {\n        const [bytes, rest] = bytesSerializer.deserializeStream(data)\n\n        return [\n            factory(typeInfo, bytes.valueOf()),\n            rest\n        ]\n    }\n}\n\nmodule.exports = Bls12381FieldSerializer\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAME,cAAc,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACzD,MAAMG,cAAc,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAEzD,MAAMI,eAAe,GAAG,IAAIH,eAAe,CAAC,CAAC;AAE7C,MAAMI,OAAO,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EAC5B,QAAQD,IAAI,CAACE,IAAI;IACjB,KAAK,cAAc;MACf,OAAO,IAAIN,cAAc,CAACK,IAAI,CAAC;IACnC,KAAK,cAAc;MACf,OAAO,IAAIJ,cAAc,CAACI,IAAI,CAAC;IACnC;MACI,MAAM,IAAIE,KAAK,CAAE,qBAAoBH,IAAI,CAACE,IAAK,GAAE,CAAC;EACtD;AACJ,CAAC;AAED,MAAME,uBAAuB,SAASX,cAAc,CAAC;EACjDY,SAASA,CAACC,KAAK,EAAE;IACb,OAAOR,eAAe,CAACO,SAAS,CAACC,KAAK,CAAC;EAC3C;EAEAC,iBAAiBA,CAACN,IAAI,EAAEO,QAAQ,EAAE;IAC9B,MAAM,CAACF,KAAK,EAAEG,IAAI,CAAC,GAAGX,eAAe,CAACS,iBAAiB,CAACN,IAAI,CAAC;IAE7D,OAAO,CACHF,OAAO,CAACS,QAAQ,EAAEF,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,EAClCD,IAAI,CACP;EACL;AACJ;AAEAE,MAAM,CAACC,OAAO,GAAGR,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
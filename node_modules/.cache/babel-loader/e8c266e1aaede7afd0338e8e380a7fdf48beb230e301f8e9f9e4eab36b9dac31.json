{"ast":null,"code":"import { produceNameId, isNameValid } from \"../helpers.mjs\";\nimport address from \"./address.mjs\";\nimport { Encoding } from \"../../../utils/encoder.mjs\";\nconst addressName = address(Encoding.Name);\nexport default {\n  ...addressName,\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value) {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  }\n};","map":{"version":3,"names":["produceNameId","isNameValid","address","Encoding","addressName","Name","serialize","value"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\tx\\builder\\field-types\\name-id.ts"],"sourcesContent":["import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n"],"mappings":"SACSA,aAAa,EAAEC,WAAW;AAAA,OAC5BC,OAAO;AAAA,SACIC,QAAQ;AAE1B,MAAMC,WAAW,GAAGF,OAAO,CAACC,QAAQ,CAACE,IAAI,CAAC;AAE1C,eAAe;EACb,GAAGD,WAAW;EAEd;AACF;AACA;EACEE,SAASA,CAACC,KAA8B,EAAU;IAChD,OAAOH,WAAW,CAACE,SAAS,CAACL,WAAW,CAACM,KAAK,CAAC,GAAGP,aAAa,CAACO,KAAK,CAAC,GAAGA,KAAK,CAAC;EACjF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
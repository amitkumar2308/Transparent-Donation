{"ast":null,"code":"import _buffer from \"buffer\";\nconst {\n  Buffer: _Buffer\n} = _buffer;\nimport BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from \"./errors.mjs\";\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val) {\n  let big = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return _Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return _Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return _Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}","map":{"version":3,"names":["BigNumber","NoSerializerFoundError","TypeError","toBytes","val","big","arguments","length","undefined","_Buffer","from","Number","isInteger","isBigNumber","toFixed","hexString","toString"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\utils\\bytes.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n"],"mappings":";;;;AAAA,OAAOA,SAAS,MAAM,cAAc;AAAC,SAC5BC,sBAAsB,EAAEC,SAAS;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,GAAwC,EAAuB;EAAA,IAArBC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC3E;EACA;EACA;;EAEA,IAAIF,GAAG,IAAI,IAAI,EAAE,OAAOK,OAAA,CAAOC,IAAI,CAAC,EAAE,CAAC;EACvC,IAAIC,MAAM,CAACC,SAAS,CAACR,GAAG,CAAC,IAAIJ,SAAS,CAACa,WAAW,CAACT,GAAG,CAAC,IAAIC,GAAG,EAAE;IAC9D,IAAI,CAACL,SAAS,CAACa,WAAW,CAACT,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAIJ,SAAS,CAACI,GAAG,CAAC;IACzD,IAAI,CAACA,GAAG,CAACQ,SAAS,CAAC,CAAC,EAAE,MAAM,IAAIV,SAAS,CAAE,iCAAgCE,GAAG,CAACU,OAAO,CAAC,CAAE,EAAC,CAAC;IAC3F,IAAIC,SAAS,GAAGX,GAAG,CAACY,QAAQ,CAAC,EAAE,CAAC;IAChC,IAAID,SAAS,CAACR,MAAM,GAAG,CAAC,KAAK,CAAC,EAAEQ,SAAS,GAAI,IAAGA,SAAU,EAAC;IAC3D,OAAON,OAAA,CAAOC,IAAI,CAACK,SAAS,EAAE,KAAK,CAAC;EACtC;EACA,IAAI,OAAOX,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOK,OAAA,CAAOC,IAAI,CAACN,GAAG,CAAC;EACzB;EACA,MAAM,IAAIH,sBAAsB,CAAC,CAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const InternalResolver = require('../TypeResolver');\nclass TypeResolver {\n  constructor() {\n    this._internalResolver = new InternalResolver();\n  }\n\n  /**\n   * Resolves ACI type format to opaque (internal) type structure\n   * to allow usage of other library APIs that needs type information.\n   * The opaque type shouldn't be used for anything else (including storing) than passing it\n   * as library argument as its structure is not guaranteed.\n   *\n   * @example\n   * const type = resolver.resolveType({map: ['int', 'bool']})\n   * const encoded = ContractByteArrayEncoder.encode(new Map([[7n, false]]), type)\n   * console.log(`Encoded data: ${encoded}`)\n   * // Outputs:\n   * // Encoded data: cb_LwEOfzGit9U=\n   *\n   * @param {object} type - The type information in ACI format\n   * @param {object} vars - Additional type variables, templates etc.\n   * @returns {object} Opaque type information structure\n  */\n  resolveType(type, vars = {}) {\n    return this._internalResolver.resolveType(type, vars);\n  }\n}\nmodule.exports = TypeResolver;","map":{"version":3,"names":["InternalResolver","require","TypeResolver","constructor","_internalResolver","resolveType","type","vars","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/api/TypeResolver.js"],"sourcesContent":["const InternalResolver = require('../TypeResolver')\n\nclass TypeResolver {\n    constructor() {\n        this._internalResolver = new InternalResolver()\n    }\n\n    /**\n     * Resolves ACI type format to opaque (internal) type structure\n     * to allow usage of other library APIs that needs type information.\n     * The opaque type shouldn't be used for anything else (including storing) than passing it\n     * as library argument as its structure is not guaranteed.\n     *\n     * @example\n     * const type = resolver.resolveType({map: ['int', 'bool']})\n     * const encoded = ContractByteArrayEncoder.encode(new Map([[7n, false]]), type)\n     * console.log(`Encoded data: ${encoded}`)\n     * // Outputs:\n     * // Encoded data: cb_LwEOfzGit9U=\n     *\n     * @param {object} type - The type information in ACI format\n     * @param {object} vars - Additional type variables, templates etc.\n     * @returns {object} Opaque type information structure\n    */\n    resolveType(type, vars = {}) {\n        return this._internalResolver.resolveType(type, vars)\n    }\n}\n\nmodule.exports = TypeResolver\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAEnD,MAAMC,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,iBAAiB,GAAG,IAAIJ,gBAAgB,CAAC,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAWA,CAACC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IACzB,OAAO,IAAI,CAACH,iBAAiB,CAACC,WAAW,CAACC,IAAI,EAAEC,IAAI,CAAC;EACzD;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGP,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}
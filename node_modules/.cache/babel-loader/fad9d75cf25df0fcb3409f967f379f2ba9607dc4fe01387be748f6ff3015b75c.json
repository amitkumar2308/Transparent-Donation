{"ast":null,"code":"const InternalEncoder = require('../ContractByteArrayEncoder');\nclass ContractByteArrayEncoder {\n  constructor() {\n    this._internalEncoder = new InternalEncoder();\n  }\n\n  /**\n   * Encode FATE data to contract bytearray.\n   *\n   * @example\n   * const resolver = new TypeResolver()\n   * const encoded = encoder.encode(\"whoolymoly\", resolver.resolveType('string'))\n   * console.log(`Encoded data: ${encoded}`)\n   * // Outputs:\n   * // Encoded data: cb_KXdob29seW1vbHlGazSE\n   *\n   * @param {any} value - Value as Javascript data structures. See README.md\n   * @param {object} type - Opaque type information provided by TypeResolver. See README.md\n   * @returns {string} Encoded contract byte array\n  */\n  encodeWithType(value, type) {\n    return this._internalEncoder.encode(type, value);\n  }\n\n  /**\n   * Decodes arbitrary contract bytearray data using only builtin FATE type information\n   *\n   * Note that:\n   * - Variants are not annotated with constructor names\n   * - Record keys are lost\n   * - Any custom type information is lost\n   * - STL type information is lost: i.e. Chain, AENS, Set, BLS12_381\n   *\n   * @example\n   * const decoded = encoder.decode('cb_KXdob29seW1vbHlGazSE')\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} data - Contract bytearray data in a canonical format.\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decode(data) {\n    return this._internalEncoder.decode(data);\n  }\n\n  /**\n   * Decodes arbitrary contract bytearray data with type information.\n   *\n   * @example\n   * const resolver = new TypeResolver()\n   * const type = resolver.resolveType('string')\n   * const decoded = encoder.decodeWithType('cb_KXdob29seW1vbHlGazSE', type)\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} data - Contract bytearray data in a canonical format.\n   * @param {object} type - Opaque type information provided by TypeResolver. See README.md\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decodeWithType(data, type) {\n    return this._internalEncoder.decodeWithType(data, type);\n  }\n}\nmodule.exports = ContractByteArrayEncoder;","map":{"version":3,"names":["InternalEncoder","require","ContractByteArrayEncoder","constructor","_internalEncoder","encodeWithType","value","type","encode","decode","data","decodeWithType","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/api/ContractByteArrayEncoder.js"],"sourcesContent":["const InternalEncoder = require('../ContractByteArrayEncoder')\n\nclass ContractByteArrayEncoder {\n    constructor() {\n        this._internalEncoder = new InternalEncoder()\n    }\n\n    /**\n     * Encode FATE data to contract bytearray.\n     *\n     * @example\n     * const resolver = new TypeResolver()\n     * const encoded = encoder.encode(\"whoolymoly\", resolver.resolveType('string'))\n     * console.log(`Encoded data: ${encoded}`)\n     * // Outputs:\n     * // Encoded data: cb_KXdob29seW1vbHlGazSE\n     *\n     * @param {any} value - Value as Javascript data structures. See README.md\n     * @param {object} type - Opaque type information provided by TypeResolver. See README.md\n     * @returns {string} Encoded contract byte array\n    */\n    encodeWithType(value, type) {\n        return this._internalEncoder.encode(type, value)\n    }\n\n    /**\n     * Decodes arbitrary contract bytearray data using only builtin FATE type information\n     *\n     * Note that:\n     * - Variants are not annotated with constructor names\n     * - Record keys are lost\n     * - Any custom type information is lost\n     * - STL type information is lost: i.e. Chain, AENS, Set, BLS12_381\n     *\n     * @example\n     * const decoded = encoder.decode('cb_KXdob29seW1vbHlGazSE')\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} data - Contract bytearray data in a canonical format.\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decode(data) {\n        return this._internalEncoder.decode(data)\n    }\n\n    /**\n     * Decodes arbitrary contract bytearray data with type information.\n     *\n     * @example\n     * const resolver = new TypeResolver()\n     * const type = resolver.resolveType('string')\n     * const decoded = encoder.decodeWithType('cb_KXdob29seW1vbHlGazSE', type)\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} data - Contract bytearray data in a canonical format.\n     * @param {object} type - Opaque type information provided by TypeResolver. See README.md\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decodeWithType(data, type) {\n        return this._internalEncoder.decodeWithType(data, type)\n    }\n}\n\nmodule.exports = ContractByteArrayEncoder\n"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAE9D,MAAMC,wBAAwB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,gBAAgB,GAAG,IAAIJ,eAAe,CAAC,CAAC;EACjD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,cAAcA,CAACC,KAAK,EAAEC,IAAI,EAAE;IACxB,OAAO,IAAI,CAACH,gBAAgB,CAACI,MAAM,CAACD,IAAI,EAAED,KAAK,CAAC;EACpD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,MAAMA,CAACC,IAAI,EAAE;IACT,OAAO,IAAI,CAACN,gBAAgB,CAACK,MAAM,CAACC,IAAI,CAAC;EAC7C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,cAAcA,CAACD,IAAI,EAAEH,IAAI,EAAE;IACvB,OAAO,IAAI,CAACH,gBAAgB,CAACO,cAAc,CAACD,IAAI,EAAEH,IAAI,CAAC;EAC3D;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAGX,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
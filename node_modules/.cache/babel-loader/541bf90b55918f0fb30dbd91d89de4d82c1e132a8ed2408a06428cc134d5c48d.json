{"ast":null,"code":"const FormatError = require('../Errors/FormatError');\n\n// TODO consider using Buffer.from(<string>, 'hex') instead\n// TODO get rid of this ?\n// int2ByteArray(BigInt('0x' + hex.join('')))\nconst hexStringToByteArray = str => {\n  const match = str.match(/^(0x)?([a-f0-9]*)$/i);\n  if (!match) {\n    throw new FormatError(`Invalid hex string: ${str}`);\n  }\n  return new Uint8Array(match[2].split(/(.{1,2})/).filter(el => el).map(el => parseInt(el, 16)));\n};\nmodule.exports = hexStringToByteArray;","map":{"version":3,"names":["FormatError","require","hexStringToByteArray","str","match","Uint8Array","split","filter","el","map","parseInt","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/utils/hexStringToByteArray.js"],"sourcesContent":["const FormatError = require('../Errors/FormatError')\n\n// TODO consider using Buffer.from(<string>, 'hex') instead\n// TODO get rid of this ?\n// int2ByteArray(BigInt('0x' + hex.join('')))\nconst hexStringToByteArray = (str) => {\n    const match = str.match(/^(0x)?([a-f0-9]*)$/i)\n    if (!match) {\n        throw new FormatError(`Invalid hex string: ${str}`)\n    }\n\n    return new Uint8Array(match[2]\n        .split(/(.{1,2})/)\n        .filter(el => el)\n        .map(el => parseInt(el, 16)))\n}\n\nmodule.exports = hexStringToByteArray\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAEpD;AACA;AACA;AACA,MAAMC,oBAAoB,GAAIC,GAAG,IAAK;EAClC,MAAMC,KAAK,GAAGD,GAAG,CAACC,KAAK,CAAC,qBAAqB,CAAC;EAC9C,IAAI,CAACA,KAAK,EAAE;IACR,MAAM,IAAIJ,WAAW,CAAE,uBAAsBG,GAAI,EAAC,CAAC;EACvD;EAEA,OAAO,IAAIE,UAAU,CAACD,KAAK,CAAC,CAAC,CAAC,CACzBE,KAAK,CAAC,UAAU,CAAC,CACjBC,MAAM,CAACC,EAAE,IAAIA,EAAE,CAAC,CAChBC,GAAG,CAACD,EAAE,IAAIE,QAAQ,CAACF,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGV,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
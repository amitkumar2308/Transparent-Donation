{"ast":null,"code":"import _buffer from \"buffer\";\nconst {\n  Buffer: _Buffer\n} = _buffer;\nimport AccountBase from \"./Base.mjs\";\nimport { METHODS } from \"../aepp-wallet-communication/schema.mjs\";\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from \"../utils/errors.mjs\";\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  constructor(rpcClient, address) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign() {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n  async signTransaction(tx) {\n    let {\n      innerTx,\n      networkId\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n  async signMessage(message) {\n    const {\n      signature\n    } = await this._rpcClient.request(METHODS.signMessage, {\n      onAccount: this.address,\n      message\n    });\n    return _Buffer.from(signature, 'hex');\n  }\n  async signTypedData(data, aci) {\n    let {\n      name,\n      version,\n      contractAddress,\n      networkId\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      signature\n    } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name,\n        version,\n        networkId,\n        contractAddress\n      },\n      aci,\n      data\n    });\n    return signature;\n  }\n  async signDelegationToContract(contractAddress) {\n    const {\n      signature\n    } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress\n    });\n    return signature;\n  }\n  async signNameDelegationToContract(contractAddress, name) {\n    const {\n      signature\n    } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      name\n    });\n    return signature;\n  }\n  async signOracleQueryDelegationToContract(contractAddress, oracleQueryId) {\n    const {\n      signature\n    } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      oracleQueryId\n    });\n    return signature;\n  }\n}","map":{"version":3,"names":["AccountBase","METHODS","ArgumentError","NotImplementedError","UnsupportedProtocolError","AccountRpc","constructor","rpcClient","address","_rpcClient","sign","signTransaction","tx","innerTx","networkId","arguments","length","undefined","res","request","onAccount","returnSigned","signedTransaction","signMessage","message","signature","_Buffer","from","signTypedData","data","aci","name","version","contractAddress","domain","signDelegationToContract","signNameDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\account\\Rpc.ts"],"sourcesContent":["import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from '../utils/errors';\nimport { Encoded } from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\nimport { AensName } from '../tx/builder/constants';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      name, version, contractAddress, networkId,\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name, version, networkId, contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n    });\n    return signature;\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      name,\n    });\n    return signature;\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      oracleQueryId,\n    });\n    return signature;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
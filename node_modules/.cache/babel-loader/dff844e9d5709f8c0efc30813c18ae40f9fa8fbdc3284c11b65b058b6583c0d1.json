{"ast":null,"code":"const assert = require('../utils/assert');\nconst zip = require('../utils/zip');\nconst PrimitiveDataFactory = require('./PrimitiveDataFactory');\nconst ListDataFactory = require('./ListDataFactory');\nconst SetDataFactory = require('./SetDataFactory');\nconst MapDataFactory = require('./MapDataFactory');\nconst TupleDataFactory = require('./TupleDataFactory');\nconst RecordDataFactory = require('./RecordDataFactory');\nconst VariantDataFactory = require('./VariantDataFactory');\nconst EventDataFactory = require('./EventDataFactory');\nconst Bls12381DataFactory = require('./Bls12381DataFactory');\nconst CallDataFactory = require('./CallDataFactory');\nclass CompositeDataFactory {\n  constructor() {\n    this._factories = [new PrimitiveDataFactory(this), new ListDataFactory(this), new SetDataFactory(this), new MapDataFactory(this), new TupleDataFactory(this), new RecordDataFactory(this), new EventDataFactory(this), new VariantDataFactory(this), new Bls12381DataFactory(this), new CallDataFactory(this)];\n  }\n  createMultiple(types, values) {\n    assert(values.length === types.length, `Number of types (${types.length}) and values (${values.length}) should match`);\n    return zip(types, values).map(el => this.create(...el));\n  }\n  create(type, value) {\n    const factory = this._factories.find(f => f.supports(type));\n    assert(factory, `Unsupported type \"${type.name}\"`);\n    return factory.create(type, value);\n  }\n}\nmodule.exports = CompositeDataFactory;","map":{"version":3,"names":["assert","require","zip","PrimitiveDataFactory","ListDataFactory","SetDataFactory","MapDataFactory","TupleDataFactory","RecordDataFactory","VariantDataFactory","EventDataFactory","Bls12381DataFactory","CallDataFactory","CompositeDataFactory","constructor","_factories","createMultiple","types","values","length","map","el","create","type","value","factory","find","f","supports","name","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/DataFactory/CompositeDataFactory.js"],"sourcesContent":["const assert = require('../utils/assert')\nconst zip = require('../utils/zip')\nconst PrimitiveDataFactory = require('./PrimitiveDataFactory')\nconst ListDataFactory = require('./ListDataFactory')\nconst SetDataFactory = require('./SetDataFactory')\nconst MapDataFactory = require('./MapDataFactory')\nconst TupleDataFactory = require('./TupleDataFactory')\nconst RecordDataFactory = require('./RecordDataFactory')\nconst VariantDataFactory = require('./VariantDataFactory')\nconst EventDataFactory = require('./EventDataFactory')\nconst Bls12381DataFactory = require('./Bls12381DataFactory')\nconst CallDataFactory = require('./CallDataFactory')\n\nclass CompositeDataFactory {\n    constructor() {\n        this._factories = [\n            new PrimitiveDataFactory(this),\n            new ListDataFactory(this),\n            new SetDataFactory(this),\n            new MapDataFactory(this),\n            new TupleDataFactory(this),\n            new RecordDataFactory(this),\n            new EventDataFactory(this),\n            new VariantDataFactory(this),\n            new Bls12381DataFactory(this),\n            new CallDataFactory(this),\n        ]\n    }\n\n    createMultiple(types, values) {\n        assert(\n            values.length === types.length,\n            `Number of types (${types.length}) and values (${values.length}) should match`\n        )\n\n        return zip(types, values).map(el => this.create(...el))\n    }\n\n    create(type, value) {\n        const factory = this._factories.find(f => f.supports(type))\n        assert(factory, `Unsupported type \"${type.name}\"`)\n\n        return factory.create(type, value)\n    }\n}\n\nmodule.exports = CompositeDataFactory\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACzC,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAc,CAAC;AACnC,MAAME,oBAAoB,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAC9D,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAMI,cAAc,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMK,cAAc,GAAGL,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,oBAAoB,CAAC;AACtD,MAAMO,iBAAiB,GAAGP,OAAO,CAAC,qBAAqB,CAAC;AACxD,MAAMQ,kBAAkB,GAAGR,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMS,gBAAgB,GAAGT,OAAO,CAAC,oBAAoB,CAAC;AACtD,MAAMU,mBAAmB,GAAGV,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAMW,eAAe,GAAGX,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAMY,oBAAoB,CAAC;EACvBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,UAAU,GAAG,CACd,IAAIZ,oBAAoB,CAAC,IAAI,CAAC,EAC9B,IAAIC,eAAe,CAAC,IAAI,CAAC,EACzB,IAAIC,cAAc,CAAC,IAAI,CAAC,EACxB,IAAIC,cAAc,CAAC,IAAI,CAAC,EACxB,IAAIC,gBAAgB,CAAC,IAAI,CAAC,EAC1B,IAAIC,iBAAiB,CAAC,IAAI,CAAC,EAC3B,IAAIE,gBAAgB,CAAC,IAAI,CAAC,EAC1B,IAAID,kBAAkB,CAAC,IAAI,CAAC,EAC5B,IAAIE,mBAAmB,CAAC,IAAI,CAAC,EAC7B,IAAIC,eAAe,CAAC,IAAI,CAAC,CAC5B;EACL;EAEAI,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC1BlB,MAAM,CACFkB,MAAM,CAACC,MAAM,KAAKF,KAAK,CAACE,MAAM,EAC7B,oBAAmBF,KAAK,CAACE,MAAO,iBAAgBD,MAAM,CAACC,MAAO,gBACnE,CAAC;IAED,OAAOjB,GAAG,CAACe,KAAK,EAAEC,MAAM,CAAC,CAACE,GAAG,CAACC,EAAE,IAAI,IAAI,CAACC,MAAM,CAAC,GAAGD,EAAE,CAAC,CAAC;EAC3D;EAEAC,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,MAAMC,OAAO,GAAG,IAAI,CAACV,UAAU,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAACL,IAAI,CAAC,CAAC;IAC3DvB,MAAM,CAACyB,OAAO,EAAG,qBAAoBF,IAAI,CAACM,IAAK,GAAE,CAAC;IAElD,OAAOJ,OAAO,CAACH,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC;EACtC;AACJ;AAEAM,MAAM,CAACC,OAAO,GAAGlB,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
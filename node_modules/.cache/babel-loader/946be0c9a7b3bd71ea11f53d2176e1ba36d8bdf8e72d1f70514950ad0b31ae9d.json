{"ast":null,"code":"import { decode } from \"../utils/encoder.mjs\";\nimport { ArgumentError } from \"../utils/errors.mjs\";\nimport { isNameValid } from \"../tx/builder/helpers.mjs\";\nfunction ensureOracleQuery(oq) {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(contractAddress, ids, _ref) {\n  let {\n    onAccount,\n    omitAddress,\n    ...options\n  } = _ref;\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const networkId = await options.onNode.getNetworkId();\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(await onAccount.signDelegationToContract(contractAddress, {\n      networkId\n    }));\n  }\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(await onAccount.signNameDelegationToContract(contractAddress, payload, {\n      networkId\n    }));\n  }\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, {\n    networkId\n  }));\n}","map":{"version":3,"names":["decode","ArgumentError","isNameValid","ensureOracleQuery","oq","startsWith","createDelegationSignature","contractAddress","ids","_ref","onAccount","omitAddress","options","length","networkId","onNode","getNetworkId","signDelegationToContract","payload","signNameDelegationToContract","signOracleQueryDelegationToContract"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\contract\\delegation-signature.ts"],"sourcesContent":["import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  { onAccount, omitAddress, ...options }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const networkId = await options.onNode.getNetworkId();\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(await onAccount.signDelegationToContract(contractAddress, { networkId }));\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, { networkId }),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, { networkId }),\n  );\n}\n"],"mappings":"SAASA,MAAM;AAAA,SACNC,aAAa;AAAA,SAGbC,WAAW;AAGpB,SAASC,iBAAiBA,CAACC,EAAU,EAAuC;EAC1E,IAAI,CAACA,EAAE,CAACC,UAAU,CAAC,KAAK,CAAC,EAAE,MAAM,IAAIJ,aAAa,CAAC,IAAI,EAAE,cAAc,EAAEG,EAAE,CAAC;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeE,yBAAyBA,CACrDC,eAAwC,EACxCC,GAAkC,EAAAC,IAAA,EAMb;EAAA,IALrB;IAAEC,SAAS;IAAEC,WAAW;IAAE,GAAGC;EAI7B,CAAC,GAAAH,IAAA;EAED,IAAID,GAAG,CAACK,MAAM,GAAG,CAAC,EAAE,MAAM,IAAIZ,aAAa,CAAC,KAAK,EAAE,gBAAgB,EAAEO,GAAG,CAAC;EACzE,MAAMM,SAAS,GAAG,MAAMF,OAAO,CAACG,MAAM,CAACC,YAAY,CAAC,CAAC;EACrD,IAAIR,GAAG,CAACK,MAAM,KAAK,CAAC,EAAE;IACpB,IAAIF,WAAW,KAAK,IAAI,EAAE;MACxB,MAAM,IAAIV,aAAa,CAAC,aAAa,EAAE,aAAa,EAAEU,WAAW,CAAC;IACpE;IACA,OAAOX,MAAM,CAAC,MAAMU,SAAS,CAACO,wBAAwB,CAACV,eAAe,EAAE;MAAEO;IAAU,CAAC,CAAC,CAAC;EACzF;EAEA,MAAM,CAACI,OAAO,CAAC,GAAGV,GAAG;EACrB,IAAIN,WAAW,CAACgB,OAAO,CAAC,EAAE;IACxB,IAAIP,WAAW,KAAK,IAAI,EAAE;MACxB,MAAM,IAAIV,aAAa,CAAC,aAAa,EAAE,aAAa,EAAEU,WAAW,CAAC;IACpE;IACA,OAAOX,MAAM,CACX,MAAMU,SAAS,CAACS,4BAA4B,CAACZ,eAAe,EAAEW,OAAO,EAAE;MAAEJ;IAAU,CAAC,CACtF,CAAC;EACH;EAEAX,iBAAiB,CAACe,OAAO,CAAC;EAC1B,IAAIP,WAAW,KAAK,IAAI,EAAE;IACxB,MAAM,IAAIV,aAAa,CAAC,aAAa,EAAE,YAAY,EAAEU,WAAW,CAAC;EACnE;EACA,OAAOX,MAAM,CACX,MAAMU,SAAS,CAACU,mCAAmC,CAACb,eAAe,EAAEW,OAAO,EAAE;IAAEJ;EAAU,CAAC,CAC7F,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { sendTransaction, getBalance, resolveName } from \"./chain.mjs\";\nimport { buildTxAsync, unpackTx } from \"./tx/builder/index.mjs\";\nimport { ArgumentError } from \"./utils/errors.mjs\";\nimport { Tag } from \"./tx/builder/constants.mjs\";\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(amount, recipientIdOrName, options) {\n  return sendTransaction(await buildTxAsync({\n    ...options,\n    tag: Tag.SpendTx,\n    senderId: options.onAccount.address,\n    recipientId: await resolveName(recipientIdOrName, 'account_pubkey', options),\n    amount\n  }), options);\n}\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(fraction,\n// TODO: accept only number\nrecipientIdOrName, options) {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(recipientIdOrName, 'account_pubkey', options);\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(await getBalance.bind(options.onAccount)(senderId, options));\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const {\n    fee\n  } = unpackTx(await buildTxAsync({\n    ...options,\n    tag: Tag.SpendTx,\n    senderId,\n    recipientId,\n    amount: desiredAmount\n  }), Tag.SpendTx);\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(await buildTxAsync({\n    ...options,\n    tag: Tag.SpendTx,\n    senderId,\n    recipientId,\n    amount\n  }), options);\n}\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(transaction, options) {\n  return sendTransaction(await buildTxAsync({\n    ...options,\n    tag: Tag.PayingForTx,\n    payerId: options.onAccount.address,\n    tx: transaction\n  }), options);\n}","map":{"version":3,"names":["BigNumber","sendTransaction","getBalance","resolveName","buildTxAsync","unpackTx","ArgumentError","Tag","spend","amount","recipientIdOrName","options","tag","SpendTx","senderId","onAccount","address","recipientId","transferFunds","fraction","balance","bind","desiredAmount","times","integerValue","ROUND_HALF_UP","fee","plus","gt","minus","payForTransaction","transaction","PayingForTx","payerId","tx"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\spend.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,cAAc;AAAC,SAEnCC,eAAe,EAAEC,UAAU,EAAEC,WAAW;AAAA,SAEjCC,YAAY,EAAkBC,QAAQ;AAAA,SACtCC,aAAa;AAAA,SAEbC,GAAG;AAGZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,KAAKA,CACzBC,MAAuB,EACvBC,iBAAoD,EACpDC,OAAqB,EACe;EACpC,OAAOV,eAAe,CACpB,MAAMG,YAAY,CAAC;IACjB,GAAGO,OAAO;IACVC,GAAG,EAAEL,GAAG,CAACM,OAAO;IAChBC,QAAQ,EAAEH,OAAO,CAACI,SAAS,CAACC,OAAO;IACnCC,WAAW,EAAE,MAAMd,WAAW,CAC5BO,iBAAiB,EACjB,gBAAgB,EAChBC,OACF,CAAC;IACDF;EACF,CAAC,CAAC,EACFE,OACF,CAAC;AACH;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeO,aAAaA,CACjCC,QAAyB;AAAE;AAC3BT,iBAAoD,EACpDC,OAA6B,EACO;EACpC,IAAI,CAACQ,QAAQ,GAAG,CAAC,IAAI,CAACA,QAAQ,GAAG,CAAC,EAAE;IAClC,MAAM,IAAIb,aAAa,CAAC,UAAU,EAAE,0BAA0B,EAAEa,QAAQ,CAAC;EAC3E;EACA,MAAMF,WAAW,GAAG,MAAMd,WAAW,CACnCO,iBAAiB,EACjB,gBAAgB,EAChBC,OACF,CAAC;EACD,MAAMG,QAAQ,GAAGH,OAAO,CAACI,SAAS,CAACC,OAAO;EAC1C,MAAMI,OAAO,GAAG,IAAIpB,SAAS,CAC3B,MAAME,UAAU,CAACmB,IAAI,CAACV,OAAO,CAACI,SAAS,CAAC,CAACD,QAAQ,EAAEH,OAAO,CAC5D,CAAC;EACD,MAAMW,aAAa,GAAGF,OAAO,CAACG,KAAK,CAACJ,QAAQ,CAAC,CAACK,YAAY,CAACxB,SAAS,CAACyB,aAAa,CAAC;EACnF,MAAM;IAAEC;EAAI,CAAC,GAAGrB,QAAQ,CACtB,MAAMD,YAAY,CAAC;IACjB,GAAGO,OAAO;IAAEC,GAAG,EAAEL,GAAG,CAACM,OAAO;IAAEC,QAAQ;IAAEG,WAAW;IAAER,MAAM,EAAEa;EAC/D,CAAC,CAAC,EACFf,GAAG,CAACM,OACN,CAAC;EACD;EACA,MAAMJ,MAAM,GAAGa,aAAa,CAACK,IAAI,CAACD,GAAG,CAAC,CAACE,EAAE,CAACR,OAAO,CAAC,GAAGA,OAAO,CAACS,KAAK,CAACH,GAAG,CAAC,GAAGJ,aAAa;EACvF,OAAOrB,eAAe,CACpB,MAAMG,YAAY,CAAC;IACjB,GAAGO,OAAO;IAAEC,GAAG,EAAEL,GAAG,CAACM,OAAO;IAAEC,QAAQ;IAAEG,WAAW;IAAER;EACvD,CAAC,CAAC,EACFE,OACF,CAAC;AACH;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAemB,iBAAiBA,CACrCC,WAAgC,EAChCpB,OAAiC,EACG;EACpC,OAAOV,eAAe,CACpB,MAAMG,YAAY,CAAC;IACjB,GAAGO,OAAO;IAAEC,GAAG,EAAEL,GAAG,CAACyB,WAAW;IAAEC,OAAO,EAAEtB,OAAO,CAACI,SAAS,CAACC,OAAO;IAAEkB,EAAE,EAAEH;EAC5E,CAAC,CAAC,EACFpB,OACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}
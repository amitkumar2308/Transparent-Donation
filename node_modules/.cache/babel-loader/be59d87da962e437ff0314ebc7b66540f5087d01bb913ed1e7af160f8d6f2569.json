{"ast":null,"code":"const FateData = require('./FateData');\nconst {\n  int2ByteArray\n} = require('../utils/int2ByteArray');\nconst hexStringToByteArray = require('../utils/hexStringToByteArray');\nconst FateTypeError = require('../Errors/FateTypeError');\nconst toByteArray = (value, size = 0) => {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return new Uint8Array(value);\n  }\n  if (typeof value === 'string') {\n    return hexStringToByteArray(value);\n  }\n  if (typeof value !== 'bigint' && !Number.isInteger(value)) {\n    throw new FateTypeError('byte_array', `Should be one of: Array, ArrayBuffer, hex string, Number, BigInt; got ${value} instead`);\n  }\n  const bytes = int2ByteArray(value);\n  if (bytes.length >= size) {\n    return bytes;\n  }\n\n  // pad the byte array with 0 significant bytes, because int representation lost\n  const fixedSize = new Uint8Array(size);\n  fixedSize.set(bytes, size - bytes.length);\n  return fixedSize;\n};\nclass FateBytes extends FateData {\n  constructor(value, size, name = 'bytes') {\n    super(name);\n    this._value = toByteArray(value, size);\n    if (size && this._value.byteLength !== size) {\n      throw new FateTypeError(name, `Invalid length: got ${this._value.byteLength} bytes instead of ${size} bytes`);\n    }\n    this._size = size;\n  }\n  get value() {\n    return this._value;\n  }\n  get size() {\n    return this._size;\n  }\n  valueOf() {\n    return this._value;\n  }\n}\nmodule.exports = FateBytes;","map":{"version":3,"names":["FateData","require","int2ByteArray","hexStringToByteArray","FateTypeError","toByteArray","value","size","Array","isArray","ArrayBuffer","isView","Uint8Array","Number","isInteger","bytes","length","fixedSize","set","FateBytes","constructor","name","_value","byteLength","_size","valueOf","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/types/FateBytes.js"],"sourcesContent":["const FateData = require('./FateData')\nconst {int2ByteArray} = require('../utils/int2ByteArray')\nconst hexStringToByteArray = require('../utils/hexStringToByteArray')\nconst FateTypeError = require('../Errors/FateTypeError')\n\nconst toByteArray = (value, size = 0) => {\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n        return new Uint8Array(value)\n    }\n\n    if (typeof value === 'string') {\n        return hexStringToByteArray(value)\n    }\n\n    if (typeof value !== 'bigint' && !Number.isInteger(value)) {\n        throw new FateTypeError(\n            'byte_array',\n            `Should be one of: Array, ArrayBuffer, hex string, Number, BigInt; got ${value} instead`\n        )\n    }\n\n    const bytes = int2ByteArray(value)\n    if (bytes.length >= size) {\n        return bytes\n    }\n\n    // pad the byte array with 0 significant bytes, because int representation lost\n    const fixedSize = new Uint8Array(size)\n    fixedSize.set(bytes, size - bytes.length)\n\n    return fixedSize\n}\n\nclass FateBytes extends FateData {\n    constructor(value, size, name = 'bytes') {\n        super(name)\n\n        this._value = toByteArray(value, size)\n\n        if (size && this._value.byteLength !== size) {\n            throw new FateTypeError(\n                name,\n                `Invalid length: got ${this._value.byteLength} bytes instead of ${size} bytes`\n            )\n        }\n\n        this._size = size\n    }\n\n    get value() {\n        return this._value\n    }\n\n    get size() {\n        return this._size\n    }\n\n    valueOf() {\n        return this._value\n    }\n}\n\nmodule.exports = FateBytes\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;AACtC,MAAM;EAACC;AAAa,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACzD,MAAME,oBAAoB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AACrE,MAAMG,aAAa,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAExD,MAAMI,WAAW,GAAGA,CAACC,KAAK,EAAEC,IAAI,GAAG,CAAC,KAAK;EACrC,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,IAAII,WAAW,CAACC,MAAM,CAACL,KAAK,CAAC,EAAE;IACnD,OAAO,IAAIM,UAAU,CAACN,KAAK,CAAC;EAChC;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOH,oBAAoB,CAACG,KAAK,CAAC;EACtC;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACO,MAAM,CAACC,SAAS,CAACR,KAAK,CAAC,EAAE;IACvD,MAAM,IAAIF,aAAa,CACnB,YAAY,EACX,yEAAwEE,KAAM,UACnF,CAAC;EACL;EAEA,MAAMS,KAAK,GAAGb,aAAa,CAACI,KAAK,CAAC;EAClC,IAAIS,KAAK,CAACC,MAAM,IAAIT,IAAI,EAAE;IACtB,OAAOQ,KAAK;EAChB;;EAEA;EACA,MAAME,SAAS,GAAG,IAAIL,UAAU,CAACL,IAAI,CAAC;EACtCU,SAAS,CAACC,GAAG,CAACH,KAAK,EAAER,IAAI,GAAGQ,KAAK,CAACC,MAAM,CAAC;EAEzC,OAAOC,SAAS;AACpB,CAAC;AAED,MAAME,SAAS,SAASnB,QAAQ,CAAC;EAC7BoB,WAAWA,CAACd,KAAK,EAAEC,IAAI,EAAEc,IAAI,GAAG,OAAO,EAAE;IACrC,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,MAAM,GAAGjB,WAAW,CAACC,KAAK,EAAEC,IAAI,CAAC;IAEtC,IAAIA,IAAI,IAAI,IAAI,CAACe,MAAM,CAACC,UAAU,KAAKhB,IAAI,EAAE;MACzC,MAAM,IAAIH,aAAa,CACnBiB,IAAI,EACH,uBAAsB,IAAI,CAACC,MAAM,CAACC,UAAW,qBAAoBhB,IAAK,QAC3E,CAAC;IACL;IAEA,IAAI,CAACiB,KAAK,GAAGjB,IAAI;EACrB;EAEA,IAAID,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACgB,MAAM;EACtB;EAEA,IAAIf,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACiB,KAAK;EACrB;EAEAC,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACH,MAAM;EACtB;AACJ;AAEAI,MAAM,CAACC,OAAO,GAAGR,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}
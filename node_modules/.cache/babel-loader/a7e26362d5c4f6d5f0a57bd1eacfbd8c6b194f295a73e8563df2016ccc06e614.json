{"ast":null,"code":"const Sha256 = require('sha.js/sha256');\nconst {\n  Buffer\n} = require('safe-buffer');\nconst FormatError = require('../Errors/FormatError');\nconst sha256hash = input => {\n  return new Sha256().update(input).digest();\n};\nconst checkSumFn = payload => {\n  return sha256hash(sha256hash(payload)).slice(0, 4);\n};\nconst addChecksum = payload => {\n  const buffer = Buffer.from(payload);\n  const checksum = checkSumFn(payload);\n  return Buffer.concat([buffer, checksum], buffer.length + 4);\n};\nconst getPayload = payloadWithChecksumData => {\n  const payloadWithChecksum = Buffer.from(payloadWithChecksumData);\n  const payload = payloadWithChecksum.slice(0, -4);\n  const checksum = payloadWithChecksum.slice(-4);\n  const newChecksum = checkSumFn(payload);\n  if (!checksum.equals(newChecksum)) {\n    throw new FormatError('Invalid checksum');\n  }\n  return new Uint8Array(payload);\n};\n\n/**\n * Base64check encode given `input`\n * @param {String|Uint8Array} input - Data to encode\n * @return {String} Base64check encoded data\n */\nconst encode = input => {\n  return addChecksum(input).toString('base64');\n};\n\n/**\n * Base64check decode given `str`\n * @param {String} str - Data to decode\n * @return {Uint8Array} Base64check decoded data\n */\nconst decode = str => {\n  const data = Buffer.from(str, 'base64');\n  return getPayload(data);\n};\nmodule.exports = {\n  addChecksum,\n  getPayload,\n  encode,\n  decode\n};","map":{"version":3,"names":["Sha256","require","Buffer","FormatError","sha256hash","input","update","digest","checkSumFn","payload","slice","addChecksum","buffer","from","checksum","concat","length","getPayload","payloadWithChecksumData","payloadWithChecksum","newChecksum","equals","Uint8Array","encode","toString","decode","str","data","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/utils/base64check.js"],"sourcesContent":["const Sha256 = require('sha.js/sha256')\nconst { Buffer } = require('safe-buffer')\nconst FormatError = require('../Errors/FormatError')\n\nconst sha256hash = (input) => {\n    return new Sha256().update(input).digest()\n}\n\nconst checkSumFn = (payload) => {\n    return sha256hash(sha256hash(payload)).slice(0, 4)\n}\n\nconst addChecksum = (payload) => {\n    const buffer = Buffer.from(payload)\n    const checksum = checkSumFn(payload)\n    return Buffer.concat([buffer, checksum], buffer.length + 4)\n}\n\nconst getPayload = (payloadWithChecksumData) => {\n    const payloadWithChecksum = Buffer.from(payloadWithChecksumData)\n    const payload = payloadWithChecksum.slice(0, -4)\n    const checksum = payloadWithChecksum.slice(-4)\n    const newChecksum = checkSumFn(payload)\n\n    if (!checksum.equals(newChecksum)) {\n        throw new FormatError('Invalid checksum')\n    }\n\n    return new Uint8Array(payload)\n}\n\n/**\n * Base64check encode given `input`\n * @param {String|Uint8Array} input - Data to encode\n * @return {String} Base64check encoded data\n */\nconst encode = (input) => {\n    return addChecksum(input).toString('base64')\n}\n\n/**\n * Base64check decode given `str`\n * @param {String} str - Data to decode\n * @return {Uint8Array} Base64check decoded data\n */\nconst decode = (str) => {\n    const data = Buffer.from(str, 'base64')\n\n    return getPayload(data)\n}\n\nmodule.exports = {\n    addChecksum,\n    getPayload,\n    encode,\n    decode\n}\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACvC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,WAAW,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAEpD,MAAMG,UAAU,GAAIC,KAAK,IAAK;EAC1B,OAAO,IAAIL,MAAM,CAAC,CAAC,CAACM,MAAM,CAACD,KAAK,CAAC,CAACE,MAAM,CAAC,CAAC;AAC9C,CAAC;AAED,MAAMC,UAAU,GAAIC,OAAO,IAAK;EAC5B,OAAOL,UAAU,CAACA,UAAU,CAACK,OAAO,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACtD,CAAC;AAED,MAAMC,WAAW,GAAIF,OAAO,IAAK;EAC7B,MAAMG,MAAM,GAAGV,MAAM,CAACW,IAAI,CAACJ,OAAO,CAAC;EACnC,MAAMK,QAAQ,GAAGN,UAAU,CAACC,OAAO,CAAC;EACpC,OAAOP,MAAM,CAACa,MAAM,CAAC,CAACH,MAAM,EAAEE,QAAQ,CAAC,EAAEF,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;AAC/D,CAAC;AAED,MAAMC,UAAU,GAAIC,uBAAuB,IAAK;EAC5C,MAAMC,mBAAmB,GAAGjB,MAAM,CAACW,IAAI,CAACK,uBAAuB,CAAC;EAChE,MAAMT,OAAO,GAAGU,mBAAmB,CAACT,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAMI,QAAQ,GAAGK,mBAAmB,CAACT,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAMU,WAAW,GAAGZ,UAAU,CAACC,OAAO,CAAC;EAEvC,IAAI,CAACK,QAAQ,CAACO,MAAM,CAACD,WAAW,CAAC,EAAE;IAC/B,MAAM,IAAIjB,WAAW,CAAC,kBAAkB,CAAC;EAC7C;EAEA,OAAO,IAAImB,UAAU,CAACb,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMc,MAAM,GAAIlB,KAAK,IAAK;EACtB,OAAOM,WAAW,CAACN,KAAK,CAAC,CAACmB,QAAQ,CAAC,QAAQ,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAIC,GAAG,IAAK;EACpB,MAAMC,IAAI,GAAGzB,MAAM,CAACW,IAAI,CAACa,GAAG,EAAE,QAAQ,CAAC;EAEvC,OAAOT,UAAU,CAACU,IAAI,CAAC;AAC3B,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACblB,WAAW;EACXM,UAAU;EACVM,MAAM;EACNE;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { buildTx, getSchema, unpackTx } from \"./builder/index.mjs\";\nimport { Tag } from \"./builder/constants.mjs\";\nimport { TransactionError, UnexpectedTsError } from \"../utils/errors.mjs\";\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(transaction) {\n  var _getSchema$find;\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n  const nonce = (_getSchema$find = getSchema(params.tag, params.version).find(_ref => {\n    let [name] = _ref;\n    return name === 'nonce';\n  })) === null || _getSchema$find === void 0 ? void 0 : _getSchema$find[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey];\n  return address.replace(/^ok_/, 'ak_');\n}","map":{"version":3,"names":["buildTx","getSchema","unpackTx","Tag","TransactionError","UnexpectedTsError","getTransactionSignerAddress","transaction","_getSchema$find","params","tag","SignedTx","encodedTx","GaMetaTx","gaId","nonce","version","find","_ref","name","address","senderKey","replace"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\tx\\transaction-signer.ts"],"sourcesContent":["import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n"],"mappings":"SACSA,OAAO,EAAEC,SAAS,EAAEC,QAAQ;AAAA,SAC5BC,GAAG;AAAA,SACHC,gBAAgB,EAAEC,iBAAiB;AAE5C;AACA;AACA;AACA;AACA,eAAe,SAASC,2BAA2BA,CACjDC,WAAgC,EACR;EAAA,IAAAC,eAAA;EACxB,MAAMC,MAAM,GAAGP,QAAQ,CAACK,WAAW,CAAC;EACpC,QAAQE,MAAM,CAACC,GAAG;IAChB,KAAKP,GAAG,CAACQ,QAAQ;MACf,OAAOL,2BAA2B,CAACN,OAAO,CAACS,MAAM,CAACG,SAAS,CAAC,CAAC;IAC/D,KAAKT,GAAG,CAACU,QAAQ;MACf,OAAOJ,MAAM,CAACK,IAAI;IACpB;EACF;EAEA,MAAMC,KAAK,IAAAP,eAAA,GAAGP,SAAS,CAACQ,MAAM,CAACC,GAAG,EAAED,MAAM,CAACO,OAAO,CAAC,CAACC,IAAI,CAACC,IAAA;IAAA,IAAC,CAACC,IAAI,CAAC,GAAAD,IAAA;IAAA,OAAKC,IAAI,KAAK,OAAO;EAAA,EAAC,cAAAX,eAAA,uBAAxEA,eAAA,CAA2E,CAAC,CAAC;EAC3F,IAAIO,KAAK,IAAI,IAAI,EAAE,MAAM,IAAIX,gBAAgB,CAAE,mCAAkCD,GAAG,CAACM,MAAM,CAACC,GAAG,CAAE,EAAC,CAAC;EACnG,IAAI,EAAE,WAAW,IAAIK,KAAK,CAAC,EAAE,MAAM,IAAIV,iBAAiB,CAAC,CAAC;EAC1D,MAAMe,OAAO,GAAGX,MAAM,CAACM,KAAK,CAACM,SAAS,CAA6C;EACnF,OAAOD,OAAO,CAACE,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
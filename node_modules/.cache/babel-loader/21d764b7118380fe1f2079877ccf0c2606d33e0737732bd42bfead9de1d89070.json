{"ast":null,"code":"const ContractByteArrayEncoder = require('./ContractByteArrayEncoder');\nconst AciTypeResolver = require('./AciTypeResolver');\nconst ApiEncoder = require('./ApiEncoder');\nconst EventEncoder = require('./EventEncoder');\nconst CanonicalMapper = require('./Mapper/CanonicalMapper');\nconst {\n  FateTypeCalldata,\n  FateTypeString\n} = require('./FateTypes');\nconst EncoderError = require('./Errors/EncoderError');\n\n/**\n * @deprecated Use AciContractCallEncoder\n */\nclass Encoder {\n  /**\n   * Creates contract encoder\n   *\n   * @example\n   * const ACI = require('./Test.json')\n   * const encoder = new Encoder(ACI)\n   *\n   * @param {Object} aci - The contract ACI in a canonical form as POJO.\n  */\n  constructor(aci) {\n    /** @type {ContractByteArrayEncoder} */\n    this._byteArrayEncoder = new ContractByteArrayEncoder();\n\n    /** @type {AciTypeResolver} */\n    this._typeResolver = new AciTypeResolver(aci);\n\n    /** @type {ApiEncoder} */\n    this._apiEncoder = new ApiEncoder();\n\n    /** @type {EventEncoder} */\n    this._eventEncoder = new EventEncoder();\n\n    /** @type {CanonicalMapper} */\n    this._canonicalMapper = new CanonicalMapper();\n  }\n\n  /**\n   * Creates contract calldata\n   *\n   * @example\n   * const encoded = encoder.encode('Test', 'test_string', [\"whoolymoly\"])\n   * console.log(`Encoded data: ${encoded}`)\n   * // Outputs:\n   * // Encoded data: cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} funName - The function name as defined in the ACI.\n   * @param {Array} args - An array of call arguments as Javascript data structures. See README.md\n   * @returns {string} Encoded calldata\n  */\n  encode(contract, funName, args) {\n    const {\n      types,\n      required\n    } = this._typeResolver.getCallTypes(contract, funName);\n    if (args.length > types.length || args.length < required) {\n      throw new EncoderError('Non matching number of arguments. ' + `${funName} expects between ${required} and ${types.length} number of arguments but got ${args.length}`);\n    }\n\n    // fill in the options arguments\n    while (args.length < types.length) {\n      args.push(undefined);\n    }\n    return this._byteArrayEncoder.encode(FateTypeCalldata(funName, types), args);\n  }\n\n  /**\n   * Decodes successful (type = ok) contract call return data\n   *\n   * @example\n   * const decoded = encoder.decode('Test', 'test_string', 'cb_KXdob29seW1vbHlGazSE')\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} funName - The function name as defined in the ACI.\n   * @param {string} data - The call return value in a canonical format.\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decode(contract, funName, data) {\n    const type = this._typeResolver.getReturnType(contract, funName);\n    return this._byteArrayEncoder.decodeWithType(data, type);\n  }\n\n  /**\n   * Decodes arbitrary contract bytearray data.\n   *\n   * Note that:\n   * - Record keys are lost\n   * - Variant constructor names are lost\n   * - Any user type information is lost\n   * - STL type information is lost: i.e. Chain, AENS, Set, BLS12_381\n   *\n   * @example\n   * const decoded = encoder.decodeContractByteArray('cb_KXdob29seW1vbHlGazSE')\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} data - Contract bytearray data in a canonical format.\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decodeContractByteArray(data) {\n    return this._byteArrayEncoder.decode(data);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Decodes a string\n   *\n   *\n   * @example\n   * const error = encoder.decodeString('cb_VHlwZSBlcnJvciBvbiBjYWxsOiBbe2J5dGVzLDw8MjQwLDIsLi4uPj59XSBpcyBub3Qgb2YgdHlwZSBbe2J5dGVzLDMyfV3EtJjU')\n   * console.log('Error: ' + error.toString())\n   * // Outputs:\n   * // Error: Type error on call: [{bytes,<<240,2,...>>}] is not of type [{bytes,32}]\n   *\n   * @param {string} data - The encoded string.\n   * @returns {Uint8Array} Decoded value as byte array.\n  */\n  decodeString(data) {\n    const decoder = new TextDecoder();\n    const bytes = this._apiEncoder.decodeWithType(data, 'contract_bytearray');\n    return decoder.decode(bytes);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Decodes a FATE string\n   *\n   * @example\n   * const revert = encoder.decodeFateString('cb_OXJlcXVpcmUgZmFpbGVkarP9mg==')\n   * console.log('Revert: ' + revert)\n   * // Outputs:\n   * // Revert: require failed\n   *\n   * @param {string} data - The FATE encoded string.\n   * @returns {string} Decoded string value.\n  */\n  decodeFateString(data) {\n    return this._byteArrayEncoder.decodeWithType(data, FateTypeString());\n  }\n\n  /**\n   * Decodes contract event\n   *\n   * @example\n   * const data = encoder.decodeEvent('Test', 'cb_dHJpZ2dlcmVk1FYuYA==', [\n   *     34853523142692495808479485503424878684430196596020091237715106250497712463899n,\n   *     17\n   * ])\n   * console.log(data)\n   * // Outputs:\n   * // {EventTwo: [17n, 'triggered']}\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} encodedData - Event encoded data\n   * @param {Array} topics - A list of event topics.\n   * First element should be the implicit topic that carry the event constructor name.\n   */\n  decodeEvent(contract, data, topics) {\n    const type = this._typeResolver.getEventType(contract, topics);\n    return this._eventEncoder.decodeWithType(data, type);\n  }\n}\nmodule.exports = Encoder;","map":{"version":3,"names":["ContractByteArrayEncoder","require","AciTypeResolver","ApiEncoder","EventEncoder","CanonicalMapper","FateTypeCalldata","FateTypeString","EncoderError","Encoder","constructor","aci","_byteArrayEncoder","_typeResolver","_apiEncoder","_eventEncoder","_canonicalMapper","encode","contract","funName","args","types","required","getCallTypes","length","push","undefined","decode","data","type","getReturnType","decodeWithType","decodeContractByteArray","decodeString","decoder","TextDecoder","bytes","decodeFateString","decodeEvent","topics","getEventType","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Encoder.js"],"sourcesContent":["const ContractByteArrayEncoder = require('./ContractByteArrayEncoder')\nconst AciTypeResolver = require('./AciTypeResolver')\nconst ApiEncoder = require('./ApiEncoder')\nconst EventEncoder = require('./EventEncoder')\nconst CanonicalMapper = require('./Mapper/CanonicalMapper')\nconst {FateTypeCalldata, FateTypeString} = require('./FateTypes')\nconst EncoderError = require('./Errors/EncoderError')\n\n/**\n * @deprecated Use AciContractCallEncoder\n */\nclass Encoder {\n    /**\n     * Creates contract encoder\n     *\n     * @example\n     * const ACI = require('./Test.json')\n     * const encoder = new Encoder(ACI)\n     *\n     * @param {Object} aci - The contract ACI in a canonical form as POJO.\n    */\n    constructor(aci) {\n        /** @type {ContractByteArrayEncoder} */\n        this._byteArrayEncoder = new ContractByteArrayEncoder()\n\n        /** @type {AciTypeResolver} */\n        this._typeResolver = new AciTypeResolver(aci)\n\n        /** @type {ApiEncoder} */\n        this._apiEncoder = new ApiEncoder()\n\n        /** @type {EventEncoder} */\n        this._eventEncoder = new EventEncoder()\n\n        /** @type {CanonicalMapper} */\n        this._canonicalMapper = new CanonicalMapper()\n    }\n\n    /**\n     * Creates contract calldata\n     *\n     * @example\n     * const encoded = encoder.encode('Test', 'test_string', [\"whoolymoly\"])\n     * console.log(`Encoded data: ${encoded}`)\n     * // Outputs:\n     * // Encoded data: cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} funName - The function name as defined in the ACI.\n     * @param {Array} args - An array of call arguments as Javascript data structures. See README.md\n     * @returns {string} Encoded calldata\n    */\n    encode(contract, funName, args) {\n        const {types, required} = this._typeResolver.getCallTypes(contract, funName)\n\n        if (args.length > types.length || args.length < required) {\n            throw new EncoderError(\n                'Non matching number of arguments. '\n                + `${funName} expects between ${required} and ${types.length} number of arguments but got ${args.length}`\n            )\n        }\n\n        // fill in the options arguments\n        while (args.length < types.length) {\n            args.push(undefined)\n        }\n\n        return this._byteArrayEncoder.encode(FateTypeCalldata(funName, types), args)\n    }\n\n    /**\n     * Decodes successful (type = ok) contract call return data\n     *\n     * @example\n     * const decoded = encoder.decode('Test', 'test_string', 'cb_KXdob29seW1vbHlGazSE')\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} funName - The function name as defined in the ACI.\n     * @param {string} data - The call return value in a canonical format.\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decode(contract, funName, data) {\n        const type = this._typeResolver.getReturnType(contract, funName)\n\n        return this._byteArrayEncoder.decodeWithType(data, type)\n    }\n\n    /**\n     * Decodes arbitrary contract bytearray data.\n     *\n     * Note that:\n     * - Record keys are lost\n     * - Variant constructor names are lost\n     * - Any user type information is lost\n     * - STL type information is lost: i.e. Chain, AENS, Set, BLS12_381\n     *\n     * @example\n     * const decoded = encoder.decodeContractByteArray('cb_KXdob29seW1vbHlGazSE')\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} data - Contract bytearray data in a canonical format.\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decodeContractByteArray(data) {\n        return this._byteArrayEncoder.decode(data)\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * Decodes a string\n     *\n     *\n     * @example\n     * const error = encoder.decodeString('cb_VHlwZSBlcnJvciBvbiBjYWxsOiBbe2J5dGVzLDw8MjQwLDIsLi4uPj59XSBpcyBub3Qgb2YgdHlwZSBbe2J5dGVzLDMyfV3EtJjU')\n     * console.log('Error: ' + error.toString())\n     * // Outputs:\n     * // Error: Type error on call: [{bytes,<<240,2,...>>}] is not of type [{bytes,32}]\n     *\n     * @param {string} data - The encoded string.\n     * @returns {Uint8Array} Decoded value as byte array.\n    */\n    decodeString(data) {\n        const decoder = new TextDecoder()\n        const bytes = this._apiEncoder.decodeWithType(data, 'contract_bytearray')\n\n        return decoder.decode(bytes)\n    }\n    /* eslint-enable max-len */\n\n    /**\n     * Decodes a FATE string\n     *\n     * @example\n     * const revert = encoder.decodeFateString('cb_OXJlcXVpcmUgZmFpbGVkarP9mg==')\n     * console.log('Revert: ' + revert)\n     * // Outputs:\n     * // Revert: require failed\n     *\n     * @param {string} data - The FATE encoded string.\n     * @returns {string} Decoded string value.\n    */\n    decodeFateString(data) {\n        return this._byteArrayEncoder.decodeWithType(data, FateTypeString())\n    }\n\n    /**\n     * Decodes contract event\n     *\n     * @example\n     * const data = encoder.decodeEvent('Test', 'cb_dHJpZ2dlcmVk1FYuYA==', [\n     *     34853523142692495808479485503424878684430196596020091237715106250497712463899n,\n     *     17\n     * ])\n     * console.log(data)\n     * // Outputs:\n     * // {EventTwo: [17n, 'triggered']}\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} encodedData - Event encoded data\n     * @param {Array} topics - A list of event topics.\n     * First element should be the implicit topic that carry the event constructor name.\n     */\n    decodeEvent(contract, data, topics) {\n        const type = this._typeResolver.getEventType(contract, topics)\n\n        return this._eventEncoder.decodeWithType(data, type)\n    }\n}\n\nmodule.exports = Encoder\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import BrowserWindowMessageConnection from \"./connection/BrowserWindowMessage.mjs\";\nimport { MESSAGE_DIRECTION, METHODS } from \"./schema.mjs\";\nimport { UnsupportedPlatformError } from \"../utils/errors.mjs\";\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default ((connection, onDetected) => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets = {};\n  connection.connect((_ref, origin, source) => {\n    let {\n      method,\n      params\n    } = _ref;\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...(params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...(window.origin !== 'null' && {\n              origin: window.origin\n            })\n          } : {\n            origin: params.origin\n          })\n        });\n      }\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({\n      wallets,\n      newWallet: wallet\n    });\n  }, () => {});\n  return () => connection.disconnect();\n});","map":{"version":3,"names":["BrowserWindowMessageConnection","MESSAGE_DIRECTION","METHODS","UnsupportedPlatformError","connection","onDetected","window","wallets","connect","_ref","origin","source","method","params","readyToConnect","id","wallet","info","getConnection","target","type","sendDirection","to_waellet","receiveDirection","to_aepp","newWallet","disconnect"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\aepp-wallet-communication\\wallet-detector.ts"],"sourcesContent":["import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { WalletInfo } from './rpc/types';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: WalletInfo },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...window.origin !== 'null' && { origin: window.origin },\n          } : {\n            origin: params.origin,\n          },\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n"],"mappings":"OACOA,8BAA8B;AAAA,SAC5BC,iBAAiB,EAAEC,OAAO;AAAA,SAE1BC,wBAAwB;AAQjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,CACbC,UAA6B,EAC7BC,UAAqF,KACtE;EACf,IAAIC,MAAM,IAAI,IAAI,EAAE,MAAM,IAAIH,wBAAwB,CAAC,sEAAsE,CAAC;EAC9H,MAAMI,OAAgB,GAAG,CAAC,CAAC;EAE3BH,UAAU,CAACI,OAAO,CAAC,CAAAC,IAAA,EAEjBC,MAAc,EACdC,MAAc,KACX;IAAA,IAHH;MAAEC,MAAM;MAAEC;IAA+C,CAAC,GAAAJ,IAAA;IAI1D,IAAIG,MAAM,KAAKV,OAAO,CAACY,cAAc,IAAIP,OAAO,CAACM,MAAM,CAACE,EAAE,CAAC,IAAI,IAAI,EAAE;IAErE,MAAMC,MAAM,GAAG;MACbC,IAAI,EAAEJ,MAAM;MACZK,aAAaA,CAAA,EAAG;QACd,OAAO,IAAIlB,8BAA8B,CAAC;UACxCmB,MAAM,EAAER,MAAM;UACd,IAAGE,MAAM,CAACO,IAAI,KAAK,WAAW,GAAG;YAC/BC,aAAa,EAAEpB,iBAAiB,CAACqB,UAAU;YAC3CC,gBAAgB,EAAEtB,iBAAiB,CAACuB,OAAO;YAC3C,IAAGlB,MAAM,CAACI,MAAM,KAAK,MAAM,IAAI;cAAEA,MAAM,EAAEJ,MAAM,CAACI;YAAO,CAAC;UAC1D,CAAC,GAAG;YACFA,MAAM,EAAEG,MAAM,CAACH;UACjB,CAAC;QACH,CAAC,CAAC;MACJ;IACF,CAAC;IACDH,OAAO,CAACS,MAAM,CAACC,IAAI,CAACF,EAAE,CAAC,GAAGC,MAAM;IAChCX,UAAU,CAAC;MAAEE,OAAO;MAAEkB,SAAS,EAAET;IAAO,CAAC,CAAC;EAC5C,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;EAEZ,OAAO,MAAMZ,UAAU,CAACsB,UAAU,CAAC,CAAC;AACtC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
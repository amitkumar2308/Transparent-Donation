{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs3/helpers/defineProperty\";\nimport * as chainMethods from \"./chain.mjs\";\nimport * as aensMethods from \"./aens.mjs\";\nimport * as spendMethods from \"./spend.mjs\";\nimport * as oracleMethods from \"./oracle.mjs\";\nimport Contract from \"./contract/Contract.mjs\";\nimport createDelegationSignature from \"./contract/delegation-signature.mjs\";\nimport * as contractGaMethods from \"./contract/ga.mjs\";\nimport { buildTxAsync } from \"./tx/builder/index.mjs\";\nimport { mapObject } from \"./utils/other.mjs\";\nexport function getValueOrErrorProxy(valueCb) {\n  return new Proxy({}, Object.fromEntries(['apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf', 'get', 'has'].map(name => [name, function (t) {\n    const target = valueCb(); // to get a native exception in case it missed\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const res = Reflect[name](target, ...args);\n    return typeof res === 'function' && name === 'get' ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n    : res;\n  }])));\n}\nconst {\n  InvalidTxError: _2,\n  ...chainMethodsOther\n} = chainMethods;\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods\n};\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  /**\n   * @param options - Options\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"_options\", {});\n    Object.assign(this._options, options);\n  }\n  _getOptions() {\n    let callOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...callOptions\n    };\n  }\n  async buildTx(options) {\n    return buildTxAsync({\n      ...this._getOptions(),\n      ...options\n    });\n  }\n  async initializeContract(options) {\n    return Contract.initialize(this._getOptions(options));\n  }\n}\nObject.assign(AeSdkMethods.prototype, mapObject(methods, _ref => {\n  let [name, handler] = _ref;\n  return [name, function methodWrapper() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    args.length = handler.length;\n    const options = args[args.length - 1];\n    args[args.length - 1] = this._getOptions(options);\n    return handler(...args);\n  }];\n}));\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods;\nexport default AeSdkMethodsTyped;","map":{"version":3,"names":["chainMethods","aensMethods","spendMethods","oracleMethods","Contract","createDelegationSignature","contractGaMethods","buildTxAsync","mapObject","getValueOrErrorProxy","valueCb","Proxy","Object","fromEntries","map","name","t","target","_len","arguments","length","args","Array","_key","res","Reflect","bind","InvalidTxError","_2","chainMethodsOther","methods","AeSdkMethods","constructor","options","undefined","_defineProperty","assign","_options","_getOptions","callOptions","onAccount","onNode","onCompiler","buildTx","initializeContract","initialize","prototype","_ref","handler","methodWrapper","_len2","_key2","AeSdkMethodsTyped"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\AeSdkMethods.ts"],"sourcesContent":["import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  _getOptions(\n    callOptions: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...callOptions,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this._getOptions(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this._getOptions(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this._getOptions(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
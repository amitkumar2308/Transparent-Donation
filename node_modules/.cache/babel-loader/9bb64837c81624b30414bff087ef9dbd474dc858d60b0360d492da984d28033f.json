{"ast":null,"code":"const base64check = require('./utils/base64check');\nconst base58check = require('./utils/base58check');\nconst FormatError = require('./Errors/FormatError');\nconst FateTypeError = require('./Errors/FateTypeError');\nconst TYPES = {\n  key_block_hash: {\n    tag: 'kh',\n    size: 32,\n    encoder: base58check\n  },\n  micro_block_hash: {\n    tag: 'mh',\n    size: 32,\n    encoder: base58check\n  },\n  block_pof_hash: {\n    tag: 'bf',\n    size: 32,\n    encoder: base58check\n  },\n  block_tx_hash: {\n    tag: 'bx',\n    size: 32,\n    encoder: base58check\n  },\n  block_state_hash: {\n    tag: 'bs',\n    size: 32,\n    encoder: base58check\n  },\n  contract_bytearray: {\n    tag: 'cb',\n    size: 0,\n    encoder: base64check\n  },\n  contract_pubkey: {\n    tag: 'ct',\n    size: 32,\n    encoder: base58check\n  },\n  account_pubkey: {\n    tag: 'ak',\n    size: 32,\n    encoder: base58check\n  },\n  channel: {\n    tag: 'ch',\n    size: 32,\n    encoder: base58check\n  },\n  oracle_pubkey: {\n    tag: 'ok',\n    size: 32,\n    encoder: base58check\n  },\n  oracle_query_id: {\n    tag: 'oq',\n    size: 32,\n    encoder: base58check\n  },\n  peer_pubkey: {\n    tag: 'pp',\n    size: 32,\n    encoder: base58check\n  },\n  name: {\n    tag: 'nm',\n    size: 0,\n    encoder: base58check\n  },\n  tx_hash: {\n    tag: 'th',\n    size: 32,\n    encoder: base58check\n  },\n  signature: {\n    tag: 'sg',\n    size: 64,\n    encoder: base58check\n  },\n  commitment: {\n    tag: 'cm',\n    size: 32,\n    encoder: base58check\n  },\n  bytearray: {\n    tag: 'ba',\n    size: 0,\n    encoder: base64check\n  }\n};\nconst TAG2TYPE = {\n  kh: 'key_block_hash',\n  mh: 'micro_block_hash',\n  bf: 'block_pof_hash',\n  bx: 'block_tx_hash',\n  bs: 'block_state_hash',\n  cb: 'contract_bytearray',\n  ct: 'contract_pubkey',\n  ak: 'account_pubkey',\n  ch: 'channel',\n  ok: 'oracle_pubkey',\n  oq: 'oracle_query_id',\n  pp: 'peer_pubkey',\n  nm: 'name',\n  th: 'tx_hash',\n  sg: 'signature',\n  cm: 'commitment',\n  ba: 'bytearray'\n};\nclass ApiEncoder {\n  encode(typeName, payload) {\n    if (!TYPES.hasOwnProperty(typeName)) {\n      throw new FateTypeError(typeName, `Unsupported API type ${typeName}`);\n    }\n    const type = TYPES[typeName];\n    if (type.size > 0 && payload.length !== type.size) {\n      throw new FateTypeError(typeName, `Invalid payload. Expected size ${type.size}, but got ${payload.length}`);\n    }\n    const encoded = type.encoder.encode(payload);\n    return `${type.tag}_${encoded}`;\n  }\n  decode(data) {\n    const tag = data.substring(0, 2);\n    if (!TAG2TYPE.hasOwnProperty(tag)) {\n      throw new FormatError(`Invalid API data format. Unsupported tag: ${tag}`);\n    }\n    if (data[2] !== '_') {\n      throw new FormatError(`Invalid API data format. Expected _ separator on position 2, got ${data[2]}`);\n    }\n    const type = TYPES[TAG2TYPE[tag]];\n    const payload = data.substring(3);\n    const decoded = type.encoder.decode(payload);\n    if (type.size > 0 && decoded.length !== type.size) {\n      throw new FormatError(`Invalid API data format. Expected size ${type.size}, but got ${decoded.length}`);\n    }\n    return decoded;\n  }\n  decodeWithType(data, expectedType) {\n    const tag = data.substring(0, 2);\n    if (!TYPES.hasOwnProperty(expectedType)) {\n      throw new FateTypeError(expectedType, 'Unsupported API type');\n    }\n    const expectedTag = TYPES[expectedType].tag;\n    if (tag !== expectedTag) {\n      const capitalized = this.capitalizeType(expectedType);\n      throw new FateTypeError(expectedType, `${capitalized} should start with ${expectedTag}_, got ${data} instead`);\n    }\n    return this.decode(data);\n  }\n  capitalizeType(type) {\n    const s = type.replace('_', ' ');\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n}\nmodule.exports = ApiEncoder;","map":{"version":3,"names":["base64check","require","base58check","FormatError","FateTypeError","TYPES","key_block_hash","tag","size","encoder","micro_block_hash","block_pof_hash","block_tx_hash","block_state_hash","contract_bytearray","contract_pubkey","account_pubkey","channel","oracle_pubkey","oracle_query_id","peer_pubkey","name","tx_hash","signature","commitment","bytearray","TAG2TYPE","kh","mh","bf","bx","bs","cb","ct","ak","ch","ok","oq","pp","nm","th","sg","cm","ba","ApiEncoder","encode","typeName","payload","hasOwnProperty","type","length","encoded","decode","data","substring","decoded","decodeWithType","expectedType","expectedTag","capitalized","capitalizeType","s","replace","charAt","toUpperCase","slice","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/ApiEncoder.js"],"sourcesContent":["const base64check = require('./utils/base64check')\nconst base58check = require('./utils/base58check')\nconst FormatError = require('./Errors/FormatError')\nconst FateTypeError = require('./Errors/FateTypeError')\n\nconst TYPES = {\n    key_block_hash: {tag: 'kh', size: 32, encoder: base58check},\n    micro_block_hash: {tag: 'mh', size: 32, encoder: base58check},\n    block_pof_hash: {tag: 'bf', size: 32, encoder: base58check},\n    block_tx_hash: {tag: 'bx', size: 32, encoder: base58check},\n    block_state_hash: {tag: 'bs', size: 32, encoder: base58check},\n    contract_bytearray: {tag: 'cb', size: 0, encoder: base64check},\n    contract_pubkey: {tag: 'ct', size: 32, encoder: base58check},\n    account_pubkey: {tag: 'ak', size: 32, encoder: base58check},\n    channel: {tag: 'ch', size: 32, encoder: base58check},\n    oracle_pubkey: {tag: 'ok', size: 32, encoder: base58check},\n    oracle_query_id: {tag: 'oq', size: 32, encoder: base58check},\n    peer_pubkey: {tag: 'pp', size: 32, encoder: base58check},\n    name: {tag: 'nm', size: 0, encoder: base58check},\n    tx_hash: {tag: 'th', size: 32, encoder: base58check},\n    signature: {tag: 'sg', size: 64, encoder: base58check},\n    commitment: {tag: 'cm', size: 32, encoder: base58check},\n    bytearray: {tag: 'ba', size: 0, encoder: base64check},\n}\n\nconst TAG2TYPE = {\n    kh: 'key_block_hash',\n    mh: 'micro_block_hash',\n    bf: 'block_pof_hash',\n    bx: 'block_tx_hash',\n    bs: 'block_state_hash',\n    cb: 'contract_bytearray',\n    ct: 'contract_pubkey',\n    ak: 'account_pubkey',\n    ch: 'channel',\n    ok: 'oracle_pubkey',\n    oq: 'oracle_query_id',\n    pp: 'peer_pubkey',\n    nm: 'name',\n    th: 'tx_hash',\n    sg: 'signature',\n    cm: 'commitment',\n    ba: 'bytearray',\n}\n\nclass ApiEncoder {\n    encode(typeName, payload) {\n        if (!TYPES.hasOwnProperty(typeName)) {\n            throw new FateTypeError(typeName, `Unsupported API type ${typeName}`)\n        }\n\n        const type = TYPES[typeName]\n\n        if (type.size > 0 && payload.length !== type.size) {\n            throw new FateTypeError(\n                typeName,\n                `Invalid payload. Expected size ${type.size}, but got ${payload.length}`\n            )\n        }\n\n        const encoded = type.encoder.encode(payload)\n\n        return `${type.tag}_${encoded}`\n    }\n\n    decode(data) {\n        const tag = data.substring(0, 2)\n\n        if (!TAG2TYPE.hasOwnProperty(tag)) {\n            throw new FormatError(`Invalid API data format. Unsupported tag: ${tag}`)\n        }\n\n        if (data[2] !== '_') {\n            throw new FormatError(`Invalid API data format. Expected _ separator on position 2, got ${data[2]}`)\n        }\n\n        const type = TYPES[TAG2TYPE[tag]]\n        const payload = data.substring(3)\n        const decoded = type.encoder.decode(payload)\n\n        if (type.size > 0 && decoded.length !== type.size) {\n            throw new FormatError(`Invalid API data format. Expected size ${type.size}, but got ${decoded.length}`)\n        }\n\n        return decoded\n    }\n\n    decodeWithType(data, expectedType) {\n        const tag = data.substring(0, 2)\n\n        if (!TYPES.hasOwnProperty(expectedType)) {\n            throw new FateTypeError(expectedType, 'Unsupported API type')\n        }\n\n        const expectedTag = TYPES[expectedType].tag\n\n        if (tag !== expectedTag) {\n            const capitalized = this.capitalizeType(expectedType)\n\n            throw new FateTypeError(\n                expectedType,\n                `${capitalized} should start with ${expectedTag}_, got ${data} instead`\n            )\n        }\n\n        return this.decode(data)\n    }\n\n    capitalizeType(type) {\n        const s = type.replace('_', ' ')\n\n        return s.charAt(0).toUpperCase() + s.slice(1)\n    }\n}\n\nmodule.exports = ApiEncoder\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const ContractByteArrayEncoder = require('./ContractByteArrayEncoder');\nconst AciTypeResolver = require('./AciTypeResolver');\nconst ApiEncoder = require('./ApiEncoder');\nconst EventEncoder = require('./EventEncoder');\nconst CanonicalMapper = require('./Mapper/CanonicalMapper');\nconst {\n  FateTypeCalldata,\n  FateTypeString\n} = require('./FateTypes');\nconst EncoderError = require('./Errors/EncoderError');\nclass AciContractCallEncoder {\n  /**\n   * Creates contract encoder using ACI as type info provider\n   *\n   * @example\n   * const ACI = require('./Test.json')\n   * const encoder = new AciContractCallEncoder(ACI)\n   *\n   * @param {Object} aci - The contract ACI in a canonical (CLI compiler) form as POJO.\n  */\n  constructor(aci) {\n    /** @type {ContractByteArrayEncoder} */\n    this._byteArrayEncoder = new ContractByteArrayEncoder();\n\n    /** @type {AciTypeResolver} */\n    this._typeResolver = new AciTypeResolver(aci);\n\n    /** @type {ApiEncoder} */\n    this._apiEncoder = new ApiEncoder();\n\n    /** @type {EventEncoder} */\n    this._eventEncoder = new EventEncoder();\n\n    /** @type {CanonicalMapper} */\n    this._canonicalMapper = new CanonicalMapper();\n  }\n\n  /**\n   * Creates contract call data\n   *\n   * @example\n   * const encoded = encoder.encodeCall('Test', 'test_string', [\"whoolymoly\"])\n   * console.log(`Encoded data: ${encoded}`)\n   * // Outputs:\n   * // Encoded data: cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} funName - The function name as defined in the ACI.\n   * @param {Array} args - An array of call arguments as Javascript data structures. See README.md\n   * @returns {string} Encoded calldata\n  */\n  encodeCall(contract, funName, args) {\n    const {\n      types,\n      required\n    } = this._typeResolver.getCallTypes(contract, funName);\n    if (args.length > types.length || args.length < required) {\n      throw new EncoderError('Non matching number of arguments. ' + `${funName} expects between ${required} and ${types.length} number of arguments but got ${args.length}`);\n    }\n\n    // fill in the options arguments\n    while (args.length < types.length) {\n      args.push(undefined);\n    }\n    return this._byteArrayEncoder.encode(FateTypeCalldata(funName, types), args);\n  }\n\n  /**\n   * Decodes contract calldata\n   *\n   * @example\n   * const data = encoder.decodeCall('Test', 'test_string', 'cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==')\n   * console.log(`Decoded data: ${data}`)\n   * // Outputs:\n   * // Decoded data: [\"whoolymoly\"]\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} funName - The function name as defined in the ACI.\n   * @param {string} data - Encoded calldata in canonical format.\n   * @returns {string} Decoded data\n  */\n  decodeCall(contract, funName, data) {\n    const {\n      types,\n      _required\n    } = this._typeResolver.getCallTypes(contract, funName);\n    const calldataType = FateTypeCalldata(funName, types);\n    return this._byteArrayEncoder.decodeWithType(data, calldataType);\n  }\n\n  /**\n   * Decodes successful (resultType = ok) contract call return data\n   *\n   * @example\n   * const decoded = encoder.decode('Test', 'test_string', 'cb_KXdob29seW1vbHlGazSE')\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} funName - The function name as defined in the ACI.\n   * @param {string} data - The call return value in a canonical format.\n   * @param {'ok'|'revert'|'error'} resultType - The call result type.\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decodeResult(contract, funName, data, resultType = 'ok') {\n    if (resultType === 'ok') {\n      const type = this._typeResolver.getReturnType(contract, funName);\n      return this._byteArrayEncoder.decodeWithType(data, type);\n    }\n    if (resultType === 'error') {\n      const decoder = new TextDecoder();\n      const bytes = this._apiEncoder.decodeWithType(data, 'contract_bytearray');\n      return decoder.decode(bytes);\n    }\n    if (resultType === 'revert') {\n      return this._byteArrayEncoder.decodeWithType(data, FateTypeString());\n    }\n    throw new EncoderError(`Unknown call result type: \"${resultType}\"`);\n  }\n\n  /**\n   * Decodes contract event\n   *\n   * @example\n   * const data = encoder.decodeEvent('Test', 'cb_dHJpZ2dlcmVk1FYuYA==', [\n   *     34853523142692495808479485503424878684430196596020091237715106250497712463899n,\n   *     17\n   * ])\n   * console.log(data)\n   * // Outputs:\n   * // {EventTwo: [17n, 'triggered']}\n   *\n   * @param {string} contract - The contract name as defined in the ACI.\n   * @param {string} encodedData - Event encoded data\n   * @param {BigInt[]} topics - A list of event topics.\n   * First element should be the implicit topic that carry the event constructor name.\n   */\n  decodeEvent(contract, data, topics) {\n    const type = this._typeResolver.getEventType(contract, topics);\n    return this._eventEncoder.decodeWithType(data, type);\n  }\n}\nmodule.exports = AciContractCallEncoder;","map":{"version":3,"names":["ContractByteArrayEncoder","require","AciTypeResolver","ApiEncoder","EventEncoder","CanonicalMapper","FateTypeCalldata","FateTypeString","EncoderError","AciContractCallEncoder","constructor","aci","_byteArrayEncoder","_typeResolver","_apiEncoder","_eventEncoder","_canonicalMapper","encodeCall","contract","funName","args","types","required","getCallTypes","length","push","undefined","encode","decodeCall","data","_required","calldataType","decodeWithType","decodeResult","resultType","type","getReturnType","decoder","TextDecoder","bytes","decode","decodeEvent","topics","getEventType","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/AciContractCallEncoder.js"],"sourcesContent":["const ContractByteArrayEncoder = require('./ContractByteArrayEncoder')\nconst AciTypeResolver = require('./AciTypeResolver')\nconst ApiEncoder = require('./ApiEncoder')\nconst EventEncoder = require('./EventEncoder')\nconst CanonicalMapper = require('./Mapper/CanonicalMapper')\nconst {FateTypeCalldata, FateTypeString} = require('./FateTypes')\nconst EncoderError = require('./Errors/EncoderError')\n\nclass AciContractCallEncoder {\n    /**\n     * Creates contract encoder using ACI as type info provider\n     *\n     * @example\n     * const ACI = require('./Test.json')\n     * const encoder = new AciContractCallEncoder(ACI)\n     *\n     * @param {Object} aci - The contract ACI in a canonical (CLI compiler) form as POJO.\n    */\n    constructor(aci) {\n        /** @type {ContractByteArrayEncoder} */\n        this._byteArrayEncoder = new ContractByteArrayEncoder()\n\n        /** @type {AciTypeResolver} */\n        this._typeResolver = new AciTypeResolver(aci)\n\n        /** @type {ApiEncoder} */\n        this._apiEncoder = new ApiEncoder()\n\n        /** @type {EventEncoder} */\n        this._eventEncoder = new EventEncoder()\n\n        /** @type {CanonicalMapper} */\n        this._canonicalMapper = new CanonicalMapper()\n    }\n\n    /**\n     * Creates contract call data\n     *\n     * @example\n     * const encoded = encoder.encodeCall('Test', 'test_string', [\"whoolymoly\"])\n     * console.log(`Encoded data: ${encoded}`)\n     * // Outputs:\n     * // Encoded data: cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} funName - The function name as defined in the ACI.\n     * @param {Array} args - An array of call arguments as Javascript data structures. See README.md\n     * @returns {string} Encoded calldata\n    */\n    encodeCall(contract, funName, args) {\n        const {types, required} = this._typeResolver.getCallTypes(contract, funName)\n\n        if (args.length > types.length || args.length < required) {\n            throw new EncoderError(\n                'Non matching number of arguments. '\n                + `${funName} expects between ${required} and ${types.length} number of arguments but got ${args.length}`\n            )\n        }\n\n        // fill in the options arguments\n        while (args.length < types.length) {\n            args.push(undefined)\n        }\n\n        return this._byteArrayEncoder.encode(FateTypeCalldata(funName, types), args)\n    }\n\n    /**\n     * Decodes contract calldata\n     *\n     * @example\n     * const data = encoder.decodeCall('Test', 'test_string', 'cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==')\n     * console.log(`Decoded data: ${data}`)\n     * // Outputs:\n     * // Decoded data: [\"whoolymoly\"]\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} funName - The function name as defined in the ACI.\n     * @param {string} data - Encoded calldata in canonical format.\n     * @returns {string} Decoded data\n    */\n    decodeCall(contract, funName, data) {\n        const {types, _required} = this._typeResolver.getCallTypes(contract, funName)\n        const calldataType = FateTypeCalldata(funName, types)\n\n        return this._byteArrayEncoder.decodeWithType(data, calldataType)\n    }\n\n    /**\n     * Decodes successful (resultType = ok) contract call return data\n     *\n     * @example\n     * const decoded = encoder.decode('Test', 'test_string', 'cb_KXdob29seW1vbHlGazSE')\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} funName - The function name as defined in the ACI.\n     * @param {string} data - The call return value in a canonical format.\n     * @param {'ok'|'revert'|'error'} resultType - The call result type.\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decodeResult(contract, funName, data, resultType = 'ok') {\n        if (resultType === 'ok') {\n            const type = this._typeResolver.getReturnType(contract, funName)\n\n            return this._byteArrayEncoder.decodeWithType(data, type)\n        }\n\n        if (resultType === 'error') {\n            const decoder = new TextDecoder()\n            const bytes = this._apiEncoder.decodeWithType(data, 'contract_bytearray')\n\n            return decoder.decode(bytes)\n        }\n\n        if (resultType === 'revert') {\n            return this._byteArrayEncoder.decodeWithType(data, FateTypeString())\n        }\n\n        throw new EncoderError(`Unknown call result type: \"${resultType}\"`)\n    }\n\n    /**\n     * Decodes contract event\n     *\n     * @example\n     * const data = encoder.decodeEvent('Test', 'cb_dHJpZ2dlcmVk1FYuYA==', [\n     *     34853523142692495808479485503424878684430196596020091237715106250497712463899n,\n     *     17\n     * ])\n     * console.log(data)\n     * // Outputs:\n     * // {EventTwo: [17n, 'triggered']}\n     *\n     * @param {string} contract - The contract name as defined in the ACI.\n     * @param {string} encodedData - Event encoded data\n     * @param {BigInt[]} topics - A list of event topics.\n     * First element should be the implicit topic that carry the event constructor name.\n     */\n    decodeEvent(contract, data, topics) {\n        const type = this._typeResolver.getEventType(contract, topics)\n\n        return this._eventEncoder.decodeWithType(data, type)\n    }\n}\n\nmodule.exports = AciContractCallEncoder\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
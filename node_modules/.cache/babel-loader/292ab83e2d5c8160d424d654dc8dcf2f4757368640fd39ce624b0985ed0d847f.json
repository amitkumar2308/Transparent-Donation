{"ast":null,"code":"const FateTag = require('../FateTag');\nconst BaseSerializer = require('./BaseSerializer');\nconst FateByteArray = require('../types/FateByteArray');\nconst IntSerializer = require('./IntSerializer');\nconst intSerializer = new IntSerializer();\nclass ByteArraySerializer extends BaseSerializer {\n  serialize(data) {\n    if (data.length === 0) {\n      return [FateTag.EMPTY_STRING];\n    }\n    if (data.length < 64) {\n      const prefix = data.length << 2 | FateTag.SHORT_STRING;\n      return [prefix, ...data.valueOf()];\n    }\n    return [FateTag.LONG_STRING, ...intSerializer.serialize(data.length - 64), ...data.valueOf()];\n  }\n  deserializeStream(stream) {\n    const data = new Uint8Array(stream);\n    const prefix = data[0];\n    if (prefix === FateTag.EMPTY_STRING) {\n      return [new FateByteArray(), data.slice(1)];\n    }\n    if (prefix === FateTag.LONG_STRING) {\n      const [fateLen, rest] = intSerializer.deserializeStream(data.slice(1));\n      const len = Number(fateLen.valueOf()) + 64;\n      return [new FateByteArray(rest.slice(0, len)), rest.slice(len)];\n    }\n\n    // short string\n    const offset = (prefix >> 2) + 1;\n    return [new FateByteArray(data.slice(1, offset)), data.slice(offset)];\n  }\n}\nmodule.exports = ByteArraySerializer;","map":{"version":3,"names":["FateTag","require","BaseSerializer","FateByteArray","IntSerializer","intSerializer","ByteArraySerializer","serialize","data","length","EMPTY_STRING","prefix","SHORT_STRING","valueOf","LONG_STRING","deserializeStream","stream","Uint8Array","slice","fateLen","rest","len","Number","offset","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/ByteArraySerializer.js"],"sourcesContent":["const FateTag = require('../FateTag')\nconst BaseSerializer = require('./BaseSerializer')\nconst FateByteArray = require('../types/FateByteArray')\nconst IntSerializer = require('./IntSerializer')\n\nconst intSerializer = new IntSerializer()\n\nclass ByteArraySerializer extends BaseSerializer {\n    serialize(data) {\n        if (data.length === 0) {\n            return [FateTag.EMPTY_STRING]\n        }\n\n        if (data.length < 64) {\n            const prefix = (data.length << 2) | FateTag.SHORT_STRING\n\n            return [\n                prefix,\n                ...data.valueOf()\n            ]\n        }\n\n        return [\n            FateTag.LONG_STRING,\n            ...intSerializer.serialize(data.length - 64),\n            ...data.valueOf()\n        ]\n    }\n\n    deserializeStream(stream) {\n        const data = new Uint8Array(stream)\n        const prefix = data[0]\n\n        if (prefix === FateTag.EMPTY_STRING) {\n            return [\n                new FateByteArray(),\n                data.slice(1)\n            ]\n        }\n\n        if (prefix === FateTag.LONG_STRING) {\n            const [fateLen, rest] = intSerializer.deserializeStream(data.slice(1))\n            const len = Number(fateLen.valueOf()) + 64\n\n            return [\n                new FateByteArray(rest.slice(0, len)),\n                rest.slice(len)\n            ]\n        }\n\n        // short string\n        const offset = (prefix >> 2) + 1\n\n        return [\n            new FateByteArray(data.slice(1, offset)),\n            data.slice(offset)\n        ]\n    }\n}\n\nmodule.exports = ByteArraySerializer\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC;AACrC,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAME,aAAa,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAEhD,MAAMI,aAAa,GAAG,IAAID,aAAa,CAAC,CAAC;AAEzC,MAAME,mBAAmB,SAASJ,cAAc,CAAC;EAC7CK,SAASA,CAACC,IAAI,EAAE;IACZ,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACnB,OAAO,CAACT,OAAO,CAACU,YAAY,CAAC;IACjC;IAEA,IAAIF,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;MAClB,MAAME,MAAM,GAAIH,IAAI,CAACC,MAAM,IAAI,CAAC,GAAIT,OAAO,CAACY,YAAY;MAExD,OAAO,CACHD,MAAM,EACN,GAAGH,IAAI,CAACK,OAAO,CAAC,CAAC,CACpB;IACL;IAEA,OAAO,CACHb,OAAO,CAACc,WAAW,EACnB,GAAGT,aAAa,CAACE,SAAS,CAACC,IAAI,CAACC,MAAM,GAAG,EAAE,CAAC,EAC5C,GAAGD,IAAI,CAACK,OAAO,CAAC,CAAC,CACpB;EACL;EAEAE,iBAAiBA,CAACC,MAAM,EAAE;IACtB,MAAMR,IAAI,GAAG,IAAIS,UAAU,CAACD,MAAM,CAAC;IACnC,MAAML,MAAM,GAAGH,IAAI,CAAC,CAAC,CAAC;IAEtB,IAAIG,MAAM,KAAKX,OAAO,CAACU,YAAY,EAAE;MACjC,OAAO,CACH,IAAIP,aAAa,CAAC,CAAC,EACnBK,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAChB;IACL;IAEA,IAAIP,MAAM,KAAKX,OAAO,CAACc,WAAW,EAAE;MAChC,MAAM,CAACK,OAAO,EAAEC,IAAI,CAAC,GAAGf,aAAa,CAACU,iBAAiB,CAACP,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;MACtE,MAAMG,GAAG,GAAGC,MAAM,CAACH,OAAO,CAACN,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;MAE1C,OAAO,CACH,IAAIV,aAAa,CAACiB,IAAI,CAACF,KAAK,CAAC,CAAC,EAAEG,GAAG,CAAC,CAAC,EACrCD,IAAI,CAACF,KAAK,CAACG,GAAG,CAAC,CAClB;IACL;;IAEA;IACA,MAAME,MAAM,GAAG,CAACZ,MAAM,IAAI,CAAC,IAAI,CAAC;IAEhC,OAAO,CACH,IAAIR,aAAa,CAACK,IAAI,CAACU,KAAK,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAC,EACxCf,IAAI,CAACU,KAAK,CAACK,MAAM,CAAC,CACrB;EACL;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGnB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
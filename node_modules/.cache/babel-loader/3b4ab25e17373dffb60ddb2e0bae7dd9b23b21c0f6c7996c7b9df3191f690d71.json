{"ast":null,"code":"const FateTag = require('../FateTag');\nconst BaseSerializer = require('./BaseSerializer');\nconst IntSerializer = require('./IntSerializer');\nconst FatePrefixError = require('../Errors/FatePrefixError');\nconst {\n  FateTypeInt,\n  FateTypeBool,\n  FateTypeString,\n  FateTypeBits,\n  FateTypeBytes,\n  FateTypeAccountAddress,\n  FateTypeContractAddress,\n  FateTypeOracleAddress,\n  FateTypeOracleQueryAddress,\n  FateTypeChannelAddress,\n  FateTypeList,\n  FateTypeMap,\n  FateTypeTuple,\n  FateTypeVariant,\n  FateTypeVar,\n  FateTypeAny\n} = require('../FateTypes');\nconst BASIC_TYPES = {\n  [FateTag.TYPE_INTEGER]: FateTypeInt(),\n  [FateTag.TYPE_BOOLEAN]: FateTypeBool(),\n  [FateTag.TYPE_BITS]: FateTypeBits(),\n  [FateTag.TYPE_STRING]: FateTypeString(),\n  [FateTag.TYPE_ANY]: FateTypeAny()\n};\nconst OBJECT_TYPES = {\n  [FateTag.OTYPE_ADDRESS]: FateTypeAccountAddress(),\n  [FateTag.OTYPE_CONTRACT]: FateTypeContractAddress(),\n  [FateTag.OTYPE_ORACLE]: FateTypeOracleAddress(),\n  [FateTag.OTYPE_ORACLE_QUERY]: FateTypeOracleQueryAddress(),\n  [FateTag.OTYPE_CHANNEL]: FateTypeChannelAddress()\n};\nclass TypeSerializer extends BaseSerializer {\n  constructor(globalSerializer) {\n    super(globalSerializer);\n    this._intSerializer = new IntSerializer();\n  }\n  deserializeStream(data) {\n    const buffer = new Uint8Array(data);\n    const prefix = buffer[0];\n    if (BASIC_TYPES.hasOwnProperty(prefix)) {\n      return [BASIC_TYPES[prefix], buffer.slice(1)];\n    }\n    if (prefix === FateTag.TYPE_OBJECT) {\n      const obj = buffer[1];\n      if (!OBJECT_TYPES.hasOwnProperty(obj)) {\n        throw new FatePrefixError(obj, 'Unsupported object type');\n      }\n      return [OBJECT_TYPES[obj], buffer.slice(2)];\n    }\n    if (prefix === FateTag.TYPE_VAR) {\n      return [FateTypeVar(buffer[1]), buffer.slice(2)];\n    }\n    if (prefix === FateTag.TYPE_BYTES) {\n      const [size, rest] = this._intSerializer.deserializeStream(buffer.slice(1));\n      return [FateTypeBytes(size.valueOf()), rest];\n    }\n    if (prefix === FateTag.TYPE_LIST) {\n      const [elementsType, rest] = this.deserializeStream(buffer.slice(1));\n      return [FateTypeList(elementsType), rest];\n    }\n    if (prefix === FateTag.TYPE_MAP) {\n      const [keyType, rest] = this.deserializeStream(buffer.slice(1));\n      const [valueType, rest2] = this.deserializeStream(rest);\n      return [FateTypeMap(keyType, valueType), rest2];\n    }\n    if (prefix === FateTag.TYPE_TUPLE) {\n      const size = buffer[1];\n      const elementTypes = [];\n      let rest = buffer.slice(2);\n      let el;\n      for (let i = 0; i < size; i++) {\n        [el, rest] = this.deserializeStream(rest);\n        elementTypes.push(el);\n      }\n      return [FateTypeTuple(elementTypes), rest];\n    }\n    if (prefix === FateTag.TYPE_VARIANT) {\n      const size = buffer[1];\n      const variants = [];\n      let rest = buffer.slice(2);\n      let el;\n      for (let i = 0; i < size; i++) {\n        [el, rest] = this.deserializeStream(rest);\n        variants.push(el);\n      }\n      return [FateTypeVariant(variants), rest];\n    }\n    throw new FatePrefixError(prefix);\n  }\n}\nmodule.exports = TypeSerializer;","map":{"version":3,"names":["FateTag","require","BaseSerializer","IntSerializer","FatePrefixError","FateTypeInt","FateTypeBool","FateTypeString","FateTypeBits","FateTypeBytes","FateTypeAccountAddress","FateTypeContractAddress","FateTypeOracleAddress","FateTypeOracleQueryAddress","FateTypeChannelAddress","FateTypeList","FateTypeMap","FateTypeTuple","FateTypeVariant","FateTypeVar","FateTypeAny","BASIC_TYPES","TYPE_INTEGER","TYPE_BOOLEAN","TYPE_BITS","TYPE_STRING","TYPE_ANY","OBJECT_TYPES","OTYPE_ADDRESS","OTYPE_CONTRACT","OTYPE_ORACLE","OTYPE_ORACLE_QUERY","OTYPE_CHANNEL","TypeSerializer","constructor","globalSerializer","_intSerializer","deserializeStream","data","buffer","Uint8Array","prefix","hasOwnProperty","slice","TYPE_OBJECT","obj","TYPE_VAR","TYPE_BYTES","size","rest","valueOf","TYPE_LIST","elementsType","TYPE_MAP","keyType","valueType","rest2","TYPE_TUPLE","elementTypes","el","i","push","TYPE_VARIANT","variants","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/TypeSerializer.js"],"sourcesContent":["const FateTag = require('../FateTag')\nconst BaseSerializer = require('./BaseSerializer')\nconst IntSerializer = require('./IntSerializer')\nconst FatePrefixError = require('../Errors/FatePrefixError')\nconst {\n    FateTypeInt,\n    FateTypeBool,\n    FateTypeString,\n    FateTypeBits,\n    FateTypeBytes,\n    FateTypeAccountAddress,\n    FateTypeContractAddress,\n    FateTypeOracleAddress,\n    FateTypeOracleQueryAddress,\n    FateTypeChannelAddress,\n    FateTypeList,\n    FateTypeMap,\n    FateTypeTuple,\n    FateTypeVariant,\n    FateTypeVar,\n    FateTypeAny,\n} = require('../FateTypes')\n\nconst BASIC_TYPES = {\n    [FateTag.TYPE_INTEGER]: FateTypeInt(),\n    [FateTag.TYPE_BOOLEAN]: FateTypeBool(),\n    [FateTag.TYPE_BITS]: FateTypeBits(),\n    [FateTag.TYPE_STRING]: FateTypeString(),\n    [FateTag.TYPE_ANY]: FateTypeAny(),\n}\n\nconst OBJECT_TYPES = {\n    [FateTag.OTYPE_ADDRESS]: FateTypeAccountAddress(),\n    [FateTag.OTYPE_CONTRACT]: FateTypeContractAddress(),\n    [FateTag.OTYPE_ORACLE]: FateTypeOracleAddress(),\n    [FateTag.OTYPE_ORACLE_QUERY]: FateTypeOracleQueryAddress(),\n    [FateTag.OTYPE_CHANNEL]: FateTypeChannelAddress(),\n}\n\nclass TypeSerializer extends BaseSerializer {\n    constructor(globalSerializer) {\n        super(globalSerializer)\n\n        this._intSerializer = new IntSerializer()\n    }\n\n    deserializeStream(data) {\n        const buffer = new Uint8Array(data)\n        const prefix = buffer[0]\n\n        if (BASIC_TYPES.hasOwnProperty(prefix)) {\n            return [BASIC_TYPES[prefix], buffer.slice(1)]\n        }\n\n        if (prefix === FateTag.TYPE_OBJECT) {\n            const obj = buffer[1]\n\n            if (!OBJECT_TYPES.hasOwnProperty(obj)) {\n                throw new FatePrefixError(obj, 'Unsupported object type')\n            }\n\n            return [OBJECT_TYPES[obj], buffer.slice(2)]\n        }\n\n        if (prefix === FateTag.TYPE_VAR) {\n            return [FateTypeVar(buffer[1]), buffer.slice(2)]\n        }\n\n        if (prefix === FateTag.TYPE_BYTES) {\n            const [size, rest] = this._intSerializer.deserializeStream(buffer.slice(1))\n\n            return [FateTypeBytes(size.valueOf()), rest]\n        }\n\n        if (prefix === FateTag.TYPE_LIST) {\n            const [elementsType, rest] = this.deserializeStream(buffer.slice(1))\n\n            return [FateTypeList(elementsType), rest]\n        }\n\n        if (prefix === FateTag.TYPE_MAP) {\n            const [keyType, rest] = this.deserializeStream(buffer.slice(1))\n            const [valueType, rest2] = this.deserializeStream(rest)\n\n            return [FateTypeMap(keyType, valueType), rest2]\n        }\n\n        if (prefix === FateTag.TYPE_TUPLE) {\n            const size = buffer[1]\n            const elementTypes = []\n            let rest = buffer.slice(2)\n            let el\n\n            for (let i = 0; i < size; i++) {\n                [el, rest] = this.deserializeStream(rest)\n                elementTypes.push(el)\n            }\n\n            return [FateTypeTuple(elementTypes), rest]\n        }\n\n        if (prefix === FateTag.TYPE_VARIANT) {\n            const size = buffer[1]\n            const variants = []\n            let rest = buffer.slice(2)\n            let el\n\n            for (let i = 0; i < size; i++) {\n                [el, rest] = this.deserializeStream(rest)\n                variants.push(el)\n            }\n\n            return [FateTypeVariant(variants), rest]\n        }\n\n        throw new FatePrefixError(prefix)\n    }\n}\n\nmodule.exports = TypeSerializer\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const assert = require('./utils/assert');\nconst FateList = require('./types/FateList');\nconst FateTuple = require('./types/FateTuple');\nconst {\n  FateTypeTuple,\n  FateTypeInt\n} = require('./FateTypes');\n\n/* eslint-disable no-use-before-define */\n\n// TODO types comparator\nconst listComparator = (a, b) => {\n  if (a.length === 0) {\n    return -1;\n  }\n  if (b.length === 0) {\n    return 1;\n  }\n  const cmp = FateComparator(a.itemsType);\n  for (let i = 0; i < a.length; i++) {\n    // second list is shorter but matches as prefix of the first one\n    if (typeof b.items[i] === 'undefined') {\n      return 1;\n    }\n\n    // element difference\n    const diff = cmp(a.items[i], b.items[i]);\n    if (diff !== 0) {\n      return diff;\n    }\n  }\n\n  // if there is no early return from the loop above\n  // then the first list match a prefix of the second\n\n  // equal lists\n  if (a.length === b.length) {\n    return 0;\n  }\n\n  // first list is shorter, thus smaller\n  return -1;\n};\nconst tupleComparator = (a, b) => {\n  if (a.size === 0) {\n    return -1;\n  }\n  const sizeDiff = a.size - b.size;\n  if (sizeDiff !== 0) {\n    return sizeDiff;\n  }\n\n  // equal size - compare elements\n  for (let i = 0; i < a.size; i++) {\n    const valTypeA = a.valueTypes[i];\n\n    // TODO support different types ?\n\n    const diff = FateComparator(valTypeA)(a.items[i], b.items[i]);\n    if (diff !== 0) {\n      return diff;\n    }\n  }\n\n  // equal tuples\n  return 0;\n};\nconst variantComparator = (a, b) => {\n  const aDiff = a.arities.length - b.arities.length;\n  if (aDiff !== 0) {\n    return aDiff;\n  }\n  const aList = new FateList(a.aritiesType, a.arities);\n  const bList = new FateList(b.aritiesType, b.arities);\n  const aComparator = FateComparator(aList);\n  const lDiff = aComparator(aList, bList);\n  if (lDiff !== 0) {\n    return lDiff;\n  }\n  const tDiff = a.tag - b.tag;\n  if (tDiff !== 0) {\n    return tDiff;\n  }\n\n  // equal arities and tags - compare elements\n  const elementsComparator = FateComparator(FateTypeTuple());\n  return elementsComparator(new FateTuple(a.valueTypes, a.value), new FateTuple(b.valueTypes, b.value));\n};\nconst mapItemComparator = type => {\n  const keyComparator = FateComparator(type);\n  return (a, b) => keyComparator(a.key, b.key);\n};\nconst mapComparator = (a, b) => {\n  const aItems = [...a.items];\n  const bItems = [...b.items];\n  aItems.sort(mapItemComparator(a.keyType));\n  bItems.sort(mapItemComparator(b.keyType));\n  const keyComparator = FateComparator(a.keyType);\n  const valueComparator = FateComparator(a.valueType);\n  for (let i = 0; i < aItems.length; i++) {\n    // second map is smaller (less items)\n    if (typeof bItems[i] === 'undefined') {\n      return 1;\n    }\n    const aItem = aItems[i];\n    const bItem = bItems[i];\n    const kDiff = keyComparator(aItem.key, bItem.key);\n    if (kDiff !== 0) {\n      return kDiff;\n    }\n    const vDiff = valueComparator(aItem.value, bItem.value);\n    if (vDiff !== 0) {\n      return vDiff;\n    }\n  }\n\n  // equal number of items\n  if (aItems.length === bItems.length) {\n    return 0;\n  }\n\n  // first map item list is shorter, thus smaller\n  return -1;\n};\nconst bytesComparator = (a, b) => {\n  const aList = new FateList(FateTypeInt(), a.valueOf());\n  const bList = new FateList(FateTypeInt(), b.valueOf());\n  return listComparator(aList, bList);\n};\nconst stringComparator = (a, b) => {\n  const encoder = new TextEncoder();\n  const as = a.toString();\n  const bs = b.toString();\n  if (as.length === bs.length) {\n    return bytesComparator(encoder.encode(a), encoder.encode(b));\n  }\n  return as.length - bs.length;\n};\nconst intComparator = (a, b) => Number(BigInt(a) - BigInt(b));\nconst boolComparator = (a, b) => a - b;\nconst bitsComparator = (a, b) => {\n  return a < 0 || b < 0 ? -intComparator(a, b) : intComparator(a, b);\n};\nconst comparators = {\n  'int': intComparator,\n  'bool': boolComparator,\n  'string': stringComparator,\n  'bits': bitsComparator,\n  // composite types\n  'list': listComparator,\n  'tuple': tupleComparator,\n  'variant': variantComparator,\n  'map': mapComparator,\n  // objects (bytes)\n  'bytes': bytesComparator,\n  'account_pubkey': bytesComparator,\n  'channel': bytesComparator,\n  'contract_pubkey': bytesComparator,\n  'oracle_query_id': bytesComparator,\n  'oracle_pubkey': bytesComparator\n};\nconst FateComparator = type => {\n  assert(type.hasOwnProperty('name'), `Cannot determine type name of ${JSON.stringify(type)}`);\n  assert(comparators.hasOwnProperty(type.name), `Unsupported comparator for ${type.name}`);\n  return comparators[type.name];\n};\nmodule.exports = FateComparator;","map":{"version":3,"names":["assert","require","FateList","FateTuple","FateTypeTuple","FateTypeInt","listComparator","a","b","length","cmp","FateComparator","itemsType","i","items","diff","tupleComparator","size","sizeDiff","valTypeA","valueTypes","variantComparator","aDiff","arities","aList","aritiesType","bList","aComparator","lDiff","tDiff","tag","elementsComparator","value","mapItemComparator","type","keyComparator","key","mapComparator","aItems","bItems","sort","keyType","valueComparator","valueType","aItem","bItem","kDiff","vDiff","bytesComparator","valueOf","stringComparator","encoder","TextEncoder","as","toString","bs","encode","intComparator","Number","BigInt","boolComparator","bitsComparator","comparators","hasOwnProperty","JSON","stringify","name","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/FateComparator.js"],"sourcesContent":["const assert = require('./utils/assert')\nconst FateList = require('./types/FateList')\nconst FateTuple = require('./types/FateTuple')\nconst {FateTypeTuple, FateTypeInt} = require('./FateTypes')\n\n/* eslint-disable no-use-before-define */\n\n// TODO types comparator\nconst listComparator = (a, b) => {\n    if (a.length === 0) {\n        return -1\n    }\n\n    if (b.length === 0) {\n        return 1\n    }\n\n    const cmp = FateComparator(a.itemsType)\n    for (let i = 0; i < a.length; i++) {\n        // second list is shorter but matches as prefix of the first one\n        if (typeof b.items[i] === 'undefined') {\n            return 1\n        }\n\n        // element difference\n        const diff = cmp(a.items[i], b.items[i])\n        if (diff !== 0) {\n            return diff\n        }\n    }\n\n    // if there is no early return from the loop above\n    // then the first list match a prefix of the second\n\n    // equal lists\n    if (a.length === b.length) {\n        return 0\n    }\n\n    // first list is shorter, thus smaller\n    return -1\n}\n\nconst tupleComparator = (a, b) => {\n    if (a.size === 0) {\n        return -1\n    }\n\n    const sizeDiff = a.size - b.size\n    if (sizeDiff !== 0) {\n        return sizeDiff\n    }\n\n    // equal size - compare elements\n    for (let i = 0; i < a.size; i++) {\n        const valTypeA = a.valueTypes[i]\n\n        // TODO support different types ?\n\n        const diff = FateComparator(valTypeA)(a.items[i], b.items[i])\n        if (diff !== 0) {\n            return diff\n        }\n    }\n\n    // equal tuples\n    return 0\n}\n\nconst variantComparator = (a, b) => {\n    const aDiff = a.arities.length - b.arities.length\n    if (aDiff !== 0) {\n        return aDiff\n    }\n\n    const aList = new FateList(a.aritiesType, a.arities)\n    const bList = new FateList(b.aritiesType, b.arities)\n    const aComparator = FateComparator(aList)\n\n    const lDiff = aComparator(aList, bList)\n    if (lDiff !== 0) {\n        return lDiff\n    }\n\n    const tDiff = a.tag - b.tag\n    if (tDiff !== 0) {\n        return tDiff\n    }\n\n    // equal arities and tags - compare elements\n    const elementsComparator = FateComparator(FateTypeTuple())\n\n    return elementsComparator(\n        new FateTuple(a.valueTypes, a.value),\n        new FateTuple(b.valueTypes, b.value)\n    )\n}\n\nconst mapItemComparator = (type) => {\n    const keyComparator = FateComparator(type)\n    return (a, b) => keyComparator(a.key, b.key)\n}\n\nconst mapComparator = (a, b) => {\n    const aItems = [...a.items]\n    const bItems = [...b.items]\n\n    aItems.sort(mapItemComparator(a.keyType))\n    bItems.sort(mapItemComparator(b.keyType))\n\n    const keyComparator = FateComparator(a.keyType)\n    const valueComparator = FateComparator(a.valueType)\n\n    for (let i = 0; i < aItems.length; i++) {\n        // second map is smaller (less items)\n        if (typeof bItems[i] === 'undefined') {\n            return 1\n        }\n\n        const aItem = aItems[i]\n        const bItem = bItems[i]\n\n        const kDiff = keyComparator(aItem.key, bItem.key)\n        if (kDiff !== 0) {\n            return kDiff\n        }\n\n        const vDiff = valueComparator(aItem.value, bItem.value)\n        if (vDiff !== 0) {\n            return vDiff\n        }\n    }\n\n    // equal number of items\n    if (aItems.length === bItems.length) {\n        return 0\n    }\n\n    // first map item list is shorter, thus smaller\n    return -1\n}\n\nconst bytesComparator = (a, b) => {\n    const aList = new FateList(FateTypeInt(), a.valueOf())\n    const bList = new FateList(FateTypeInt(), b.valueOf())\n\n    return listComparator(aList, bList)\n}\n\nconst stringComparator = (a, b) => {\n    const encoder = new TextEncoder()\n\n    const as = a.toString()\n    const bs = b.toString()\n\n    if (as.length === bs.length) {\n        return bytesComparator(encoder.encode(a), encoder.encode(b))\n    }\n\n    return as.length - bs.length\n}\n\nconst intComparator = (a, b) => Number(BigInt(a) - BigInt(b))\nconst boolComparator = (a, b) => a - b\nconst bitsComparator = (a, b) => {\n    return (a < 0 || b < 0) ? -intComparator(a, b) : intComparator(a, b)\n}\n\nconst comparators = {\n    'int': intComparator,\n    'bool': boolComparator,\n    'string': stringComparator,\n    'bits': bitsComparator,\n    // composite types\n    'list': listComparator,\n    'tuple': tupleComparator,\n    'variant': variantComparator,\n    'map': mapComparator,\n    // objects (bytes)\n    'bytes': bytesComparator,\n    'account_pubkey': bytesComparator,\n    'channel': bytesComparator,\n    'contract_pubkey': bytesComparator,\n    'oracle_query_id': bytesComparator,\n    'oracle_pubkey': bytesComparator,\n}\n\nconst FateComparator = (type) => {\n    assert(type.hasOwnProperty('name'), `Cannot determine type name of ${JSON.stringify(type)}`)\n    assert(comparators.hasOwnProperty(type.name), `Unsupported comparator for ${type.name}`)\n\n    return comparators[type.name]\n}\n\nmodule.exports = FateComparator\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
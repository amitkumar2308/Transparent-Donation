{"ast":null,"code":"const InternalEncoder = require('../BytecodeContractCallEncoder');\nclass BytecodeContractCallEncoder {\n  /**\n   * Creates contract encoder using bytecode as type info provider\n   *\n   * @example\n   * const bytecode = require('./Test.aeb')\n   * const encoder = new BytecodeContractCallEncoder(bytecode)\n   *\n   * @param {string} bytecode - Contract bytecode using cannonical format.\n  */\n  constructor(bytecode) {\n    this._internalEncoder = new InternalEncoder(bytecode);\n  }\n\n  /**\n   * Creates contract call data\n   *\n   * @example\n   * const encoded = encoder.encodeCall('test_string', [\"whoolymoly\"])\n   * console.log(`Encoded data: ${encoded}`)\n   * // Outputs:\n   * // Encoded data: cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==\n   *\n   * @param {string} funName - The function name as defined in the bytecode.\n   * @param {Array} args - An array of call arguments as Javascript data structures. See README.md\n   * @returns {string} Encoded calldata\n  */\n  encodeCall(funName, args) {\n    return this._internalEncoder.encodeCall(funName, args);\n  }\n\n  /**\n   * Decodes contract calldata\n   *\n   * @example\n   * const data = encoder.decodeCall('cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==')\n   * console.log('Decoded data:', data)\n   * // Outputs:\n   * // Decoded data: {\n   * //   functionId: 'aee52c3c',\n   * //   functionName: 'test_template_maze',\n   * //   args: [ 'whoolymoly' ]\n   * // }\n   *\n   * @param {string} data - Encoded calldata in canonical format.\n   * @returns {object} Decoded calldata\n  */\n  decodeCall(data) {\n    return this._internalEncoder.decodeCall(data);\n  }\n\n  /**\n   * Decodes successful (resultType = ok) contract call return data\n   *\n   * @example\n   * const decoded = encoder.decode('test_string', 'cb_KXdob29seW1vbHlGazSE')\n   * console.log(`Decoded data: ${decoded}`)\n   * // Outputs:\n   * // Decoded data: whoolymoly\n   *\n   * @param {string} data - The call return value in a canonical format.\n   * @param {'ok'|'revert'|'error'} resultType - The call result type.\n   * @returns {boolean|string|BigInt|Array|Map|Object}\n   *  Decoded value as Javascript data structures. See README.md\n  */\n  decodeResult(data, resultType = 'ok') {\n    return this._internalEncoder.decodeResult(data, resultType);\n  }\n}\nmodule.exports = BytecodeContractCallEncoder;","map":{"version":3,"names":["InternalEncoder","require","BytecodeContractCallEncoder","constructor","bytecode","_internalEncoder","encodeCall","funName","args","decodeCall","data","decodeResult","resultType","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/api/BytecodeContractCallEncoder.js"],"sourcesContent":["const InternalEncoder = require('../BytecodeContractCallEncoder')\n\nclass BytecodeContractCallEncoder {\n    /**\n     * Creates contract encoder using bytecode as type info provider\n     *\n     * @example\n     * const bytecode = require('./Test.aeb')\n     * const encoder = new BytecodeContractCallEncoder(bytecode)\n     *\n     * @param {string} bytecode - Contract bytecode using cannonical format.\n    */\n    constructor(bytecode) {\n        this._internalEncoder = new InternalEncoder(bytecode)\n    }\n\n    /**\n     * Creates contract call data\n     *\n     * @example\n     * const encoded = encoder.encodeCall('test_string', [\"whoolymoly\"])\n     * console.log(`Encoded data: ${encoded}`)\n     * // Outputs:\n     * // Encoded data: cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==\n     *\n     * @param {string} funName - The function name as defined in the bytecode.\n     * @param {Array} args - An array of call arguments as Javascript data structures. See README.md\n     * @returns {string} Encoded calldata\n    */\n    encodeCall(funName, args) {\n        return this._internalEncoder.encodeCall(funName, args)\n    }\n\n    /**\n     * Decodes contract calldata\n     *\n     * @example\n     * const data = encoder.decodeCall('cb_KxHwzCuVGyl3aG9vbHltb2x5zwMSnw==')\n     * console.log('Decoded data:', data)\n     * // Outputs:\n     * // Decoded data: {\n     * //   functionId: 'aee52c3c',\n     * //   functionName: 'test_template_maze',\n     * //   args: [ 'whoolymoly' ]\n     * // }\n     *\n     * @param {string} data - Encoded calldata in canonical format.\n     * @returns {object} Decoded calldata\n    */\n    decodeCall(data) {\n        return this._internalEncoder.decodeCall(data)\n    }\n\n    /**\n     * Decodes successful (resultType = ok) contract call return data\n     *\n     * @example\n     * const decoded = encoder.decode('test_string', 'cb_KXdob29seW1vbHlGazSE')\n     * console.log(`Decoded data: ${decoded}`)\n     * // Outputs:\n     * // Decoded data: whoolymoly\n     *\n     * @param {string} data - The call return value in a canonical format.\n     * @param {'ok'|'revert'|'error'} resultType - The call result type.\n     * @returns {boolean|string|BigInt|Array|Map|Object}\n     *  Decoded value as Javascript data structures. See README.md\n    */\n    decodeResult(data, resultType = 'ok') {\n        return this._internalEncoder.decodeResult(data, resultType)\n    }\n}\n\nmodule.exports = BytecodeContractCallEncoder\n"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAEjE,MAAMC,2BAA2B,CAAC;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACC,gBAAgB,GAAG,IAAIL,eAAe,CAACI,QAAQ,CAAC;EACzD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,UAAUA,CAACC,OAAO,EAAEC,IAAI,EAAE;IACtB,OAAO,IAAI,CAACH,gBAAgB,CAACC,UAAU,CAACC,OAAO,EAAEC,IAAI,CAAC;EAC1D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,IAAI,EAAE;IACb,OAAO,IAAI,CAACL,gBAAgB,CAACI,UAAU,CAACC,IAAI,CAAC;EACjD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACD,IAAI,EAAEE,UAAU,GAAG,IAAI,EAAE;IAClC,OAAO,IAAI,CAACP,gBAAgB,CAACM,YAAY,CAACD,IAAI,EAAEE,UAAU,CAAC;EAC/D;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGZ,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}
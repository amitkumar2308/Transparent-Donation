{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs3/helpers/defineProperty\";\nimport { CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError } from \"./utils/errors.mjs\";\nimport AeSdkMethods, { getValueOrErrorProxy } from \"./AeSdkMethods.mjs\";\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor() {\n    let {\n      nodes = [],\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    _defineProperty(this, \"pool\", new Map());\n    nodes.forEach((_ref, i) => {\n      let {\n        name,\n        instance\n      } = _ref;\n      return this.addNode(name, instance, i === 0);\n    });\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi() {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n  get api() {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName);\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name, node) {\n    let select = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name) {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected() {\n    return this.selectedNodeName != null;\n  }\n  ensureNodeConnected() {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo() {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...(await this.api.getNodeInfo())\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool() {\n    return Promise.all(Array.from(this.pool.entries()).map(async _ref2 => {\n      let [name, node] = _ref2;\n      return {\n        name,\n        ...(await node.getNodeInfo())\n      };\n    }));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses() {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount() {\n    let account = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._options.onAccount;\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError('Account should be an address (ak-prefixed string), ' + `or instance of AccountBase, got ${String(account)} instead`);\n  }\n  get address() {\n    return this._resolveAccount().address;\n  }\n  async sign(data) {\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n  async signTransaction(tx) {\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, {\n      networkId,\n      ...options\n    });\n  }\n  async signMessage(message) {\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n  async signTypedData(data, aci) {\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n  async signDelegationToContract(contractAddress) {\n    var _options$networkId;\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (_options$networkId = options.networkId) !== null && _options$networkId !== void 0 ? _options$networkId : options.networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegationToContract(contractAddress, options);\n  }\n  async signNameDelegationToContract(contractAddress, name) {\n    var _options$networkId2;\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (_options$networkId2 = options.networkId) !== null && _options$networkId2 !== void 0 ? _options$networkId2 : options.networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signNameDelegationToContract(contractAddress, name, options);\n  }\n  async signOracleQueryDelegationToContract(contractAddress, oracleQueryId) {\n    var _options$networkId3;\n    let {\n      onAccount,\n      ...options\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (_options$networkId3 = options.networkId) !== null && _options$networkId3 !== void 0 ? _options$networkId3 : options.networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n  _getOptions() {\n    let callOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...callOptions,\n      onAccount: getValueOrErrorProxy(() => this._resolveAccount(callOptions.onAccount))\n    };\n  }\n}","map":{"version":3,"names":["CompilerError","DuplicateNodeError","NodeNotFoundError","NotImplementedError","TypeError","AeSdkMethods","getValueOrErrorProxy","AeSdkBase","constructor","nodes","options","arguments","length","undefined","_defineProperty","Map","forEach","_ref","i","name","instance","addNode","compilerApi","_options","onCompiler","api","ensureNodeConnected","pool","get","selectedNodeName","node","select","has","set","selectNode","isNodeConnected","getNodeInfo","getNodesInPool","Promise","all","Array","from","entries","map","_ref2","addresses","_resolveAccount","account","onAccount","String","address","sign","data","signTransaction","tx","networkId","getNetworkId","signMessage","message","signTypedData","aci","signDelegationToContract","contractAddress","_options$networkId","signNameDelegationToContract","_options$networkId2","signOracleQueryDelegationToContract","oracleQueryId","_options$networkId3","_getOptions","callOptions","onNode"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\AeSdkBase.ts"],"sourcesContent":["import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  override _getOptions(callOptions: AeSdkMethodsOptions = {}): {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...callOptions,\n      onAccount: getValueOrErrorProxy(() => this._resolveAccount(callOptions.onAccount)),\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const RLP = require('rlp');\nconst {\n  int2ByteArray,\n  byteArray2Int\n} = require('./int2ByteArray');\nmodule.exports = {\n  encode(value) {\n    return new Uint8Array(RLP.encode(int2ByteArray(value)));\n  },\n  decode(buffer) {\n    const decoded = RLP.decode(buffer, true);\n    return [byteArray2Int(decoded.data), decoded.remainder];\n  }\n};","map":{"version":3,"names":["RLP","require","int2ByteArray","byteArray2Int","module","exports","encode","value","Uint8Array","decode","buffer","decoded","data","remainder"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/utils/RLPInt.js"],"sourcesContent":["const RLP = require('rlp')\nconst {int2ByteArray, byteArray2Int } = require('./int2ByteArray')\n\nmodule.exports = {\n    encode(value) {\n        return new Uint8Array(RLP.encode(int2ByteArray(value)))\n    },\n    decode(buffer) {\n        const decoded = RLP.decode(buffer, true)\n        return [byteArray2Int(decoded.data), decoded.remainder]\n    }\n}\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAM;EAACC,aAAa;EAAEC;AAAc,CAAC,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAElEG,MAAM,CAACC,OAAO,GAAG;EACbC,MAAMA,CAACC,KAAK,EAAE;IACV,OAAO,IAAIC,UAAU,CAACR,GAAG,CAACM,MAAM,CAACJ,aAAa,CAACK,KAAK,CAAC,CAAC,CAAC;EAC3D,CAAC;EACDE,MAAMA,CAACC,MAAM,EAAE;IACX,MAAMC,OAAO,GAAGX,GAAG,CAACS,MAAM,CAACC,MAAM,EAAE,IAAI,CAAC;IACxC,OAAO,CAACP,aAAa,CAACQ,OAAO,CAACC,IAAI,CAAC,EAAED,OAAO,CAACE,SAAS,CAAC;EAC3D;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
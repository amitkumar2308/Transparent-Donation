{"ast":null,"code":"const {\n  symbolIdentifier\n} = require('../utils/hash');\nconst FateTypeError = require('../Errors/FateTypeError');\nconst FateCalldata = require('../types/FateCalldata');\nconst BaseDataFactory = require('./BaseDataFactory');\nclass CallDataFactory extends BaseDataFactory {\n  supports({\n    name,\n    _valueTypes\n  }) {\n    return 'calldata' === name;\n  }\n  create(type, value) {\n    if (!Array.isArray(value)) {\n      throw new FateTypeError(type.name, `Fate calldata arguments must be an Array, got ${value} instead`);\n    }\n    const argsData = this.valueFactory.createMultiple(type.argumentTypes, value);\n    const functionId = symbolIdentifier(type.functionName);\n    return new FateCalldata(functionId, type.argumentTypes, argsData);\n  }\n}\nmodule.exports = CallDataFactory;","map":{"version":3,"names":["symbolIdentifier","require","FateTypeError","FateCalldata","BaseDataFactory","CallDataFactory","supports","name","_valueTypes","create","type","value","Array","isArray","argsData","valueFactory","createMultiple","argumentTypes","functionId","functionName","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/DataFactory/CallDataFactory.js"],"sourcesContent":["const {symbolIdentifier} = require('../utils/hash')\nconst FateTypeError = require('../Errors/FateTypeError')\nconst FateCalldata = require('../types/FateCalldata')\nconst BaseDataFactory = require('./BaseDataFactory')\n\nclass CallDataFactory extends BaseDataFactory {\n    supports({ name, _valueTypes }) {\n        return 'calldata' === name\n    }\n\n    create(type, value) {\n        if (!Array.isArray(value)) {\n            throw new FateTypeError(\n                type.name,\n                `Fate calldata arguments must be an Array, got ${value} instead`\n            )\n        }\n\n        const argsData = this.valueFactory.createMultiple(type.argumentTypes, value)\n        const functionId = symbolIdentifier(type.functionName)\n\n        return new FateCalldata(functionId, type.argumentTypes, argsData)\n    }\n}\n\nmodule.exports = CallDataFactory\n"],"mappings":"AAAA,MAAM;EAACA;AAAgB,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAME,YAAY,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAMI,eAAe,SAASD,eAAe,CAAC;EAC1CE,QAAQA,CAAC;IAAEC,IAAI;IAAEC;EAAY,CAAC,EAAE;IAC5B,OAAO,UAAU,KAAKD,IAAI;EAC9B;EAEAE,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIT,aAAa,CACnBQ,IAAI,CAACH,IAAI,EACR,iDAAgDI,KAAM,UAC3D,CAAC;IACL;IAEA,MAAMG,QAAQ,GAAG,IAAI,CAACC,YAAY,CAACC,cAAc,CAACN,IAAI,CAACO,aAAa,EAAEN,KAAK,CAAC;IAC5E,MAAMO,UAAU,GAAGlB,gBAAgB,CAACU,IAAI,CAACS,YAAY,CAAC;IAEtD,OAAO,IAAIhB,YAAY,CAACe,UAAU,EAAER,IAAI,CAACO,aAAa,EAAEH,QAAQ,CAAC;EACrE;AACJ;AAEAM,MAAM,CAACC,OAAO,GAAGhB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.mjs\";\nimport * as Mappers from \"./models/mappers.mjs\";\nexport class Node extends coreClient.ServiceClient {\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host, options) {\n    var _ref, _options$endpoint;\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: (_ref = (_options$endpoint = options.endpoint) !== null && _options$endpoint !== void 0 ? _options$endpoint : options.baseUri) !== null && _ref !== void 0 ? _ref : \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(options) {\n    return this.sendOperationRequest({\n      options\n    }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(options) {\n    return this.sendOperationRequest({\n      options\n    }, getCurrentKeyBlockOperationSpec);\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(options) {\n    return this.sendOperationRequest({\n      options\n    }, getCurrentKeyBlockHashOperationSpec);\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(options) {\n    return this.sendOperationRequest({\n      options\n    }, getCurrentKeyBlockHeightOperationSpec);\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(options) {\n    return this.sendOperationRequest({\n      options\n    }, getPendingKeyBlockOperationSpec);\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getKeyBlockByHashOperationSpec);\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(height, options) {\n    return this.sendOperationRequest({\n      height,\n      options\n    }, getKeyBlockByHeightOperationSpec);\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getMicroBlockHeaderByHashOperationSpec);\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getMicroBlockTransactionsByHashOperationSpec);\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(hash, index, options) {\n    return this.sendOperationRequest({\n      hash,\n      index,\n      options\n    }, getMicroBlockTransactionByHashAndIndexOperationSpec);\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getMicroBlockTransactionsCountByHashOperationSpec);\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(options) {\n    return this.sendOperationRequest({\n      options\n    }, getCurrentGenerationOperationSpec);\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getGenerationByHashOperationSpec);\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(height, options) {\n    return this.sendOperationRequest({\n      height,\n      options\n    }, getGenerationByHeightOperationSpec);\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getAccountByPubkeyOperationSpec);\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(pubkey, height, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      height,\n      options\n    }, getAccountByPubkeyAndHeightOperationSpec);\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(pubkey, hash, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      hash,\n      options\n    }, getAccountByPubkeyAndHashOperationSpec);\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getPendingAccountTransactionsByPubkeyOperationSpec);\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getAccountNextNonceOperationSpec);\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(body, options) {\n    return this.sendOperationRequest({\n      body,\n      options\n    }, protectedDryRunTxsOperationSpec);\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getTransactionByHashOperationSpec);\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(hash, options) {\n    return this.sendOperationRequest({\n      hash,\n      options\n    }, getTransactionInfoByHashOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(body, options) {\n    return this.sendOperationRequest({\n      body,\n      options\n    }, postTransactionOperationSpec);\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getContractOperationSpec);\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getContractCodeOperationSpec);\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getContractPoIOperationSpec);\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getOracleByPubkeyOperationSpec);\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getOracleQueriesByPubkeyOperationSpec);\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(pubkey, queryId, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      queryId,\n      options\n    }, getOracleQueryByPubkeyAndQueryIdOperationSpec);\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(name, options) {\n    return this.sendOperationRequest({\n      name,\n      options\n    }, getNameEntryByNameOperationSpec);\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(pubkey, options) {\n    return this.sendOperationRequest({\n      pubkey,\n      options\n    }, getChannelByPubkeyOperationSpec);\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(options) {\n    return this.sendOperationRequest({\n      options\n    }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options) {\n    return this.sendOperationRequest({\n      options\n    }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(options) {\n    return this.sendOperationRequest({\n      options\n    }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst getTopHeaderOperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.from, Parameters.limit, Parameters.type],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};","map":{"version":3,"names":["coreClient","Parameters","Mappers","Node","ServiceClient","constructor","$host","options","_ref","_options$endpoint","undefined","Error","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","hash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","height","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","index","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","pubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonce","getAccountNextNonceOperationSpec","protectedDryRunTxs","body","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkey","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","queryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","name","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","createSerializer","path","httpMethod","responses","bodyMapper","Header","ErrorModel","isError","queryParameters","intAsString","urlParameters","headerParameters","accept","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","SignedTx","CountResponse","Generation","Account","NextNonceResponse","strategy","DryRunResults","requestBody","contentType","mediaType","TxInfoObject","PostTxResponse","body1","ContractObject","ByteCode","PoI","RegisteredOracle","OracleQueries","from","limit","type","OracleQuery","NameEntry","Channel","PeerPubKey","Status","element"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\apis\\node\\node.ts"],"sourcesContent":["import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classPrivateFieldGet from \"@babel/runtime-corejs3/helpers/classPrivateFieldGet\";\nimport _classPrivateFieldSet from \"@babel/runtime-corejs3/helpers/classPrivateFieldSet\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nimport { RpcError, RpcInternalError, RpcMethodNotFoundError } from \"../schema.mjs\";\nimport { InvalidRpcMessageError, MissingCallbackError } from \"../../utils/errors.mjs\";\nimport { ensureError } from \"../../utils/other.mjs\";\nvar _callbacks = /*#__PURE__*/new WeakMap();\nvar _messageId = /*#__PURE__*/new WeakMap();\nvar _methods = /*#__PURE__*/new WeakMap();\nvar _handleMessage = /*#__PURE__*/new WeakSet();\nvar _sendRequest = /*#__PURE__*/new WeakSet();\nvar _sendResponse = /*#__PURE__*/new WeakSet();\nvar _processResponse = /*#__PURE__*/new WeakSet();\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient {\n  constructor(connection, onDisconnect, methods) {\n    /**\n     * Process response message\n     * @param msg - Message object\n     */\n    _classPrivateMethodInitSpec(this, _processResponse);\n    _classPrivateMethodInitSpec(this, _sendResponse);\n    _classPrivateMethodInitSpec(this, _sendRequest);\n    _classPrivateMethodInitSpec(this, _handleMessage);\n    _classPrivateFieldInitSpec(this, _callbacks, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _messageId, {\n      writable: true,\n      value: 0\n    });\n    _classPrivateFieldInitSpec(this, _methods, {\n      writable: true,\n      value: void 0\n    });\n    this.connection = connection;\n    _classPrivateFieldSet(this, _methods, methods);\n    connection.connect(_classPrivateMethodGet(this, _handleMessage, _handleMessage2).bind(this), onDisconnect);\n  }\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request(name, params) {\n    _classPrivateMethodGet(this, _sendRequest, _sendRequest2).call(this, _classPrivateFieldSet(this, _messageId, _classPrivateFieldGet(this, _messageId) + 1), name, params);\n    return new Promise((resolve, reject) => {\n      _classPrivateFieldGet(this, _callbacks).set(_classPrivateFieldGet(this, _messageId), {\n        resolve,\n        reject\n      });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify(name, params) {\n    _classPrivateMethodGet(this, _sendRequest, _sendRequest2).call(this, undefined, name, params);\n  }\n}\nasync function _handleMessage2(msg, origin) {\n  if ((msg === null || msg === void 0 ? void 0 : msg.jsonrpc) !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n  if ('result' in msg || 'error' in msg) {\n    _classPrivateMethodGet(this, _processResponse, _processResponse2).call(this, msg);\n    return;\n  }\n  const request = msg;\n  let result;\n  let error;\n  try {\n    if (!(request.method in _classPrivateFieldGet(this, _methods))) throw new RpcMethodNotFoundError();\n    const methodName = request.method;\n    result = await _classPrivateFieldGet(this, _methods)[methodName](request.params, origin);\n  } catch (e) {\n    ensureError(e);\n    error = e;\n  }\n  if (request.id != null) {\n    _classPrivateMethodGet(this, _sendResponse, _sendResponse2).call(this, request.id, request.method, result, error == null || error instanceof RpcError ? error : new RpcInternalError());\n  }\n  if (error != null && !(error instanceof RpcError)) throw error;\n}\nfunction _sendRequest2(id, method, params) {\n  this.connection.sendMessage({\n    jsonrpc: '2.0',\n    ...(id != null ? {\n      id\n    } : {}),\n    method,\n    ...(params != null ? {\n      params\n    } : {})\n  });\n}\nfunction _sendResponse2(id, method,\n// TODO: remove as far it is not required in JSON RPC\nresult, error) {\n  this.connection.sendMessage({\n    jsonrpc: '2.0',\n    id,\n    method,\n    ...(error != null ? {\n      error: error.toJSON()\n    } : {\n      result\n    })\n  });\n}\nfunction _processResponse2(_ref) {\n  let {\n    id,\n    error,\n    result\n  } = _ref;\n  const callbacks = _classPrivateFieldGet(this, _callbacks).get(id);\n  if (callbacks == null) throw new MissingCallbackError(id);\n  if (error != null) callbacks.reject(RpcError.deserialize(error));else callbacks.resolve(result);\n  _classPrivateFieldGet(this, _callbacks).delete(id);\n}","map":{"version":3,"names":["RpcError","RpcInternalError","RpcMethodNotFoundError","InvalidRpcMessageError","MissingCallbackError","ensureError","_callbacks","WeakMap","_messageId","_methods","_handleMessage","WeakSet","_sendRequest","_sendResponse","_processResponse","RpcClient","constructor","connection","onDisconnect","methods","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","Map","_classPrivateFieldSet","connect","_classPrivateMethodGet","_handleMessage2","bind","request","name","params","_sendRequest2","call","_classPrivateFieldGet","Promise","resolve","reject","set","notify","undefined","msg","origin","jsonrpc","JSON","stringify","_processResponse2","result","error","method","methodName","e","id","_sendResponse2","sendMessage","toJSON","_ref","callbacks","get","deserialize","delete"],"sources":["C:\\Users\\amitk\\Desktop\\Donation Project\\donation-aeternity-blockchain-contract\\node_modules\\@aeternity\\aepp-sdk\\src\\aepp-wallet-communication\\rpc\\RpcClient.ts"],"sourcesContent":["import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const FateTag = require('../FateTag');\nconst BaseSerializer = require('./BaseSerializer');\nconst ByteArraySerializer = require('./ByteArraySerializer');\nconst FateString = require('../types/FateString');\nconst FatePrefixError = require('../Errors/FatePrefixError');\nconst byteArraySerializer = new ByteArraySerializer();\nclass StringSerializer extends BaseSerializer {\n  serialize(value) {\n    const encoder = new TextEncoder();\n    const bytes = encoder.encode(value);\n    return byteArraySerializer.serialize(bytes);\n  }\n  deserializeStream(data) {\n    const buffer = new Uint8Array(data);\n    const prefix = buffer[0];\n    if ((prefix & 0b11) !== FateTag.SHORT_STRING && ![FateTag.EMPTY_STRING, FateTag.LONG_STRING].includes(prefix)) {\n      throw new FatePrefixError(prefix);\n    }\n    const decoder = new TextDecoder();\n    const [bytes, rest] = byteArraySerializer.deserializeStream(buffer);\n    return [new FateString(decoder.decode(bytes.valueOf())), rest];\n  }\n}\nmodule.exports = StringSerializer;","map":{"version":3,"names":["FateTag","require","BaseSerializer","ByteArraySerializer","FateString","FatePrefixError","byteArraySerializer","StringSerializer","serialize","value","encoder","TextEncoder","bytes","encode","deserializeStream","data","buffer","Uint8Array","prefix","SHORT_STRING","EMPTY_STRING","LONG_STRING","includes","decoder","TextDecoder","rest","decode","valueOf","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/StringSerializer.js"],"sourcesContent":["const FateTag = require('../FateTag')\nconst BaseSerializer = require('./BaseSerializer')\nconst ByteArraySerializer = require('./ByteArraySerializer')\nconst FateString = require('../types/FateString')\nconst FatePrefixError = require('../Errors/FatePrefixError')\n\nconst byteArraySerializer = new ByteArraySerializer()\n\nclass StringSerializer extends BaseSerializer {\n    serialize(value) {\n        const encoder = new TextEncoder()\n        const bytes = encoder.encode(value)\n\n        return byteArraySerializer.serialize(bytes)\n    }\n\n    deserializeStream(data) {\n        const buffer = new Uint8Array(data)\n        const prefix = buffer[0]\n\n        if (\n            (prefix & 0b11) !== FateTag.SHORT_STRING\n            && ![FateTag.EMPTY_STRING, FateTag.LONG_STRING].includes(prefix)\n        ) {\n            throw new FatePrefixError(prefix)\n        }\n\n        const decoder = new TextDecoder()\n        const [bytes, rest] = byteArraySerializer.deserializeStream(buffer)\n\n        return [\n            new FateString(decoder.decode(bytes.valueOf())),\n            rest\n        ]\n    }\n}\n\nmodule.exports = StringSerializer\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC;AACrC,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAME,mBAAmB,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAMG,UAAU,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMI,eAAe,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AAE5D,MAAMK,mBAAmB,GAAG,IAAIH,mBAAmB,CAAC,CAAC;AAErD,MAAMI,gBAAgB,SAASL,cAAc,CAAC;EAC1CM,SAASA,CAACC,KAAK,EAAE;IACb,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IACjC,MAAMC,KAAK,GAAGF,OAAO,CAACG,MAAM,CAACJ,KAAK,CAAC;IAEnC,OAAOH,mBAAmB,CAACE,SAAS,CAACI,KAAK,CAAC;EAC/C;EAEAE,iBAAiBA,CAACC,IAAI,EAAE;IACpB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAACF,IAAI,CAAC;IACnC,MAAMG,MAAM,GAAGF,MAAM,CAAC,CAAC,CAAC;IAExB,IACI,CAACE,MAAM,GAAG,IAAI,MAAMlB,OAAO,CAACmB,YAAY,IACrC,CAAC,CAACnB,OAAO,CAACoB,YAAY,EAAEpB,OAAO,CAACqB,WAAW,CAAC,CAACC,QAAQ,CAACJ,MAAM,CAAC,EAClE;MACE,MAAM,IAAIb,eAAe,CAACa,MAAM,CAAC;IACrC;IAEA,MAAMK,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IACjC,MAAM,CAACZ,KAAK,EAAEa,IAAI,CAAC,GAAGnB,mBAAmB,CAACQ,iBAAiB,CAACE,MAAM,CAAC;IAEnE,OAAO,CACH,IAAIZ,UAAU,CAACmB,OAAO,CAACG,MAAM,CAACd,KAAK,CAACe,OAAO,CAAC,CAAC,CAAC,CAAC,EAC/CF,IAAI,CACP;EACL;AACJ;AAEAG,MAAM,CAACC,OAAO,GAAGtB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const FateTag = require('../FateTag');\nconst RLPInt = require('../utils/RLPInt');\nconst BaseSerializer = require('./BaseSerializer');\nconst FateComparator = require('../FateComparator');\nconst FateMap = require('../types/FateMap');\nconst FatePrefixError = require('../Errors/FatePrefixError');\nclass MapSerializer extends BaseSerializer {\n  serialize(map) {\n    const len = map.length;\n    const cmp = FateComparator(map.keyType);\n    const sortedItems = [...map.items];\n    sortedItems.sort((elA, elB) => cmp(elA.key, elB.key));\n    const serializedItems = sortedItems.map(i => {\n      return [this.globalSerializer.serialize(i.key), this.globalSerializer.serialize(i.value)];\n    });\n    return [FateTag.MAP, ...RLPInt.encode(len), ...serializedItems.flat(Infinity)];\n  }\n  deserializeStream(data, typeInfo) {\n    const buffer = new Uint8Array(data);\n    const prefix = buffer[0];\n    if (prefix !== FateTag.MAP) {\n      throw new FatePrefixError(prefix);\n    }\n    const [len, remainder] = RLPInt.decode(buffer.slice(1));\n    let rest = remainder;\n    if (len === 0n) {\n      return [new FateMap(), rest];\n    }\n    let keyType;\n    let valueType;\n    if (typeof typeInfo !== 'undefined') {\n      ({\n        keyType,\n        valueType\n      } = typeInfo);\n    }\n    const elements = [];\n    for (let i = 0n; i < len; i++) {\n      const [key, keyRest] = this.globalSerializer.deserializeStream(rest, keyType);\n      const [value, valueRest] = this.globalSerializer.deserializeStream(keyRest, valueType);\n      elements.push([key, value]);\n      rest = valueRest;\n    }\n    const firstEl = elements[0];\n    if (typeof typeInfo === 'undefined') {\n      keyType = firstEl[0].type;\n      valueType = firstEl[1].type;\n    }\n    return [new FateMap(keyType, valueType, elements), rest];\n  }\n}\nmodule.exports = MapSerializer;","map":{"version":3,"names":["FateTag","require","RLPInt","BaseSerializer","FateComparator","FateMap","FatePrefixError","MapSerializer","serialize","map","len","length","cmp","keyType","sortedItems","items","sort","elA","elB","key","serializedItems","i","globalSerializer","value","MAP","encode","flat","Infinity","deserializeStream","data","typeInfo","buffer","Uint8Array","prefix","remainder","decode","slice","rest","valueType","elements","keyRest","valueRest","push","firstEl","type","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/MapSerializer.js"],"sourcesContent":["const FateTag = require('../FateTag')\nconst RLPInt = require('../utils/RLPInt')\nconst BaseSerializer = require('./BaseSerializer')\nconst FateComparator = require('../FateComparator')\nconst FateMap = require('../types/FateMap')\nconst FatePrefixError = require('../Errors/FatePrefixError')\n\nclass MapSerializer extends BaseSerializer {\n    serialize(map) {\n        const len = map.length\n        const cmp = FateComparator(map.keyType)\n\n        const sortedItems = [...map.items]\n        sortedItems.sort((elA, elB) => cmp(elA.key, elB.key))\n\n        const serializedItems = sortedItems.map(i => {\n            return [\n                this.globalSerializer.serialize(i.key),\n                this.globalSerializer.serialize(i.value)\n            ]\n        })\n\n        return [\n            FateTag.MAP,\n            ...RLPInt.encode(len),\n            ...serializedItems.flat(Infinity)\n        ]\n    }\n\n    deserializeStream(data, typeInfo) {\n        const buffer = new Uint8Array(data)\n        const prefix = buffer[0]\n\n        if (prefix !== FateTag.MAP) {\n            throw new FatePrefixError(prefix)\n        }\n\n        const [len, remainder] = RLPInt.decode(buffer.slice(1))\n        let rest = remainder\n\n        if (len === 0n) {\n            return [new FateMap(), rest]\n        }\n\n        let keyType\n        let valueType\n\n        if (typeof typeInfo !== 'undefined') {\n            ({keyType, valueType} = typeInfo)\n        }\n\n        const elements = []\n        for (let i = 0n; i < len; i++) {\n            const [key, keyRest] = this.globalSerializer.deserializeStream(rest, keyType)\n            const [value, valueRest] = this.globalSerializer.deserializeStream(keyRest, valueType)\n\n            elements.push([key, value])\n            rest = valueRest\n        }\n\n        const firstEl = elements[0]\n\n        if (typeof typeInfo === 'undefined') {\n            keyType = firstEl[0].type\n            valueType = firstEl[1].type\n        }\n\n        return [\n            new FateMap(\n                keyType,\n                valueType,\n                elements\n            ),\n            rest\n        ]\n    }\n}\n\nmodule.exports = MapSerializer\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
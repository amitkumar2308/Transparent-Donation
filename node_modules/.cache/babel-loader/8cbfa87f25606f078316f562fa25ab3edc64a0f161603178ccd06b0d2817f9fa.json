{"ast":null,"code":"const FateSet = require('../types/FateSet');\nconst BaseDataFactory = require('./BaseDataFactory');\nclass SetDataFactory extends BaseDataFactory {\n  supports({\n    name,\n    _valueTypes\n  }) {\n    return 'set' === name;\n  }\n  create(type, value) {\n    const resolvedValues = [];\n    for (const item of value) {\n      resolvedValues.push(this.valueFactory.create(type.valuesType, item));\n    }\n    return new FateSet(type.valuesType, resolvedValues);\n  }\n}\nmodule.exports = SetDataFactory;","map":{"version":3,"names":["FateSet","require","BaseDataFactory","SetDataFactory","supports","name","_valueTypes","create","type","value","resolvedValues","item","push","valueFactory","valuesType","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/DataFactory/SetDataFactory.js"],"sourcesContent":["const FateSet = require('../types/FateSet')\nconst BaseDataFactory = require('./BaseDataFactory')\n\nclass SetDataFactory extends BaseDataFactory {\n    supports({name, _valueTypes}) {\n        return 'set' === name\n    }\n\n    create(type, value) {\n        const resolvedValues = []\n        for (const item of value) {\n            resolvedValues.push(this.valueFactory.create(type.valuesType, item))\n        }\n\n        return new FateSet(type.valuesType, resolvedValues)\n    }\n}\n\nmodule.exports = SetDataFactory\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAME,cAAc,SAASD,eAAe,CAAC;EACzCE,QAAQA,CAAC;IAACC,IAAI;IAAEC;EAAW,CAAC,EAAE;IAC1B,OAAO,KAAK,KAAKD,IAAI;EACzB;EAEAE,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,MAAMC,cAAc,GAAG,EAAE;IACzB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACtBC,cAAc,CAACE,IAAI,CAAC,IAAI,CAACC,YAAY,CAACN,MAAM,CAACC,IAAI,CAACM,UAAU,EAAEH,IAAI,CAAC,CAAC;IACxE;IAEA,OAAO,IAAIX,OAAO,CAACQ,IAAI,CAACM,UAAU,EAAEJ,cAAc,CAAC;EACvD;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAGb,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}
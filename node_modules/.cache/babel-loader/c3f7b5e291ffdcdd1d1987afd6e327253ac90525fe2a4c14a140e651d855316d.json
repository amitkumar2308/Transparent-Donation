{"ast":null,"code":"const TypeFactory = require('./TypeFactory');\nconst FateData = require('./types/FateData');\nconst BaseSerializer = require('./Serializers/BaseSerializer');\nconst AddressSerializer = require('./Serializers/AddressSerializer');\nconst BitsSerializer = require('./Serializers/BitsSerializer');\nconst BoolSerializer = require('./Serializers/BoolSerializer');\nconst ByteArraySerializer = require('./Serializers/ByteArraySerializer');\nconst BytesSerializer = require('./Serializers/BytesSerializer');\nconst ChannelSerializer = require('./Serializers/ChannelSerializer');\nconst ContractSerializer = require('./Serializers/ContractSerializer');\nconst IntSerializer = require('./Serializers/IntSerializer');\nconst VoidSerializer = require('./Serializers/VoidSerializer');\nconst ListSerializer = require('./Serializers/ListSerializer');\nconst SetSerializer = require('./Serializers/SetSerializer');\nconst MapSerializer = require('./Serializers/MapSerializer');\nconst OracleQuerySerializer = require('./Serializers/OracleQuerySerializer');\nconst OracleSerializer = require('./Serializers/OracleSerializer');\nconst StringSerializer = require('./Serializers/StringSerializer');\nconst TupleSerializer = require('./Serializers/TupleSerializer');\nconst VariantSerializer = require('./Serializers/VariantSerializer');\nconst Bls12381FieldSerializer = require('./Serializers/Bls12381FieldSerializer');\nconst CalldataSerializer = require('./Serializers/CalldataSerializer');\nconst TypeSerializer = require('./Serializers/TypeSerializer');\nconst SerializerError = require('./Errors/SerializerError');\nclass Serializer extends BaseSerializer {\n  constructor() {\n    super();\n    this.typeFactory = new TypeFactory();\n    this._serializers = {\n      'void': new VoidSerializer(),\n      'bool': new BoolSerializer(),\n      'int': new IntSerializer(),\n      'tuple': new TupleSerializer(this),\n      'record': new TupleSerializer(this),\n      'list': new ListSerializer(this),\n      'set': new SetSerializer(this),\n      'map': new MapSerializer(this),\n      'byte_array': new ByteArraySerializer(),\n      'string': new StringSerializer(),\n      'hash': new BytesSerializer(),\n      'signature': new BytesSerializer(),\n      'bits': new BitsSerializer(),\n      'variant': new VariantSerializer(this),\n      'bytes': new BytesSerializer(),\n      'account_pubkey': new AddressSerializer(),\n      'contract_pubkey': new ContractSerializer(),\n      'oracle_pubkey': new OracleSerializer(),\n      'oracle_query_id': new OracleQuerySerializer(),\n      'channel': new ChannelSerializer(),\n      'bls12_381.fr': new Bls12381FieldSerializer(),\n      'bls12_381.fp': new Bls12381FieldSerializer(),\n      'calldata': new CalldataSerializer(this),\n      'type': new TypeSerializer()\n    };\n  }\n  _getSerializer(type) {\n    if (!type.hasOwnProperty('name')) {\n      throw new SerializerError('Unsupported type: ' + JSON.stringify(type));\n    }\n    const typeName = type.name;\n    if (!this._serializers.hasOwnProperty(typeName)) {\n      throw new SerializerError('Unsupported type: ' + JSON.stringify(typeName));\n    }\n    return this._serializers[typeName];\n  }\n  serialize(data) {\n    if (typeof data !== 'object') {\n      throw new SerializerError('Only object serialization is supported. Got: ' + JSON.stringify(data));\n    }\n    if (!(data instanceof FateData)) {\n      throw new SerializerError('Only instances of FateData is supported.');\n    }\n    return this._getSerializer(data).serialize(data);\n  }\n  deserializeWithType(data, type) {\n    if (!(data instanceof Uint8Array)) {\n      throw new SerializerError('Only instances of Uint8Array is supported.');\n    }\n    return this._getSerializer(type).deserialize(data, type);\n  }\n  deserialize(data) {\n    if (!(data instanceof Uint8Array)) {\n      throw new SerializerError('Only instances of Uint8Array is supported.');\n    }\n    const type = this.typeFactory.createType(data);\n    return this.deserializeWithType(data, type);\n  }\n  deserializeStream(data, typeInfo) {\n    if (!(data instanceof Uint8Array)) {\n      throw new SerializerError('Only instances of Uint8Array is supported.');\n    }\n    let type = typeInfo;\n    if (typeof typeInfo === 'undefined') {\n      type = this.typeFactory.createType(data);\n    }\n    return this._getSerializer(type).deserializeStream(data, typeInfo);\n  }\n}\nmodule.exports = Serializer;","map":{"version":3,"names":["TypeFactory","require","FateData","BaseSerializer","AddressSerializer","BitsSerializer","BoolSerializer","ByteArraySerializer","BytesSerializer","ChannelSerializer","ContractSerializer","IntSerializer","VoidSerializer","ListSerializer","SetSerializer","MapSerializer","OracleQuerySerializer","OracleSerializer","StringSerializer","TupleSerializer","VariantSerializer","Bls12381FieldSerializer","CalldataSerializer","TypeSerializer","SerializerError","Serializer","constructor","typeFactory","_serializers","_getSerializer","type","hasOwnProperty","JSON","stringify","typeName","name","serialize","data","deserializeWithType","Uint8Array","deserialize","createType","deserializeStream","typeInfo","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializer.js"],"sourcesContent":["const TypeFactory = require('./TypeFactory')\nconst FateData = require('./types/FateData')\nconst BaseSerializer = require('./Serializers/BaseSerializer')\nconst AddressSerializer = require('./Serializers/AddressSerializer')\nconst BitsSerializer = require('./Serializers/BitsSerializer')\nconst BoolSerializer = require('./Serializers/BoolSerializer')\nconst ByteArraySerializer = require('./Serializers/ByteArraySerializer')\nconst BytesSerializer = require('./Serializers/BytesSerializer')\nconst ChannelSerializer = require('./Serializers/ChannelSerializer')\nconst ContractSerializer = require('./Serializers/ContractSerializer')\nconst IntSerializer = require('./Serializers/IntSerializer')\nconst VoidSerializer = require('./Serializers/VoidSerializer')\nconst ListSerializer = require('./Serializers/ListSerializer')\nconst SetSerializer = require('./Serializers/SetSerializer')\nconst MapSerializer = require('./Serializers/MapSerializer')\nconst OracleQuerySerializer = require('./Serializers/OracleQuerySerializer')\nconst OracleSerializer = require('./Serializers/OracleSerializer')\nconst StringSerializer = require('./Serializers/StringSerializer')\nconst TupleSerializer = require('./Serializers/TupleSerializer')\nconst VariantSerializer = require('./Serializers/VariantSerializer')\nconst Bls12381FieldSerializer = require('./Serializers/Bls12381FieldSerializer')\nconst CalldataSerializer = require('./Serializers/CalldataSerializer')\nconst TypeSerializer = require('./Serializers/TypeSerializer')\nconst SerializerError = require('./Errors/SerializerError')\n\nclass Serializer extends BaseSerializer {\n    constructor() {\n        super()\n\n        this.typeFactory = new TypeFactory()\n        this._serializers = {\n            'void': new VoidSerializer(),\n            'bool': new BoolSerializer(),\n            'int': new IntSerializer(),\n            'tuple': new TupleSerializer(this),\n            'record': new TupleSerializer(this),\n            'list': new ListSerializer(this),\n            'set': new SetSerializer(this),\n            'map': new MapSerializer(this),\n            'byte_array': new ByteArraySerializer(),\n            'string': new StringSerializer(),\n            'hash': new BytesSerializer(),\n            'signature': new BytesSerializer(),\n            'bits': new BitsSerializer(),\n            'variant': new VariantSerializer(this),\n            'bytes': new BytesSerializer(),\n            'account_pubkey': new AddressSerializer(),\n            'contract_pubkey': new ContractSerializer(),\n            'oracle_pubkey': new OracleSerializer(),\n            'oracle_query_id': new OracleQuerySerializer(),\n            'channel': new ChannelSerializer(),\n            'bls12_381.fr': new Bls12381FieldSerializer(),\n            'bls12_381.fp': new Bls12381FieldSerializer(),\n            'calldata': new CalldataSerializer(this),\n            'type': new TypeSerializer(),\n        }\n    }\n\n    _getSerializer(type) {\n        if (!type.hasOwnProperty('name')) {\n            throw new SerializerError('Unsupported type: ' + JSON.stringify(type))\n        }\n\n        const typeName = type.name\n        if (!this._serializers.hasOwnProperty(typeName)) {\n            throw new SerializerError('Unsupported type: ' + JSON.stringify(typeName))\n        }\n\n        return this._serializers[typeName]\n    }\n\n    serialize(data) {\n        if (typeof data !== 'object') {\n            throw new SerializerError('Only object serialization is supported. Got: ' + JSON.stringify(data))\n        }\n\n        if (!(data instanceof FateData)) {\n            throw new SerializerError('Only instances of FateData is supported.')\n        }\n\n        return this._getSerializer(data).serialize(data)\n    }\n\n    deserializeWithType(data, type) {\n        if (!(data instanceof Uint8Array)) {\n            throw new SerializerError('Only instances of Uint8Array is supported.')\n        }\n\n        return this._getSerializer(type).deserialize(data, type)\n    }\n\n    deserialize(data) {\n        if (!(data instanceof Uint8Array)) {\n            throw new SerializerError('Only instances of Uint8Array is supported.')\n        }\n\n        const type = this.typeFactory.createType(data)\n\n        return this.deserializeWithType(data, type)\n    }\n\n    deserializeStream(data, typeInfo) {\n        if (!(data instanceof Uint8Array)) {\n            throw new SerializerError('Only instances of Uint8Array is supported.')\n        }\n\n        let type = typeInfo\n        if (typeof typeInfo === 'undefined') {\n            type = this.typeFactory.createType(data)\n        }\n\n        return this._getSerializer(type).deserializeStream(data, typeInfo)\n    }\n}\n\nmodule.exports = Serializer\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { AeSdkAepp, BrowserWindowMessageConnection, Node, SUBSCRIPTION_TYPES, walletDetector } from '@aeternity/aepp-sdk';\nimport { useState, useMemo, useCallback } from 'react';\nimport network from './network.ts';\n\n/**\r\n * æternitySDK Hook\r\n *\r\n */\nconst useAeternitySDK = () => {\n  _s();\n  const [address, setAddress] = useState();\n  const [networkId, setNetworkId] = useState();\n  const aeSdk = useMemo(() => new AeSdkAepp({\n    name: \"aepp-boilerplate\",\n    nodes: [{\n      name: network.id,\n      instance: new Node(network.url)\n    }],\n    onAddressChange: ({\n      current\n    }) => {\n      setAddress(Object.keys(current)[0]);\n    },\n    onNetworkChange: ({\n      networkId\n    }) => {\n      setNetworkId(networkId);\n    },\n    onDisconnect: () => console.log('Wallet disconnected')\n  }), []);\n  const connectToWallet = useCallback(async () => {\n    // TODO: remove NonNullable after releasing https://github.com/aeternity/aepp-sdk-js/pull/1801\n\n    const wallet = await new Promise(resolve => {\n      let stopScan;\n      const handleWallets = async ({\n        wallets,\n        newWallet\n      }) => {\n        newWallet = newWallet || Object.values(wallets)[0];\n        stopScan();\n        resolve(newWallet);\n      };\n      const scannerConnection = new BrowserWindowMessageConnection();\n      stopScan = walletDetector(scannerConnection, handleWallets);\n    });\n    await aeSdk.connectToWallet(await wallet.getConnection());\n    await aeSdk.subscribeAddress(SUBSCRIPTION_TYPES.subscribe, 'current');\n    // TODO: remove after releasing https://github.com/aeternity/aepp-sdk-js/issues/1802\n    aeSdk.onAddressChange({\n      current: {\n        [aeSdk.address]: {}\n      },\n      connected: {}\n    });\n  }, [aeSdk]);\n  return {\n    aeSdk,\n    connectToWallet,\n    address,\n    networkId\n  };\n};\n_s(useAeternitySDK, \"xdJOHr3oHqXRHuzI8CHVEo3+OSc=\");\nexport default useAeternitySDK;","map":{"version":3,"names":["AeSdkAepp","BrowserWindowMessageConnection","Node","SUBSCRIPTION_TYPES","walletDetector","useState","useMemo","useCallback","network","useAeternitySDK","_s","address","setAddress","networkId","setNetworkId","aeSdk","name","nodes","id","instance","url","onAddressChange","current","Object","keys","onNetworkChange","onDisconnect","console","log","connectToWallet","wallet","Promise","resolve","stopScan","handleWallets","wallets","newWallet","values","scannerConnection","getConnection","subscribeAddress","subscribe","connected"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/src/components/useAeternitySDK.ts"],"sourcesContent":["import {\r\n\tAeSdkAepp,\r\n\tBrowserWindowMessageConnection,\r\n\tEncoded,\r\n\tNode,\r\n\tSUBSCRIPTION_TYPES,\r\n\twalletDetector,\r\n } from '@aeternity/aepp-sdk';\r\nimport { useState, useMemo, useCallback } from 'react';\r\n\r\nimport network from './network.ts';\r\n\r\n/**\r\n * æternitySDK Hook\r\n *\r\n */\r\nconst useAeternitySDK = () => {\r\n\tconst [address, setAddress] = useState<Encoded.AccountAddress | undefined>();\r\n  const [networkId, setNetworkId] = useState<string | undefined>();\r\n\t\r\n\tconst aeSdk = useMemo(\r\n\t\t() => new AeSdkAepp({\r\n\t\t\tname: \"aepp-boilerplate\",\r\n\t\t\tnodes: [{ name: network.id, instance: new Node(network.url) }],\r\n\t\t\tonAddressChange: ({ current }) => {\r\n\t\t\t\tsetAddress(Object.keys(current)[0] as Encoded.AccountAddress);\r\n\t\t\t},\r\n\t\t\tonNetworkChange: ({ networkId }) => {\r\n\t\t\t\tsetNetworkId(networkId);\r\n\t\t\t},\r\n\t\t\tonDisconnect: () => console.log('Wallet disconnected'),\r\n\t\t}),\r\n\t\t[],\r\n\t);\r\n\r\n\tconst connectToWallet = useCallback(async (): Promise<void> => {\r\n    type HandleWallets = Parameters<typeof walletDetector>[1];\r\n    // TODO: remove NonNullable after releasing https://github.com/aeternity/aepp-sdk-js/pull/1801\r\n    type Wallet = NonNullable<Parameters<HandleWallets>[0]['newWallet']>;\r\n\r\n    const wallet = await new Promise<Wallet>((resolve) => {\r\n      let stopScan: ReturnType<typeof walletDetector>;\r\n      const handleWallets: HandleWallets = async ({ wallets, newWallet }) => {\r\n        newWallet = newWallet || Object.values(wallets)[0];\r\n        stopScan();\r\n        resolve(newWallet);\r\n      };\r\n      const scannerConnection = new BrowserWindowMessageConnection();\r\n      stopScan = walletDetector(scannerConnection, handleWallets);\r\n    });\r\n\r\n    await aeSdk.connectToWallet(await wallet.getConnection());\r\n    await aeSdk.subscribeAddress(SUBSCRIPTION_TYPES.subscribe, 'current');\r\n    // TODO: remove after releasing https://github.com/aeternity/aepp-sdk-js/issues/1802\r\n    aeSdk.onAddressChange({ current: { [aeSdk.address]: {} }, connected: {} });\r\n  }, [aeSdk]);\r\n\r\n\treturn { aeSdk, connectToWallet, address, networkId };\r\n}\r\n\r\nexport default useAeternitySDK;"],"mappings":";AAAA,SACCA,SAAS,EACTC,8BAA8B,EAE9BC,IAAI,EACJC,kBAAkB,EAClBC,cAAc,QACP,qBAAqB;AAC7B,SAASC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAEtD,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAqC,CAAC;EAC3E,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAqB,CAAC;EAEjE,MAAMU,KAAK,GAAGT,OAAO,CACpB,MAAM,IAAIN,SAAS,CAAC;IACnBgB,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE,CAAC;MAAED,IAAI,EAAER,OAAO,CAACU,EAAE;MAAEC,QAAQ,EAAE,IAAIjB,IAAI,CAACM,OAAO,CAACY,GAAG;IAAE,CAAC,CAAC;IAC9DC,eAAe,EAAEA,CAAC;MAAEC;IAAQ,CAAC,KAAK;MACjCV,UAAU,CAACW,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAA2B,CAAC;IAC9D,CAAC;IACDG,eAAe,EAAEA,CAAC;MAAEZ;IAAU,CAAC,KAAK;MACnCC,YAAY,CAACD,SAAS,CAAC;IACxB,CAAC;IACDa,YAAY,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAC,qBAAqB;EACtD,CAAC,CAAC,EACF,EACD,CAAC;EAED,MAAMC,eAAe,GAAGtB,WAAW,CAAC,YAA2B;IAE5D;;IAGA,MAAMuB,MAAM,GAAG,MAAM,IAAIC,OAAO,CAAUC,OAAO,IAAK;MACpD,IAAIC,QAA2C;MAC/C,MAAMC,aAA4B,GAAG,MAAAA,CAAO;QAAEC,OAAO;QAAEC;MAAU,CAAC,KAAK;QACrEA,SAAS,GAAGA,SAAS,IAAIb,MAAM,CAACc,MAAM,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC;QAClDF,QAAQ,CAAC,CAAC;QACVD,OAAO,CAACI,SAAS,CAAC;MACpB,CAAC;MACD,MAAME,iBAAiB,GAAG,IAAIrC,8BAA8B,CAAC,CAAC;MAC9DgC,QAAQ,GAAG7B,cAAc,CAACkC,iBAAiB,EAAEJ,aAAa,CAAC;IAC7D,CAAC,CAAC;IAEF,MAAMnB,KAAK,CAACc,eAAe,CAAC,MAAMC,MAAM,CAACS,aAAa,CAAC,CAAC,CAAC;IACzD,MAAMxB,KAAK,CAACyB,gBAAgB,CAACrC,kBAAkB,CAACsC,SAAS,EAAE,SAAS,CAAC;IACrE;IACA1B,KAAK,CAACM,eAAe,CAAC;MAAEC,OAAO,EAAE;QAAE,CAACP,KAAK,CAACJ,OAAO,GAAG,CAAC;MAAE,CAAC;MAAE+B,SAAS,EAAE,CAAC;IAAE,CAAC,CAAC;EAC5E,CAAC,EAAE,CAAC3B,KAAK,CAAC,CAAC;EAEZ,OAAO;IAAEA,KAAK;IAAEc,eAAe;IAAElB,OAAO;IAAEE;EAAU,CAAC;AACtD,CAAC;AAAAH,EAAA,CA1CKD,eAAe;AA4CrB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}
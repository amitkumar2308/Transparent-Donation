{"ast":null,"code":"const FateTuple = require('../types/FateTuple');\nconst FateCalldata = require('../types/FateCalldata');\nconst FateByteArray = require('../types/FateByteArray');\nconst BaseSerializer = require('./BaseSerializer');\nconst {\n  FateTypeTuple,\n  FateTypeByteArray\n} = require('../FateTypes');\nclass CalldataSerializer extends BaseSerializer {\n  serialize(calldata) {\n    const funcBytes = new FateByteArray(calldata.functionId);\n    const argsTuple = new FateTuple(calldata.argTypes, calldata.args);\n    const calldataTuple = new FateTuple([funcBytes.type, argsTuple.type], [funcBytes, argsTuple]);\n    return this.globalSerializer.serialize(calldataTuple);\n  }\n  deserialize(data, typeInfo) {\n    const calldataType = FateTypeTuple([FateTypeByteArray(), FateTypeTuple(typeInfo.argumentTypes)]);\n    const [calldataTuple] = this.globalSerializer.deserializeStream(data, calldataType);\n    const [functionId, argsTuple] = calldataTuple.items;\n    return new FateCalldata(functionId.valueOf(), argsTuple.valueTypes, argsTuple.items);\n  }\n}\nmodule.exports = CalldataSerializer;","map":{"version":3,"names":["FateTuple","require","FateCalldata","FateByteArray","BaseSerializer","FateTypeTuple","FateTypeByteArray","CalldataSerializer","serialize","calldata","funcBytes","functionId","argsTuple","argTypes","args","calldataTuple","type","globalSerializer","deserialize","data","typeInfo","calldataType","argumentTypes","deserializeStream","items","valueOf","valueTypes","module","exports"],"sources":["C:/Users/amitk/Desktop/Donation Project/donation-aeternity-blockchain-contract/node_modules/@aeternity/aepp-calldata/src/Serializers/CalldataSerializer.js"],"sourcesContent":["const FateTuple = require('../types/FateTuple')\nconst FateCalldata = require('../types/FateCalldata')\nconst FateByteArray = require('../types/FateByteArray')\nconst BaseSerializer = require('./BaseSerializer')\nconst {FateTypeTuple, FateTypeByteArray} = require('../FateTypes')\n\nclass CalldataSerializer extends BaseSerializer {\n    serialize(calldata) {\n        const funcBytes = new FateByteArray(calldata.functionId)\n        const argsTuple = new FateTuple(calldata.argTypes, calldata.args)\n\n        const calldataTuple = new FateTuple(\n            [funcBytes.type, argsTuple.type],\n            [funcBytes, argsTuple]\n        )\n\n        return this.globalSerializer.serialize(calldataTuple)\n    }\n\n    deserialize(data, typeInfo) {\n        const calldataType = FateTypeTuple([\n            FateTypeByteArray(),\n            FateTypeTuple(typeInfo.argumentTypes)\n        ])\n\n        const [calldataTuple,] = this.globalSerializer.deserializeStream(data, calldataType)\n        const [functionId, argsTuple] = calldataTuple.items\n\n        return new FateCalldata(functionId.valueOf(), argsTuple.valueTypes, argsTuple.items)\n    }\n}\n\nmodule.exports = CalldataSerializer\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAME,aAAa,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMG,cAAc,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAM;EAACI,aAAa;EAAEC;AAAiB,CAAC,GAAGL,OAAO,CAAC,cAAc,CAAC;AAElE,MAAMM,kBAAkB,SAASH,cAAc,CAAC;EAC5CI,SAASA,CAACC,QAAQ,EAAE;IAChB,MAAMC,SAAS,GAAG,IAAIP,aAAa,CAACM,QAAQ,CAACE,UAAU,CAAC;IACxD,MAAMC,SAAS,GAAG,IAAIZ,SAAS,CAACS,QAAQ,CAACI,QAAQ,EAAEJ,QAAQ,CAACK,IAAI,CAAC;IAEjE,MAAMC,aAAa,GAAG,IAAIf,SAAS,CAC/B,CAACU,SAAS,CAACM,IAAI,EAAEJ,SAAS,CAACI,IAAI,CAAC,EAChC,CAACN,SAAS,EAAEE,SAAS,CACzB,CAAC;IAED,OAAO,IAAI,CAACK,gBAAgB,CAACT,SAAS,CAACO,aAAa,CAAC;EACzD;EAEAG,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACxB,MAAMC,YAAY,GAAGhB,aAAa,CAAC,CAC/BC,iBAAiB,CAAC,CAAC,EACnBD,aAAa,CAACe,QAAQ,CAACE,aAAa,CAAC,CACxC,CAAC;IAEF,MAAM,CAACP,aAAa,CAAE,GAAG,IAAI,CAACE,gBAAgB,CAACM,iBAAiB,CAACJ,IAAI,EAAEE,YAAY,CAAC;IACpF,MAAM,CAACV,UAAU,EAAEC,SAAS,CAAC,GAAGG,aAAa,CAACS,KAAK;IAEnD,OAAO,IAAItB,YAAY,CAACS,UAAU,CAACc,OAAO,CAAC,CAAC,EAAEb,SAAS,CAACc,UAAU,EAAEd,SAAS,CAACY,KAAK,CAAC;EACxF;AACJ;AAEAG,MAAM,CAACC,OAAO,GAAGrB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}